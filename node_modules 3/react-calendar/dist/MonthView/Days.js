"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TileGroup = _interopRequireDefault(require("../TileGroup"));

var _Day = _interopRequireDefault(require("./Day"));

var _dates = require("../shared/dates");

var _propTypes2 = require("../shared/propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Days =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Days, _PureComponent);

  function Days() {
    _classCallCheck(this, Days);

    return _possibleConstructorReturn(this, _getPrototypeOf(Days).apply(this, arguments));
  }

  _createClass(Days, [{
    key: "render",
    value: function render() {
      var _this = this;

      var monthIndex = this.monthIndex;

      var _this$props = this.props,
          showFixedNumberOfWeeks = _this$props.showFixedNumberOfWeeks,
          showNeighboringMonth = _this$props.showNeighboringMonth,
          otherProps = _objectWithoutProperties(_this$props, ["showFixedNumberOfWeeks", "showNeighboringMonth"]);

      return _react.default.createElement(_TileGroup.default, _extends({}, otherProps, {
        className: "react-calendar__month-view__days",
        count: 7,
        dateTransform: function dateTransform(day) {
          return new Date(_this.year, monthIndex, day);
        },
        dateType: "day",
        end: this.end,
        offset: this.offset,
        start: this.start,
        tile: _Day.default // Tile props
        ,
        currentMonthIndex: monthIndex
      }));
    }
  }, {
    key: "offset",
    get: function get() {
      var _this$props2 = this.props,
          showFixedNumberOfWeeks = _this$props2.showFixedNumberOfWeeks,
          showNeighboringMonth = _this$props2.showNeighboringMonth;

      if (showFixedNumberOfWeeks || showNeighboringMonth) {
        return 0;
      }

      var _this$props3 = this.props,
          activeStartDate = _this$props3.activeStartDate,
          calendarType = _this$props3.calendarType;
      return (0, _dates.getDayOfWeek)(activeStartDate, calendarType);
    }
    /**
     * Defines on which day of the month the grid shall start. If we simply show current
     * month, we obviously start on day one, but if showNeighboringMonth is set to
     * true, we need to find the beginning of the week the first day of the month is in.
     */

  }, {
    key: "start",
    get: function get() {
      var _this$props4 = this.props,
          showFixedNumberOfWeeks = _this$props4.showFixedNumberOfWeeks,
          showNeighboringMonth = _this$props4.showNeighboringMonth;

      if (showFixedNumberOfWeeks || showNeighboringMonth) {
        var _this$props5 = this.props,
            activeStartDate = _this$props5.activeStartDate,
            calendarType = _this$props5.calendarType;
        return -(0, _dates.getDayOfWeek)(activeStartDate, calendarType) + 1;
      }

      return 1;
    }
    /**
     * Defines on which day of the month the grid shall end. If we simply show current
     * month, we need to stop on the last day of the month, but if showNeighboringMonth
     * is set to true, we need to find the end of the week the last day of the month is in.
     */

  }, {
    key: "end",
    get: function get() {
      var _this$props6 = this.props,
          activeStartDate = _this$props6.activeStartDate,
          showFixedNumberOfWeeks = _this$props6.showFixedNumberOfWeeks,
          showNeighboringMonth = _this$props6.showNeighboringMonth;
      var daysInMonth = (0, _dates.getDaysInMonth)(activeStartDate);

      if (showFixedNumberOfWeeks) {
        // Always show 6 weeks
        return this.start + 6 * 7 - 1;
      }

      if (showNeighboringMonth) {
        var year = this.year,
            monthIndex = this.monthIndex;
        var calendarType = this.props.calendarType;
        var activeEndDate = new Date(year, monthIndex, daysInMonth);
        return daysInMonth + (7 - (0, _dates.getDayOfWeek)(activeEndDate, calendarType) - 1);
      }

      return daysInMonth;
    }
  }, {
    key: "year",
    get: function get() {
      var activeStartDate = this.props.activeStartDate;
      return (0, _dates.getYear)(activeStartDate);
    }
  }, {
    key: "monthIndex",
    get: function get() {
      var activeStartDate = this.props.activeStartDate;
      return (0, _dates.getMonthIndex)(activeStartDate);
    }
  }]);

  return Days;
}(_react.PureComponent);

exports.default = Days;
Days.propTypes = _objectSpread({
  calendarType: _propTypes2.isCalendarType.isRequired,
  showFixedNumberOfWeeks: _propTypes.default.bool,
  showNeighboringMonth: _propTypes.default.bool
}, _propTypes2.tileGroupProps);