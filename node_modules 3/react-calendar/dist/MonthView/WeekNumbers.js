"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _WeekNumber = _interopRequireDefault(require("./WeekNumber"));

var _Flex = _interopRequireDefault(require("../Flex"));

var _dates = require("../shared/dates");

var _propTypes2 = require("../shared/propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var WeekNumbers =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(WeekNumbers, _PureComponent);

  function WeekNumbers() {
    _classCallCheck(this, WeekNumbers);

    return _possibleConstructorReturn(this, _getPrototypeOf(WeekNumbers).apply(this, arguments));
  }

  _createClass(WeekNumbers, [{
    key: "render",
    value: function render() {
      var dates = this.dates,
          numberOfWeeks = this.numberOfWeeks,
          weekNumbers = this.weekNumbers;
      var onClickWeekNumber = this.props.onClickWeekNumber;
      return _react.default.createElement(_Flex.default, {
        className: "react-calendar__month-view__weekNumbers",
        count: numberOfWeeks,
        direction: "column",
        style: {
          flexBasis: 'calc(100% * (1 / 8)',
          flexShrink: 0
        }
      }, weekNumbers.map(function (weekNumber, weekIndex) {
        return _react.default.createElement(_WeekNumber.default, {
          date: dates[weekIndex],
          key: weekNumber,
          onClickWeekNumber: onClickWeekNumber,
          weekNumber: weekNumber
        });
      }));
    }
  }, {
    key: "startWeekday",
    get: function get() {
      var _this$props = this.props,
          activeStartDate = _this$props.activeStartDate,
          calendarType = _this$props.calendarType;
      return (0, _dates.getDayOfWeek)(activeStartDate, calendarType);
    }
  }, {
    key: "numberOfDays",
    get: function get() {
      var activeStartDate = this.props.activeStartDate;
      return (0, _dates.getDaysInMonth)(activeStartDate);
    }
  }, {
    key: "numberOfWeeks",
    get: function get() {
      var showFixedNumberOfWeeks = this.props.showFixedNumberOfWeeks;

      if (showFixedNumberOfWeeks) {
        return 6;
      }

      var days = this.numberOfDays - (7 - this.startWeekday);
      return 1 + Math.ceil(days / 7);
    }
  }, {
    key: "year",
    get: function get() {
      var activeStartDate = this.props.activeStartDate;
      return (0, _dates.getYear)(activeStartDate);
    }
  }, {
    key: "monthIndex",
    get: function get() {
      var activeStartDate = this.props.activeStartDate;
      return (0, _dates.getMonthIndex)(activeStartDate);
    }
  }, {
    key: "day",
    get: function get() {
      var activeStartDate = this.props.activeStartDate;
      return (0, _dates.getDay)(activeStartDate);
    }
  }, {
    key: "dates",
    get: function get() {
      var year = this.year,
          monthIndex = this.monthIndex,
          numberOfWeeks = this.numberOfWeeks,
          day = this.day;
      var calendarType = this.props.calendarType;
      var dates = [];

      for (var index = 0; index < numberOfWeeks; index += 1) {
        dates.push((0, _dates.getBeginOfWeek)(new Date(year, monthIndex, day + index * 7), calendarType));
      }

      return dates;
    }
  }, {
    key: "weekNumbers",
    get: function get() {
      var dates = this.dates;
      var calendarType = this.props.calendarType;
      return dates.map(function (date) {
        return (0, _dates.getWeekNumber)(date, calendarType);
      });
    }
  }]);

  return WeekNumbers;
}(_react.PureComponent);

exports.default = WeekNumbers;
WeekNumbers.propTypes = {
  activeStartDate: _propTypes.default.instanceOf(Date).isRequired,
  calendarType: _propTypes2.isCalendarType.isRequired,
  onClickWeekNumber: _propTypes.default.func,
  showFixedNumberOfWeeks: _propTypes.default.bool
};