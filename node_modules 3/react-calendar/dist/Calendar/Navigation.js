"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _dates = require("../shared/dates");

var _dateFormatter = require("../shared/dateFormatter");

var _propTypes2 = require("../shared/propTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Navigation =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(Navigation, _PureComponent);

  function Navigation() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Navigation);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Navigation)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClickPrevious", function () {
      var _this$props = _this.props,
          date = _this$props.activeStartDate,
          view = _this$props.view,
          setActiveStartDate = _this$props.setActiveStartDate;
      setActiveStartDate((0, _dates.getBeginPrevious)(view, date));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClickNext", function () {
      var _this$props2 = _this.props,
          date = _this$props2.activeStartDate,
          view = _this$props2.view,
          setActiveStartDate = _this$props2.setActiveStartDate;
      setActiveStartDate((0, _dates.getBeginNext)(view, date));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClickPrevious2", function () {
      var _this$props3 = _this.props,
          date = _this$props3.activeStartDate,
          view = _this$props3.view,
          setActiveStartDate = _this$props3.setActiveStartDate;
      setActiveStartDate((0, _dates.getBeginPrevious2)(view, date));
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onClickNext2", function () {
      var _this$props4 = _this.props,
          date = _this$props4.activeStartDate,
          view = _this$props4.view,
          setActiveStartDate = _this$props4.setActiveStartDate;
      setActiveStartDate((0, _dates.getBeginNext2)(view, date));
    });

    return _this;
  }

  _createClass(Navigation, [{
    key: "render",
    value: function render() {
      var label = this.label;
      var _this$props5 = this.props,
          date = _this$props5.activeStartDate,
          drillUp = _this$props5.drillUp,
          navigationLabel = _this$props5.navigationLabel,
          next2Label = _this$props5.next2Label,
          nextLabel = _this$props5.nextLabel,
          prev2Label = _this$props5.prev2Label,
          prevLabel = _this$props5.prevLabel,
          view = _this$props5.view;
      var className = 'react-calendar__navigation';
      return _react.default.createElement("div", {
        className: className,
        style: {
          display: 'flex'
        }
      }, prev2Label !== null && view !== 'century' && _react.default.createElement("button", {
        className: "".concat(className, "__arrow ").concat(className, "__prev2-button"),
        disabled: this.prev2ButtonDisabled,
        onClick: this.onClickPrevious2,
        type: "button"
      }, prev2Label), _react.default.createElement("button", {
        className: "".concat(className, "__arrow ").concat(className, "__prev-button"),
        disabled: this.prevButtonDisabled,
        onClick: this.onClickPrevious,
        type: "button"
      }, prevLabel), _react.default.createElement("button", {
        className: "react-calendar__navigation__label",
        onClick: drillUp,
        disabled: !this.drillUpAvailable,
        style: {
          flexGrow: 1
        },
        type: "button"
      }, navigationLabel ? navigationLabel({
        date: date,
        view: view,
        label: label
      }) : label), _react.default.createElement("button", {
        className: "".concat(className, "__arrow ").concat(className, "__next-button"),
        disabled: this.nextButtonDisabled,
        onClick: this.onClickNext,
        type: "button"
      }, nextLabel), next2Label !== null && view !== 'century' && _react.default.createElement("button", {
        className: "".concat(className, "__arrow ").concat(className, "__next2-button"),
        disabled: this.next2ButtonDisabled,
        onClick: this.onClickNext2,
        type: "button"
      }, next2Label));
    }
  }, {
    key: "drillUpAvailable",
    get: function get() {
      var _this$props6 = this.props,
          view = _this$props6.view,
          views = _this$props6.views;
      return views.indexOf(view) > 0;
    }
  }, {
    key: "prevButtonDisabled",
    get: function get() {
      var _this$props7 = this.props,
          date = _this$props7.activeStartDate,
          minDate = _this$props7.minDate,
          view = _this$props7.view;
      var previousActiveStartDate = (0, _dates.getBeginPrevious)(view, date);

      if (previousActiveStartDate.getFullYear() < 1000) {
        return true;
      }

      var previousActiveEndDate = (0, _dates.getEndPrevious)(view, date);
      return minDate && minDate >= previousActiveEndDate;
    }
  }, {
    key: "prev2ButtonDisabled",
    get: function get() {
      var _this$props8 = this.props,
          date = _this$props8.activeStartDate,
          minDate = _this$props8.minDate,
          view = _this$props8.view;
      var previousActiveStartDate = (0, _dates.getBeginPrevious2)(view, date);

      if (previousActiveStartDate.getFullYear() < 1000) {
        return true;
      }

      var previousActiveEndDate = (0, _dates.getEndPrevious2)(view, date);
      return minDate && minDate >= previousActiveEndDate;
    }
  }, {
    key: "nextButtonDisabled",
    get: function get() {
      var _this$props9 = this.props,
          date = _this$props9.activeStartDate,
          maxDate = _this$props9.maxDate,
          view = _this$props9.view;
      var nextActiveStartDate = (0, _dates.getBeginNext)(view, date);
      return maxDate && maxDate <= nextActiveStartDate;
    }
  }, {
    key: "next2ButtonDisabled",
    get: function get() {
      var _this$props10 = this.props,
          date = _this$props10.activeStartDate,
          maxDate = _this$props10.maxDate,
          view = _this$props10.view;
      var nextActiveStartDate = (0, _dates.getBeginNext2)(view, date);
      return maxDate && maxDate <= nextActiveStartDate;
    }
  }, {
    key: "label",
    get: function get() {
      var _this$props11 = this.props,
          date = _this$props11.activeStartDate,
          formatMonthYear = _this$props11.formatMonthYear,
          locale = _this$props11.locale,
          view = _this$props11.view;

      switch (view) {
        case 'century':
          return (0, _dates.getCenturyLabel)(date);

        case 'decade':
          return (0, _dates.getDecadeLabel)(date);

        case 'year':
          return (0, _dates.getYear)(date);

        case 'month':
          return formatMonthYear(locale, date);

        default:
          throw new Error("Invalid view: ".concat(view, "."));
      }
    }
  }]);

  return Navigation;
}(_react.PureComponent);

exports.default = Navigation;
Navigation.defaultProps = {
  formatMonthYear: _dateFormatter.formatMonthYear,
  next2Label: '»',
  nextLabel: '›',
  prev2Label: '«',
  prevLabel: '‹'
};
Navigation.propTypes = {
  activeStartDate: _propTypes.default.instanceOf(Date).isRequired,
  drillUp: _propTypes.default.func.isRequired,
  formatMonthYear: _propTypes.default.func,
  locale: _propTypes.default.string,
  maxDate: _propTypes.default.instanceOf(Date),
  minDate: _propTypes.default.instanceOf(Date),
  next2Label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  nextLabel: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  navigationLabel: _propTypes.default.func,
  prev2Label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  prevLabel: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  setActiveStartDate: _propTypes.default.func.isRequired,
  view: _propTypes2.isView.isRequired,
  views: _propTypes2.isViews.isRequired
};