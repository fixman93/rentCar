{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\n\nimport Metadata from './metadata';\nimport PhoneNumber from './PhoneNumber';\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\nimport { matchesEntirely } from './util';\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\nimport { checkNumberLengthForType } from './getNumberType_';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'; // Used in phone number format template creation.\n// Could be any digit, I guess.\n\nvar DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`\n\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\n\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\n\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\n\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\n\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\n\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\[([^\\[\\]])*\\]/g;\n}; // Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\n\n\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n  return /\\d(?=[^,}][^,}])/g;\n}; // A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\n\n\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\n\nvar MIN_LEADING_DIGITS_LENGTH = 3;\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n  /**\r\n   * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n   * @param {Object} metadata\r\n   */\n  function AsYouType(defaultCountry, metadata) {\n    _classCallCheck(this, AsYouType);\n\n    this.options = {};\n    this.metadata = new Metadata(metadata);\n\n    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n      this.defaultCountry = defaultCountry;\n    }\n\n    this.reset();\n  } // Not setting `options` to a constructor argument\n  // not to break backwards compatibility\n  // for older versions of the library.\n\n\n  _createClass(AsYouType, [{\n    key: 'input',\n    value: function input(text) {\n      // Parse input\n      var extracted_number = extract_formatted_phone_number(text) || ''; // Special case for a lone '+' sign\n      // since it's not considered a possible phone number.\n\n      if (!extracted_number) {\n        if (text && text.indexOf('+') >= 0) {\n          extracted_number = '+';\n        }\n      } // Validate possible first part of a phone number\n\n\n      if (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n        return this.currentOutput;\n      }\n\n      return this.processInput(parseIncompletePhoneNumber(extracted_number));\n    }\n  }, {\n    key: 'processInput',\n    value: function processInput(input) {\n      // If an out of position '+' sign detected\n      // (or a second '+' sign),\n      // then just drop it from the input.\n      if (input[0] === '+') {\n        if (!this.parsedInput) {\n          this.parsedInput += '+'; // If a default country was set\n          // then reset it because an explicitly international\n          // phone number is being entered\n\n          this.resetCountriness();\n        }\n\n        input = input.slice(1);\n      } // Raw phone number\n\n\n      this.parsedInput += input; // // Reset phone number validation state\n      // this.valid = false\n      // Add digits to the national number\n\n      this.nationalNumber += input; // TODO: Deprecated: rename `this.nationalNumber`\n      // to `this.nationalNumber` and remove `.getNationalNumber()`.\n      // Try to format the parsed input\n\n      if (this.isInternational()) {\n        if (!this.countryCallingCode) {\n          // Extract country calling code from the digits entered so far.\n          // There must be some digits in order to extract anything from them.\n          if (!this.nationalNumber) {\n            // Return raw phone number\n            return this.parsedInput;\n          } // If one looks at country phone codes\n          // then he can notice that no one country phone code\n          // is ever a (leftmost) substring of another country phone code.\n          // So if a valid country code is extracted so far\n          // then it means that this is the country code.\n          // If no country phone code could be extracted so far,\n          // then just return the raw phone number,\n          // because it has no way of knowing\n          // how to format the phone number so far.\n\n\n          if (!this.extractCountryCallingCode()) {\n            // Return raw phone number\n            return this.parsedInput;\n          } // Initialize country-specific data\n\n\n          this.initialize_phone_number_formats_for_this_country_calling_code();\n          this.resetFormat();\n          this.determineTheCountry();\n        } // `this.country` could be `undefined`,\n        // for instance, when there is ambiguity\n        // in a form of several different countries\n        // each corresponding to the same country phone code\n        // (e.g. NANPA: USA, Canada, etc),\n        // and there's not enough digits entered\n        // to reliably determine the country\n        // the phone number belongs to.\n        // Therefore, in cases of such ambiguity,\n        // each time something is input,\n        // try to determine the country\n        // (if it's not determined yet).\n        else if (!this.country) {\n            this.determineTheCountry();\n          }\n      } else {\n        // Some national prefixes are substrings of other national prefixes\n        // (for the same country), therefore try to extract national prefix each time\n        // because a longer national prefix might be available at some point in time.\n        var previous_national_prefix = this.nationalPrefix;\n        this.nationalNumber = this.nationalPrefix + this.nationalNumber; // Possibly extract a national prefix\n\n        this.extractNationalPrefix();\n\n        if (this.nationalPrefix !== previous_national_prefix) {\n          // National number has changed\n          // (due to another national prefix been extracted)\n          // therefore national number has changed\n          // therefore reset all previous formatting data.\n          // (and leading digits matching state)\n          this.matching_formats = undefined;\n          this.resetFormat();\n        }\n      } // if (!this.shouldFormat())\n      // {\n      // \treturn this.format_as_non_formatted_number()\n      // }\n\n\n      if (!this.nationalNumber) {\n        return this.format_as_non_formatted_number();\n      } // Check the available phone number formats\n      // based on the currently available leading digits.\n\n\n      this.match_formats_by_leading_digits(); // Format the phone number (given the next digits)\n\n      var formatted_national_phone_number = this.formatNationalNumber(input); // If the phone number could be formatted,\n      // then return it, possibly prepending with country phone code\n      // (for international phone numbers only)\n\n      if (formatted_national_phone_number) {\n        return this.formatFullNumber(formatted_national_phone_number);\n      } // If the phone number couldn't be formatted,\n      // then just fall back to the raw phone number.\n\n\n      return this.format_as_non_formatted_number();\n    }\n  }, {\n    key: 'format_as_non_formatted_number',\n    value: function format_as_non_formatted_number() {\n      // Strip national prefix for incorrectly inputted international phones.\n      if (this.isInternational() && this.countryCallingCode) {\n        return '+' + this.countryCallingCode + this.nationalNumber;\n      }\n\n      return this.parsedInput;\n    }\n  }, {\n    key: 'formatNationalNumber',\n    value: function formatNationalNumber(next_digits) {\n      // Format the next phone number digits\n      // using the previously chosen phone number format.\n      //\n      // This is done here because if `attempt_to_format_complete_phone_number`\n      // was placed before this call then the `template`\n      // wouldn't reflect the situation correctly (and would therefore be inconsistent)\n      //\n      var national_number_formatted_with_previous_format = void 0;\n\n      if (this.chosenFormat) {\n        national_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n      } // See if the input digits can be formatted properly already. If not,\n      // use the results from formatNextNationalNumberDigits(), which does formatting\n      // based on the formatting pattern chosen.\n\n\n      var formatted_number = this.attempt_to_format_complete_phone_number(); // Just because a phone number doesn't have a suitable format\n      // that doesn't mean that the phone is invalid\n      // because phone number formats only format phone numbers,\n      // they don't validate them and some (rare) phone numbers\n      // are meant to stay non-formatted.\n\n      if (formatted_number) {\n        return formatted_number;\n      } // For some phone number formats national prefix\n      // If the previously chosen phone number format\n      // didn't match the next (current) digit being input\n      // (leading digits pattern didn't match).\n\n\n      if (this.chooseAnotherFormat()) {\n        // And a more appropriate phone number format\n        // has been chosen for these `leading digits`,\n        // then format the national phone number (so far)\n        // using the newly selected phone number pattern.\n        // Will return `undefined` if it couldn't format\n        // the supplied national number\n        // using the selected phone number pattern.\n        return this.reformatNationalNumber();\n      } // If could format the next (current) digit\n      // using the previously chosen phone number format\n      // then return the formatted number so far.\n      // If no new phone number format could be chosen,\n      // and couldn't format the supplied national number\n      // using the selected phone number pattern,\n      // then it will return `undefined`.\n\n\n      return national_number_formatted_with_previous_format;\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      // Input stripped of non-phone-number characters.\n      // Can only contain a possible leading '+' sign and digits.\n      this.parsedInput = '';\n      this.currentOutput = ''; // This contains the national prefix that has been extracted. It contains only\n      // digits without formatting.\n\n      this.nationalPrefix = '';\n      this.nationalNumber = '';\n      this.carrierCode = '';\n      this.resetCountriness();\n      this.resetFormat();\n      return this;\n    }\n  }, {\n    key: 'resetCountry',\n    value: function resetCountry() {\n      if (this.isInternational()) {\n        this.country = undefined;\n      } else {\n        this.country = this.defaultCountry;\n      }\n    }\n  }, {\n    key: 'resetCountriness',\n    value: function resetCountriness() {\n      this.resetCountry();\n\n      if (this.defaultCountry && !this.isInternational()) {\n        this.metadata.country(this.defaultCountry);\n        this.countryCallingCode = this.metadata.countryCallingCode();\n        this.initialize_phone_number_formats_for_this_country_calling_code();\n      } else {\n        this.metadata.country(undefined);\n        this.countryCallingCode = undefined; // \"Available formats\" are all formats available for the country.\n        // \"Matching formats\" are only formats eligible for the national number being entered.\n\n        this.available_formats = [];\n        this.matching_formats = undefined;\n      }\n    }\n  }, {\n    key: 'resetFormat',\n    value: function resetFormat() {\n      this.chosenFormat = undefined;\n      this.template = undefined;\n      this.partially_populated_template = undefined;\n      this.last_match_position = -1;\n    } // Format each digit of national phone number (so far)\n    // using the newly selected phone number pattern.\n\n  }, {\n    key: 'reformatNationalNumber',\n    value: function reformatNationalNumber() {\n      // Format each digit of national phone number (so far)\n      // using the selected phone number pattern.\n      return this.formatNextNationalNumberDigits(this.nationalNumber);\n    }\n  }, {\n    key: 'initialize_phone_number_formats_for_this_country_calling_code',\n    value: function initialize_phone_number_formats_for_this_country_calling_code() {\n      // Get all \"eligible\" phone number formats for this country\n      this.available_formats = this.metadata.formats().filter(function (format) {\n        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n      });\n      this.matching_formats = undefined;\n    }\n  }, {\n    key: 'match_formats_by_leading_digits',\n    value: function match_formats_by_leading_digits() {\n      var leading_digits = this.nationalNumber; // \"leading digits\" pattern list starts with a\n      // \"leading digits\" pattern fitting a maximum of 3 leading digits.\n      // So, after a user inputs 3 digits of a national (significant) phone number\n      // this national (significant) number can already be formatted.\n      // The next \"leading digits\" pattern is for 4 leading digits max,\n      // and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n      // This implementation is different from Google's\n      // in that it searches for a fitting format\n      // even if the user has entered less than\n      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n      // Because some leading digits patterns already match for a single first digit.\n\n      var index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\n      if (index_of_leading_digits_pattern < 0) {\n        index_of_leading_digits_pattern = 0;\n      } // \"Available formats\" are all formats available for the country.\n      // \"Matching formats\" are only formats eligible for the national number being entered.\n      // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n      // then format matching starts narrowing down the list of possible formats\n      // (only previously matched formats are considered for next digits).\n\n\n      var available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n      this.had_enough_leading_digits = this.shouldFormat();\n      this.matching_formats = available_formats.filter(function (format) {\n        var leading_digits_patterns_count = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain\n        // leading digits pattern then it fits.\n\n        if (leading_digits_patterns_count === 0) {\n          return true;\n        }\n\n        var leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n        var leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]; // Brackets are required for `^` to be applied to\n        // all or-ed (`|`) parts, not just the first one.\n\n        return new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n      }); // If there was a phone number format chosen\n      // and it no longer holds given the new leading digits then reset it.\n      // The test for this `if` condition is marked as:\n      // \"Reset a chosen format when it no longer holds given the new leading digits\".\n      // To construct a valid test case for this one can find a country\n      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\n      if (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n        this.resetFormat();\n      }\n    }\n  }, {\n    key: 'shouldFormat',\n    value: function shouldFormat() {\n      // Start matching any formats at all when the national number\n      // entered so far is at least 3 digits long,\n      // otherwise format matching would give false negatives\n      // like when the digits entered so far are `2`\n      // and the leading digits pattern is `21` –\n      // it's quite obvious in this case that the format could be the one\n      // but due to the absence of further digits it would give false negative.\n      //\n      // Presumably the limitation of \"3 digits min\"\n      // is imposed to exclude false matches,\n      // e.g. when there are two different formats\n      // each one fitting one or two leading digits being input.\n      // But for this case I would propose a specific `if/else` condition.\n      //\n      return this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n    } // Check to see if there is an exact pattern match for these digits. If so, we\n    // should use this instead of any other formatting template whose\n    // `leadingDigitsPattern` also matches the input.\n\n  }, {\n    key: 'attempt_to_format_complete_phone_number',\n    value: function attempt_to_format_complete_phone_number() {\n      for (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var format = _ref;\n        var matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n        if (!matcher.test(this.nationalNumber)) {\n          continue;\n        }\n\n        if (!this.isFormatApplicable(format)) {\n          continue;\n        } // To leave the formatter in a consistent state\n\n\n        this.resetFormat();\n        this.chosenFormat = format;\n        var formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata); // Special handling for NANPA countries for AsYouType formatter.\n        // Copied from Google's `libphonenumber`:\n        // https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\n        if (this.nationalPrefix && this.countryCallingCode === '1') {\n          formatted_number = '1 ' + formatted_number;\n        } // Set `this.template` and `this.partially_populated_template`.\n        //\n        // `else` case doesn't ever happen\n        // with the current metadata,\n        // but just in case.\n        //\n\n        /* istanbul ignore else */\n\n\n        if (this.createFormattingTemplate(format)) {\n          // Populate `this.partially_populated_template`\n          this.reformatNationalNumber();\n        } else {\n          // Prepend `+CountryCode` in case of an international phone number\n          var full_number = this.formatFullNumber(formatted_number);\n          this.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n          this.partially_populated_template = full_number;\n        }\n\n        return formatted_number;\n      }\n    } // Prepends `+CountryCode` in case of an international phone number\n\n  }, {\n    key: 'formatFullNumber',\n    value: function formatFullNumber(formattedNationalNumber) {\n      if (this.isInternational()) {\n        return '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n      }\n\n      return formattedNationalNumber;\n    } // Extracts the country calling code from the beginning\n    // of the entered `national_number` (so far),\n    // and places the remaining input into the `national_number`.\n\n  }, {\n    key: 'extractCountryCallingCode',\n    value: function extractCountryCallingCode() {\n      var _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n          countryCallingCode = _extractCountryCallin.countryCallingCode,\n          number = _extractCountryCallin.number;\n\n      if (!countryCallingCode) {\n        return;\n      }\n\n      this.countryCallingCode = countryCallingCode; // Sometimes people erroneously write national prefix\n      // as part of an international number, e.g. +44 (0) ....\n      // This violates the standards for international phone numbers,\n      // so \"As You Type\" formatter assumes no national prefix\n      // when parsing a phone number starting from `+`.\n      // Even if it did attempt to filter-out that national prefix\n      // it would look weird for a user trying to enter a digit\n      // because from user's perspective the keyboard \"wouldn't be working\".\n\n      this.nationalNumber = number;\n      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n      return this.metadata.selectedCountry() !== undefined;\n    }\n  }, {\n    key: 'extractNationalPrefix',\n    value: function extractNationalPrefix() {\n      this.nationalPrefix = '';\n\n      if (!this.metadata.selectedCountry()) {\n        return;\n      } // Only strip national prefixes for non-international phone numbers\n      // because national prefixes can't be present in international phone numbers.\n      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\n      var _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n          potential_national_number = _strip_national_prefi.number,\n          carrierCode = _strip_national_prefi.carrierCode;\n\n      if (carrierCode) {\n        this.carrierCode = carrierCode;\n      } // We require that the NSN remaining after stripping the national prefix and\n      // carrier code be long enough to be a possible length for the region.\n      // Otherwise, we don't do the stripping, since the original number could be\n      // a valid short number.\n\n\n      if (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n        // Verify the parsed national (significant) number for this country\n        //\n        // If the original number (before stripping national prefix) was viable,\n        // and the resultant number is not, then prefer the original phone number.\n        // This is because for some countries (e.g. Russia) the same digit could be both\n        // a national prefix and a leading digit of a valid national phone number,\n        // like `8` is the national prefix for Russia and both\n        // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n        if (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n          return;\n        }\n      }\n\n      this.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n      this.nationalNumber = potential_national_number;\n      return this.nationalPrefix;\n    }\n  }, {\n    key: 'isPossibleNumber',\n    value: function isPossibleNumber(number) {\n      var validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\n      switch (validation_result) {\n        case 'IS_POSSIBLE':\n          return true;\n        // case 'IS_POSSIBLE_LOCAL_ONLY':\n        // \treturn !this.isInternational()\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: 'chooseAnotherFormat',\n    value: function chooseAnotherFormat() {\n      // When there are multiple available formats, the formatter uses the first\n      // format where a formatting template could be created.\n      for (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var format = _ref2; // If this format is currently being used\n        // and is still possible, then stick to it.\n\n        if (this.chosenFormat === format) {\n          return;\n        } // If this `format` is suitable for \"as you type\",\n        // then extract the template from this format\n        // and use it to format the phone number being input.\n\n\n        if (!this.isFormatApplicable(format)) {\n          continue;\n        }\n\n        if (!this.createFormattingTemplate(format)) {\n          continue;\n        }\n\n        this.chosenFormat = format; // With a new formatting template, the matched position\n        // using the old template needs to be reset.\n\n        this.last_match_position = -1;\n        return true;\n      } // No format matches the phone number,\n      // therefore set `country` to `undefined`\n      // (or to the default country).\n\n\n      this.resetCountry(); // No format matches the national phone number entered\n\n      this.resetFormat();\n    }\n  }, {\n    key: 'isFormatApplicable',\n    value: function isFormatApplicable(format) {\n      // If national prefix is mandatory for this phone number format\n      // and the user didn't input the national prefix\n      // then this phone number format isn't suitable.\n      if (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n        return false;\n      } // If this format doesn't use national prefix\n      // but the user did input national prefix\n      // then this phone number format isn't suitable.\n\n\n      if (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'createFormattingTemplate',\n    value: function createFormattingTemplate(format) {\n      // The formatter doesn't format numbers when numberPattern contains '|', e.g.\n      // (20|3)\\d{4}. In those cases we quickly return.\n      // (Though there's no such format in current metadata)\n\n      /* istanbul ignore if */\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n        return;\n      } // Get formatting template for this phone number format\n\n\n      var template = this.getTemplateForNumberFormatPattern(format); // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (!template) {\n        return;\n      } // This one is for national number only\n\n\n      this.partially_populated_template = template; // For convenience, the public `.template` property\n      // contains the whole international number\n      // if the phone number being input is international:\n      // 'x' for the '+' sign, 'x'es for the country phone code,\n      // a spacebar and then the template for the formatted national number.\n\n      if (this.isInternational()) {\n        this.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n      } // For local numbers, replace national prefix\n      // with a digit placeholder.\n      else {\n          this.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n        } // This one is for the full phone number\n\n\n      return this.template;\n    } // Generates formatting template for a phone number format\n\n  }, {\n    key: 'getTemplateForNumberFormatPattern',\n    value: function getTemplateForNumberFormatPattern(format) {\n      // A very smart trick by the guys at Google\n      var number_pattern = format.pattern();\n      /* istanbul ignore else */\n\n      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n        number_pattern = number_pattern // Replace anything in the form of [..] with \\d\n        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d') // Replace any standalone digit (not the one in `{}`) with \\d\n        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n      } // This match will always succeed,\n      // because the \"longest dummy phone number\"\n      // has enough length to accomodate any possible\n      // national phone number format pattern.\n\n\n      var dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]; // If the national number entered is too long\n      // for any phone number format, then abort.\n\n      if (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n        return;\n      } // Prepare the phone number format\n\n\n      var number_format = this.getFormatFormat(format); // Get a formatting template which can be used to efficiently format\n      // a partial number where digits are added one by one.\n      // Below `strict_pattern` is used for the\n      // regular expression (with `^` and `$`).\n      // This wasn't originally in Google's `libphonenumber`\n      // and I guess they don't really need it\n      // because they're not using \"templates\" to format phone numbers\n      // but I added `strict_pattern` after encountering\n      // South Korean phone number formatting bug.\n      //\n      // Non-strict regular expression bug demonstration:\n      //\n      // this.nationalNumber : `111111111` (9 digits)\n      //\n      // number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n      // number_format : `$1 $2 $3`\n      // dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n      //\n      // '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n      //\n      // template : xx xxxx xxxx\n      //\n      // But the correct template in this case is `xx xxx xxxx`.\n      // The template was generated incorrectly because of the\n      // `{3,4}` variability in the `number_pattern`.\n      //\n      // The fix is, if `this.nationalNumber` has already sufficient length\n      // to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n      // instead of `dummy_phone_number_matching_format_pattern`.\n\n      var strict_pattern = new RegExp('^' + number_pattern + '$');\n      var national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT); // If `this.nationalNumber` has already sufficient length\n      // to satisfy the `number_pattern` completely then use it\n      // instead of `dummy_phone_number_matching_format_pattern`.\n\n      if (strict_pattern.test(national_number_dummy_digits)) {\n        dummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n      } // Generate formatting template for this phone number format\n\n\n      return dummy_phone_number_matching_format_pattern // Format the dummy phone number according to the format\n      .replace(new RegExp(number_pattern), number_format) // Replace each dummy digit with a DIGIT_PLACEHOLDER\n      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n    }\n  }, {\n    key: 'formatNextNationalNumberDigits',\n    value: function formatNextNationalNumberDigits(digits) {\n      // Using `.split('')` to iterate through a string here\n      // to avoid requiring `Symbol.iterator` polyfill.\n      // `.split('')` is generally not safe for Unicode,\n      // but in this particular case for `digits` it is safe.\n      // for (const digit of digits)\n      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n        var _ref3;\n\n        if (_isArray3) {\n          if (_i3 >= _iterator3.length) break;\n          _ref3 = _iterator3[_i3++];\n        } else {\n          _i3 = _iterator3.next();\n          if (_i3.done) break;\n          _ref3 = _i3.value;\n        }\n\n        var digit = _ref3; // If there is room for more digits in current `template`,\n        // then set the next digit in the `template`,\n        // and return the formatted digits so far.\n        // If more digits are entered than the current format could handle\n\n        if (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n          // Reset the current format,\n          // so that the new format will be chosen\n          // in a subsequent `this.chooseAnotherFormat()` call\n          // later in code.\n          this.chosenFormat = undefined;\n          this.template = undefined;\n          this.partially_populated_template = undefined;\n          return;\n        }\n\n        this.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n        this.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n      } // Return the formatted phone number so far.\n\n\n      return cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1); // The old way which was good for `input-format` but is not so good\n      // for `react-phone-number-input`'s default input (`InputBasic`).\n      // return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n      // \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n    }\n  }, {\n    key: 'isInternational',\n    value: function isInternational() {\n      return this.parsedInput && this.parsedInput[0] === '+';\n    }\n  }, {\n    key: 'getFormatFormat',\n    value: function getFormatFormat(format) {\n      if (this.isInternational()) {\n        return changeInternationalFormatStyle(format.internationalFormat());\n      } // If national prefix formatting rule is set\n      // for this phone number format\n\n\n      if (format.nationalPrefixFormattingRule()) {\n        // If the user did input the national prefix\n        // (or if the national prefix formatting rule does not require national prefix)\n        // then maybe make it part of the phone number template\n        if (this.nationalPrefix || !format.usesNationalPrefix()) {\n          // Make the national prefix part of the phone number template\n          return format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n        }\n      } // Special handling for NANPA countries for AsYouType formatter.\n      // Copied from Google's `libphonenumber`:\n      // https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n      else if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n          return '1 ' + format.format();\n        }\n\n      return format.format();\n    } // Determines the country of the phone number\n    // entered so far based on the country phone code\n    // and the national phone number.\n\n  }, {\n    key: 'determineTheCountry',\n    value: function determineTheCountry() {\n      this.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n    }\n    /**\r\n     * Returns an instance of `PhoneNumber` class.\r\n     * Will return `undefined` if no national (significant) number\r\n     * digits have been entered so far, or if no `defaultCountry` has been\r\n     * set and the user enters a phone number not in international format.\r\n     */\n\n  }, {\n    key: 'getNumber',\n    value: function getNumber() {\n      if (!this.countryCallingCode || !this.nationalNumber) {\n        return undefined;\n      }\n\n      var phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\n      if (this.carrierCode) {\n        phoneNumber.carrierCode = this.carrierCode;\n      } // Phone number extensions are not supported by \"As You Type\" formatter.\n\n\n      return phoneNumber;\n    }\n  }, {\n    key: 'getNationalNumber',\n    value: function getNationalNumber() {\n      return this.nationalNumber;\n    }\n  }, {\n    key: 'getTemplate',\n    value: function getTemplate() {\n      if (!this.template) {\n        return;\n      }\n\n      var index = -1;\n      var i = 0;\n\n      while (i < this.parsedInput.length) {\n        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n        i++;\n      }\n\n      return cut_stripping_dangling_braces(this.template, index + 1);\n    }\n  }]);\n\n  return AsYouType;\n}();\n\nexport default AsYouType;\nexport function strip_dangling_braces(string) {\n  var dangling_braces = [];\n  var i = 0;\n\n  while (i < string.length) {\n    if (string[i] === '(') {\n      dangling_braces.push(i);\n    } else if (string[i] === ')') {\n      dangling_braces.pop();\n    }\n\n    i++;\n  }\n\n  var start = 0;\n  var cleared_string = '';\n  dangling_braces.push(string.length);\n\n  for (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray4) {\n      if (_i4 >= _iterator4.length) break;\n      _ref4 = _iterator4[_i4++];\n    } else {\n      _i4 = _iterator4.next();\n      if (_i4.done) break;\n      _ref4 = _i4.value;\n    }\n\n    var index = _ref4;\n    cleared_string += string.slice(start, index);\n    start = index + 1;\n  }\n\n  return cleared_string;\n}\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n  if (string[cut_before_index] === ')') {\n    cut_before_index++;\n  }\n\n  return strip_dangling_braces(string.slice(0, cut_before_index));\n}\nexport function close_dangling_braces(template, cut_before) {\n  var retained_template = template.slice(0, cut_before);\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return template.slice(0, cut_before);\n} // Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\n\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` to iterate through a string here\n  // to avoid requiring `Symbol.iterator` polyfill.\n  // `.split('')` is generally not safe for Unicode,\n  // but in this particular case for counting brackets it is safe.\n  // for (const character of string)\n\n  for (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray5) {\n      if (_i5 >= _iterator5.length) break;\n      _ref5 = _iterator5[_i5++];\n    } else {\n      _i5 = _iterator5.next();\n      if (_i5.done) break;\n      _ref5 = _i5.value;\n    }\n\n    var character = _ref5;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n} // Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\n\nexport function repeat(string, times) {\n  if (times < 1) {\n    return '';\n  }\n\n  var result = '';\n\n  while (times > 1) {\n    if (times & 1) {\n      result += string;\n    }\n\n    times >>= 1;\n    string += string;\n  }\n\n  return result + string;\n}","map":null,"metadata":{},"sourceType":"module"}