{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _core = require('libphonenumber-js/core');\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nfunction createInput(defaultMetadata) {\n  var _class, _temp2;\n  /**\r\n   * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n   * but still works good enough. When erasing or inserting digits in the middle\r\n   * of a phone number the caret usually jumps to the end: this is the expected\r\n   * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n   */\n\n\n  var InputBasic = (_temp2 = _class = function (_PureComponent) {\n    _inherits(InputBasic, _PureComponent);\n\n    function InputBasic() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, InputBasic);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputBasic.__proto__ || Object.getPrototypeOf(InputBasic)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onChange = function (event) {\n        var onChange = _this.props.onChange;\n        var value = _this.state.value;\n        var newValue = (0, _core.parseIncompletePhoneNumber)(event.target.value); // By default, if a value is something like `\"(123)\"`\n        // then Backspace would only erase the rightmost brace\n        // becoming something like `\"(123\"`\n        // which would give the same `\"123\"` value\n        // which would then be formatted back to `\"(123)\"`\n        // and so a user wouldn't be able to erase the phone number.\n        // Working around this issue with this simple hack.\n\n        if (newValue === value) {\n          if (_this.format(newValue).indexOf(event.target.value) === 0) {\n            // Trim the last digit (or plus sign).\n            newValue = newValue.slice(0, -1);\n          }\n        } // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        _this.setState({\n          value: newValue\n        }, function () {\n          return onChange(newValue);\n        });\n      }, _this.onBlur = function (event) {\n        var onBlur = _this.props.onBlur;\n        var value = _this.state.value;\n\n        if (onBlur) {\n          // `event` is React's `SyntheticEvent`.\n          // Its `.value` is read-only therefore cloning it.\n          var _event = _extends({}, event, {\n            target: _extends({}, event.target, {\n              value: value\n            }) // Workaround for `redux-form` event detection.\n            // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n          });\n\n          _event.stopPropagation = event.stopPropagation;\n          _event.preventDefault = event.preventDefault;\n          return onBlur(_event);\n        }\n      }, _this.focus = function () {\n        return _this.input.focus();\n      }, _this.storeInput = function (ref) {\n        return _this.input = ref;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(InputBasic, [{\n      key: 'format',\n      value: function format(value) {\n        var _props = this.props,\n            country = _props.country,\n            metadata = _props.metadata;\n        return (0, _core.formatIncompletePhoneNumber)(value, country, metadata);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _props2 = this.props,\n            onChange = _props2.onChange,\n            onFocus = _props2.onFocus,\n            country = _props2.country,\n            metadata = _props2.metadata,\n            rest = _objectWithoutProperties(_props2, ['onChange', 'onFocus', 'country', 'metadata']); // Prevents React from resetting the `<input/>` caret position.\n        // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n        // https://github.com/facebook/react/issues/955\n\n\n        var value = this.state.value;\n        return _react2.default.createElement('input', _extends({\n          type: 'tel',\n          autoComplete: 'tel'\n        }, rest, {\n          ref: this.storeInput,\n          value: this.format(value),\n          onChange: this.onChange,\n          onFocus: onFocus,\n          onBlur: this.onBlur\n        }));\n      }\n    }], [{\n      key: 'getDerivedStateFromProps',\n      // Prevents React from resetting the `<input/>` caret position.\n      // https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n      // https://github.com/facebook/react/issues/955\n      value: function getDerivedStateFromProps(_ref2) {\n        var value = _ref2.value;\n        return {\n          value: value\n        };\n      } // This `onBlur` interceptor is a workaround for `redux-form`'s bug\n      // so that it gets the up-to-date `value` in its `onBlur` handler.\n      // Without this fix it just gets the actual (raw) input field textual value.\n      // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n      //\n      // New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\n      // https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\n      // `redux-form` shouldn't have taken the new `value` from `event`.\n      //\n      // A developer is not supposed to pass this `onBlur` property manually.\n      // Instead, `redux-form` passes `onBlur` to this component automatically\n      // and this component patches that `onBlur` handler (a hacky way but works).\n      //\n\n    }]);\n\n    return InputBasic;\n  }(PureComponent), _class.propTypes = {\n    // The parsed phone number.\n    // E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n    value: _propTypes2.default.string.isRequired,\n    // Updates the `value`.\n    onChange: _propTypes2.default.func.isRequired,\n    // Toggles the `--focus` CSS class.\n    // https://github.com/catamphetamine/react-phone-number-input/issues/189\n    onFocus: _propTypes2.default.func,\n    // `onBlur` workaround for `redux-form`'s bug.\n    onBlur: _propTypes2.default.func,\n    // A two-letter country code for formatting `value`\n    // as a national phone number (e.g. `(800) 555 35 35`).\n    // E.g. \"US\", \"RU\", etc.\n    // If no `country` is passed then `value`\n    // is formatted as an international phone number.\n    // (e.g. `+7 800 555 35 35`)\n    country: _propTypes2.default.string,\n    // `libphonenumber-js` metadata.\n    metadata: _propTypes2.default.object.isRequired\n  }, _class.defaultProps = {\n    metadata: defaultMetadata\n  }, _temp2);\n  return (0, _reactLifecyclesCompat.polyfill)(InputBasic);\n}\n\nexports.default = createInput();","map":null,"metadata":{},"sourceType":"script"}