{"ast":null,"code":"import firebase from '../../fbConfig';\nimport 'firebase/storage';\nconst storage = firebase.storage().ref();\nexport const createProject = project => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    const profile = getState().firebase.profile;\n    const authorId = getState().firebase.auth.uid;\n\n    if (project.companyName !== 'Company') {\n      project.companyName = 'Personal';\n    }\n\n    const newImageName = new Date().getTime();\n    storage.child(\"profile/\".concat(newImageName)).put(project.picture).then(() => {\n      storage.child(\"profile/\".concat(newImageName)).getDownloadURL().then(function (downloadURL) {\n        firestore.collection('project').add({\n          createdAt: new Date(),\n          authorFirstName: profile.firstName,\n          authorLastName: profile.lastName,\n          authhorId: authorId,\n          Currency: project.currency,\n          carPrice: project.carPrice,\n          carYear: project.carYear,\n          carType: project.carType,\n          carModel: project.carModel,\n          carDescription: project.carDescription,\n          feedback: 0,\n          carStatistick: project.listElements,\n          userImage: downloadURL,\n          carCity: project.carCity,\n          carCountry: project.carCountry,\n          companyName: project.companyName,\n          carAddress: project.carAddress,\n          transmision: project.transmision\n        }).then(() => {\n          dispatch({\n            type: 'CREATE_PROJECT',\n            project\n          });\n        }).catch(err => {\n          dispatch({\n            type: 'CREATE_PROJECT_ERROR',\n            err\n          });\n        });\n      });\n    });\n  };\n};\nexport const updateProject = info => {\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection('project').doc(info.carID).update({\n      feedback: info.feedback\n    });\n  };\n};\nexport const sendMessageToClient = message => {\n  console.log('sendmessage', message);\n  return (dispatch, getState, {\n    getFirebase,\n    getFirestore\n  }) => {\n    const firestore = getFirestore();\n    firestore.collection('messages').add({\n      phoneNumber: message.phoneNumber,\n      Email: message.yourEmail,\n      date: message.date,\n      OwnerID: message.userID,\n      projectID: message.projectID,\n      messageStatus: 0,\n      carType: message.carType,\n      carModel: message.carModel\n    });\n  };\n};","map":{"version":3,"sources":["/Users/boriscivcic/Documents/rentCar/src/store/actions/projectAction.js"],"names":["firebase","storage","ref","createProject","project","dispatch","getState","getFirebase","getFirestore","firestore","profile","authorId","auth","uid","companyName","newImageName","Date","getTime","child","put","picture","then","getDownloadURL","downloadURL","collection","add","createdAt","authorFirstName","firstName","authorLastName","lastName","authhorId","Currency","currency","carPrice","carYear","carType","carModel","carDescription","feedback","carStatistick","listElements","userImage","carCity","carCountry","carAddress","transmision","type","catch","err","updateProject","info","doc","carID","update","sendMessageToClient","message","console","log","phoneNumber","Email","yourEmail","date","OwnerID","userID","projectID","messageStatus"],"mappings":"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","sourcesContent":["import firebase from '../../fbConfig'\n\nimport 'firebase/storage'\n\nconst storage = firebase.storage().ref()\n\nexport const createProject = (project) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n\n    const firestore = getFirestore()\n    const profile = getState().firebase.profile\n    const authorId = getState().firebase.auth.uid\n    if (project.companyName !== 'Company') {\n      project.companyName = 'Personal'\n    }\n    const newImageName = new Date().getTime()\n    storage.child(`profile/${newImageName}`).put(project.picture).then(() => {\n      storage.child(`profile/${newImageName}`).getDownloadURL().then(function (downloadURL) {\n        firestore.collection('project').add({\n          createdAt: new Date(),\n          authorFirstName: profile.firstName,\n          authorLastName: profile.lastName,\n          authhorId: authorId,\n          Currency: project.currency,\n          carPrice: project.carPrice,\n          carYear: project.carYear,\n          carType: project.carType,\n          carModel: project.carModel,\n          carDescription: project.carDescription,\n          feedback: 0,\n          carStatistick: project.listElements,\n          userImage: downloadURL,\n          carCity: project.carCity,\n          carCountry: project.carCountry,\n          companyName: project.companyName,\n          carAddress: project.carAddress,\n          transmision: project.transmision\n        }).then(() => {\n          dispatch({ type: 'CREATE_PROJECT', project })\n        }).catch((err) => {\n          dispatch({ type: 'CREATE_PROJECT_ERROR', err })\n        })\n      })\n\n    })\n\n  }\n}\n\nexport const updateProject = (info) => {\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    firestore.collection('project').doc(info.carID).update({\n      feedback: info.feedback\n    })\n  }\n}\n\nexport const sendMessageToClient = (message) => {\n  console.log('sendmessage', message)\n  return (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    firestore.collection('messages').add({\n      phoneNumber: message.phoneNumber,\n      Email: message.yourEmail,\n      date: message.date,\n      OwnerID: message.userID,\n      projectID: message.projectID,\n      messageStatus: 0,\n      carType: message.carType,\n      carModel: message.carModel\n    })\n  }\n}"]},"metadata":{},"sourceType":"module"}