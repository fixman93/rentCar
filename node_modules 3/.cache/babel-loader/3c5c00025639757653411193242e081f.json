{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recursiveUnset = exports.preserveValuesFromState = exports.combineReducers = undefined;\n\nvar _unset2 = require('lodash/fp/unset');\n\nvar _unset3 = _interopRequireDefault(_unset2);\n\nvar _isArray2 = require('lodash/isArray');\n\nvar _isArray3 = _interopRequireDefault(_isArray2);\n\nvar _pick2 = require('lodash/pick');\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nvar _isBoolean2 = require('lodash/isBoolean');\n\nvar _isBoolean3 = _interopRequireDefault(_isBoolean2);\n\nvar _isFunction2 = require('lodash/isFunction');\n\nvar _isFunction3 = _interopRequireDefault(_isFunction2);\n\nvar _size2 = require('lodash/size');\n\nvar _size3 = _interopRequireDefault(_size2);\n\nvar _replace2 = require('lodash/replace');\n\nvar _replace3 = _interopRequireDefault(_replace2);\n\nvar _get2 = require('lodash/get');\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.pathToArr = pathToArr;\nexports.getSlashStrPath = getSlashStrPath;\nexports.getDotStrPath = getDotStrPath;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction pathToArr(path) {\n  return path ? path.split(/\\//).filter(function (p) {\n    return !!p;\n  }) : [];\n}\n\nfunction getSlashStrPath(path) {\n  return pathToArr(path).join('/');\n}\n\nfunction getDotStrPath(path) {\n  return pathToArr(path).join('.');\n}\n\nvar combineReducers = exports.combineReducers = function combineReducers(reducers) {\n  return function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments[1];\n    return Object.keys(reducers).reduce(function (nextState, key) {\n      nextState[key] = reducers[key](state[key], action);\n      return nextState;\n    }, {});\n  };\n};\n\nvar preserveValuesFromState = exports.preserveValuesFromState = function preserveValuesFromState(state, preserveSetting, nextState) {\n  if ((0, _isFunction3.default)(preserveSetting)) {\n    return preserveSetting(state, nextState);\n  }\n\n  if ((0, _isBoolean3.default)(preserveSetting) && preserveSetting) {\n    return nextState ? _extends({}, state, nextState) : state;\n  }\n\n  if ((0, _isArray3.default)(preserveSetting)) {\n    return (0, _pick3.default)(state, preserveSetting);\n  }\n\n  throw new Error('Invalid preserve parameter. It must be an Object or an Array');\n};\n\nvar recursiveUnset = exports.recursiveUnset = function recursiveUnset(path, obj) {\n  var isRecursiveCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!path) {\n    return obj;\n  }\n\n  if ((0, _size3.default)((0, _get3.default)(obj, path)) > 0 && isRecursiveCall) {\n    return obj;\n  }\n\n  var objectWithRemovedKey = (0, _unset3.default)(path, obj);\n  var newPath = path.match(/\\./) ? (0, _replace3.default)(path, /\\.[^.]*$/, '') : '';\n  return recursiveUnset(newPath, objectWithRemovedKey, true);\n};","map":null,"metadata":{},"sourceType":"script"}