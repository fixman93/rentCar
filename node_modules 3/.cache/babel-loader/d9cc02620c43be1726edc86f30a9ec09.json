{"ast":null,"code":"import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\nexport default function isPossibleNumber(input, options, metadata) {\n  /* istanbul ignore if */\n  if (options === undefined) {\n    options = {};\n  }\n\n  metadata = new Metadata(metadata);\n\n  if (options.v2) {\n    if (!input.countryCallingCode) {\n      throw new Error('Invalid phone number object passed');\n    }\n\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else {\n    if (!input.phone) {\n      return false;\n    }\n\n    if (input.country) {\n      if (!metadata.hasCountry(input.country)) {\n        throw new Error('Unknown country: ' + input.country);\n      }\n\n      metadata.country(input.country);\n    } else {\n      if (!input.countryCallingCode) {\n        throw new Error('Invalid phone number object passed');\n      }\n\n      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n    }\n  }\n\n  if (!metadata.possibleLengths()) {\n    throw new Error('Metadata too old');\n  }\n\n  return is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\nexport function is_possible_number(national_number, is_international, metadata) {\n  switch (checkNumberLengthForType(national_number, undefined, metadata)) {\n    case 'IS_POSSIBLE':\n      return true;\n    // case 'IS_POSSIBLE_LOCAL_ONLY':\n    // \treturn !is_international\n\n    default:\n      return false;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}