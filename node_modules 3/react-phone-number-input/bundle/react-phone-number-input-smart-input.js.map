{"version":3,"sources":["webpack://react-phone-number-input-smart-input/webpack/universalModuleDefinition","webpack://react-phone-number-input-smart-input/webpack/bootstrap","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_core.js","webpack://react-phone-number-input-smart-input/./node_modules/prop-types/index.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_wks.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_global.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_has.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_descriptors.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-dp.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_export.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_fails.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_is-object.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_an-object.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_hide.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_to-iobject.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-pie.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_uid.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-keys.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_property-desc.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_iterators.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/get-iterator.js","webpack://react-phone-number-input-smart-input/external \"React\"","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/extends.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_wks-define.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_wks-ext.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-gops.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_to-object.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_set-to-string-tag.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_enum-bug-keys.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_shared.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_shared-key.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_to-integer.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-create.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_to-primitive.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_library.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_defined.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_cof.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/possibleConstructorReturn.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-gopd.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-gopn.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/typeof.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.string.iterator.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-gpo.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-keys-internal.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_redefine.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_dom-create.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_ie8-dom-define.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_ctx.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_iter-define.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_iobject.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/web.dom.iterable.js","webpack://react-phone-number-input-smart-input/./node_modules/semver-compare/index.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/inherits.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/createClass.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/classCallCheck.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/object/get-prototype-of.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/helpers/objectWithoutProperties.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/helpers.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/template parser.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/template formatter.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/close braces.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/parse.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/format.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/dom.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/input control.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/edit.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/ReactInput.js","webpack://react-phone-number-input-smart-input/./node_modules/input-format/modules/parse digit.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/ParseError.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/constants.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/util.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/metadata.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/extension.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/isViablePhoneNumber.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parseDigits.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/getNumberType_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/isPossibleNumber_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/IDD.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/RFC3966.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/validate_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/format_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/PhoneNumber.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parse_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parsePhoneNumber_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parsePhoneNumber.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/parsePhoneNumberFromString.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers/util.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers/utf-8.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers/Leniency.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers/parsePreCandidate.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers/isValidPreCandidate.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers/isValidCandidate.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/PhoneNumberMatcher.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/findNumbers_.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/searchNumbers.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/AsYouType.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/getExampleNumber.js","webpack://react-phone-number-input-smart-input/./node_modules/libphonenumber-js/es6/formatIncompletePhoneNumber.js","webpack://react-phone-number-input-smart-input/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://react-phone-number-input-smart-input/./node_modules/fbjs/lib/invariant.js","webpack://react-phone-number-input-smart-input/./node_modules/fbjs/lib/emptyFunction.js","webpack://react-phone-number-input-smart-input/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.object.create.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/object/create.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/object/create.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_set-proto.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.object.set-prototype-of.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/object/set-prototype-of.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/object/set-prototype-of.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es7.symbol.observable.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es7.symbol.async-iterator.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-gopn-ext.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_is-array.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_enum-keys.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_meta.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.symbol.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/symbol/index.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/symbol.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/symbol/iterator.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/symbol/iterator.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.object.define-property.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/object/define-property.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/object/define-property.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-sap.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.object.get-prototype-of.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/object/get-prototype-of.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-assign.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.object.assign.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/object/assign.js","webpack://react-phone-number-input-smart-input/./node_modules/babel-runtime/core-js/object/assign.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_classof.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/core.get-iterator-method.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/core.get-iterator.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_string-at.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_html.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_to-absolute-index.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_to-length.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_array-includes.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_object-dps.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_iter-create.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_a-function.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_iter-step.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/_add-to-unscopables.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/modules/es6.array.iterator.js","webpack://react-phone-number-input-smart-input/./node_modules/core-js/library/fn/get-iterator.js","webpack://react-phone-number-input-smart-input/./commonjs/InputSmart.js","webpack://react-phone-number-input-smart-input/./smart-input/index.commonjs.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","core","version","__e","store","uid","Symbol","USE_SYMBOL","global","Math","self","Function","__g","it","key","a","anObject","IE8_DOM_DEFINE","toPrimitive","dP","f","O","P","Attributes","e","TypeError","ctx","hide","$export","type","source","own","out","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","S","IS_PROTO","IS_BIND","B","IS_WRAP","W","expProto","target","undefined","C","b","this","arguments","length","apply","virtual","R","U","exec","isObject","createDesc","IObject","defined","propertyIsEnumerable","id","px","random","concat","toString","$keys","enumBugKeys","keys","bitmap","writable","default","obj","_assign","_assign2","LIBRARY","wksExt","$Symbol","charAt","getOwnPropertySymbols","def","has","TAG","tag","stat","split","shared","ceil","floor","isNaN","dPs","IE_PROTO","Empty","createDict","iframeDocument","iframe","style","display","appendChild","src","contentWindow","document","open","write","lt","close","create","Properties","result","fn","val","valueOf","slice","_typeof2","_typeof3","ReferenceError","pIE","toIObject","gOPD","getOwnPropertyDescriptor","hiddenKeys","getOwnPropertyNames","_iterator2","_interopRequireDefault","_symbol2","_typeof","constructor","$at","String","iterated","_t","_i","point","index","done","toObject","ObjectProto","getPrototypeOf","arrayIndexOf","names","push","is","createElement","aFunction","that","redefine","Iterators","$iterCreate","setToStringTag","ITERATOR","BUGGY","returnThis","Base","NAME","Constructor","next","DEFAULT","IS_SET","FORCED","methods","IteratorPrototype","getMethod","kind","proto","DEF_VALUES","VALUES_BUG","$native","$default","$entries","$anyNative","entries","values","cof","TO_STRING_TAG","DOMIterables","Collection","Array","pa","pb","na","Number","nb","_setPrototypeOf2","_create2","subClass","superClass","__proto__","_defineProperty","_defineProperty2","defineProperties","props","descriptor","protoProps","staticProps","instance","indexOf","helpers_count_occurences","symbol","string","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","err","return","template_parser","template","placeholder","parse","max_characters","character","template_formatter","should_close_braces","text","characters_in_template","value_character_index","filled_in_template","retained_template","empty_placeholder","cut_before","dangling_braces","replace","close_braces_close_braces","parse_parse","caret_position","parse_character","focused_input_character_index","caret","format_format","formatter","_ref","found","possibly_last_input_character_index","getSelection","element","selectionStart","selectionEnd","start","end","Keys","Backspace","Delete","setCaretPosition","setSelectionRange","input_control_onCut","event","input","_parse","_format","on_change","setTimeout","input_control_format_input_text","input_control_onPaste","selection","input_control_erase_selection","input_control_onChange","input_control_onKeyDown","operation","keyCode","getOperation","preventDefault","_parse2","operation_applied","edit","formatted","ReactInput_ReactInput","_React$Component","ReactInput","_temp","_this","_ret","classCallCheck_default","_len","args","_key","possibleConstructorReturn_default","get_prototype_of_default","storeInstance","getInputElement","onChange","_this$props","format","onPaste","_this$props2","onCut","_this$props3","onBlur","_this$props4","_event","extends_default","stopPropagation","onKeyDown","_this$props5","inherits_default","createClass_default","_props","inputComponent","rest","objectWithoutProperties_default","external_React_default","ref","ReactInput_isEmpty","focus","Component","propTypes","prop_types_default","func","isRequired","defaultProps","modules_ReactInput","DIGITS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parse_digit","ParseError","code","ParseError_classCallCheck","message","stack","Error","es6_ParseError","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","matchesEntirely","regular_expression","RegExp","test","metadata_typeof","iterator","metadata_createClass","metadata_classCallCheck","metadata_V3","metadata_DEFAULT_EXT_PREFIX","metadata_Metadata","Metadata","metadata","metadata_is_object","countries","country_calling_codes","country_phone_code_to_countries","join","metadata_type_of","metadata_validateMetadata","v1","v2","semver_compare_default","v3","country","_country","country_metadata","hasCountry","countryCallingCodes","countryCallingCode","formats","_getFormats","getDefaultCountryMetadataForRegion","map","_","metadata_Format","_getNationalPrefixFormattingRule","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","_type","hasTypes","metadata_getType","metadata_Type","country_calling_code","Format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","Type","possibleLengths","metadata_getExtPrefix","ext","metadata_getCountryCallingCode","metadata_isSupportedCountry","extension_RFC3966_EXTN_PREFIX","extension_CAPTURING_EXTN_DIGITS","extension_create_extension_pattern","purpose","single_extension_characters","extension_EXTN_PATTERNS_FOR_PARSING","extension_EXTN_PATTERNS_FOR_MATCHING","extension_EXTN_PATTERN","isViablePhoneNumber_VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber_isViablePhoneNumber","number","parseDigit","parseDigits","_isArray","isArray","digit","parseIncompletePhoneNumber_parseIncompletePhoneNumber","parseIncompletePhoneNumber_parsePhoneNumberCharacter","getNumberType_NON_FIXED_LINE_PHONE_TYPES","getNumberType_getNumberType","options","es6_metadata","nationalNumber","phone","nationalNumberPattern","getNumberType_is_of_type","pattern","getNumberType_checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber_is_possible_number","national_number","is_international","IDD_CAPTURING_DIGIT_PATTERN","IDD_SINGLE_IDD_PREFIX","RFC3966_slicedToArray","arr","_arr","_n","_d","_e","_s","sliceIterator","RFC3966_parseRFC3966","_part$split","_part$split2","RFC3966_formatRFC3966","_ref2","validate_isValidNumber","format_extends","assign","format_defaultOptions","formatExtension","formattedNumber","extension","format_formatNumber","chooseCountryByCountryCallingCode","format_addExtension","format_format_national_number","fromCountry","IDDPrefix","countryMetadata","defaultIDDPrefix","IDD_getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","format_formatIDDSameCountryCallingCodeNumber","format_FIRST_GROUP_PATTERN","format_format_national_number_using_format","useInternationalFormat","includeNationalPrefixForNationalFormat","internationalFormat","format_changeInternationalFormatStyle","format_as","available_formats","leadingDigitsPatterns","last_leading_digits_pattern","search","format_choose_format_for_number","local","trim","PhoneNumber_extends","PhoneNumber_createClass","es6_PhoneNumber","PhoneNumber","PhoneNumber_classCallCheck","PhoneNumber_isCountryCode","_metadata","isPossibleNumber_isPossibleNumber","parse_MAX_INPUT_STRING_LENGTH","parse_PHONE_NUMBER_START_PATTERN","parse_AFTER_PHONE_NUMBER_END_PATTERN","defaultCountry","_parse_input","parse_extract_formatted_phone_number","with_extension_stripped","number_without_extension","matches","match","extension_extractExtension","parse_parse_input","formatted_phone_number","_parse_phone_number","default_country","_extractCountryCallin","parse_extractCountryCallingCode","_parse_national_numbe","carrier_code","_strip_national_prefi","parse_strip_national_prefix_and_carrier_code","potential_national_number","carrierCode","parse_parse_national_number","exactCountry","parse_find_country_code","parse_parse_phone_number","selectedCountry","phoneNumber","valid","extended","possible","parse_result","starts_at","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","national_significant_number","captured_groups_count","nationalPrefixTransformRule","national_phone_number","possible_countries","leadingDigits","es6_parse_find_country_code","numberWithoutIDD","IDDPrefixPattern","matchedGroups","IDD_stripIDDPrefix","parsePhoneNumber_extends","parsePhoneNumber_parsePhoneNumber","parsePhoneNumber_typeof","es6_parsePhoneNumber_extends","parsePhoneNumber_slicedToArray","es6_parsePhoneNumber_parsePhoneNumber","_normalizeArguments","parsePhoneNumber_normalizeArguments","_Array$prototype$slic","_Array$prototype$slic2","arg_1","arg_2","arg_3","arg_4","parsePhoneNumber_isObject","parsePhoneNumberFromString_extends","es6_parsePhoneNumberFromString_parsePhoneNumberFromString","error","parsePhoneNumberFromString_parsePhoneNumberFromString","limit","lower","upper","trimAfterFirstMatch","regexp","_pZ","pZ","_pL","pL_regexp","pSc_regexp","pMn_regexp","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","Leniency","POSSIBLE","candidate","VALID","Leniency_containsOnlyValidXChars","STRICT_GROUPING","candidateString","Leniency_containsMoreThanOneSlashInNationalNumber","Leniency_isNationalPrefixPresentIfRequired","Leniency_checkNumberGroupingIsValid","Leniency_allNumberGroupsRemainGrouped","EXACT_GROUPING","Leniency_allNumberGroupsAreExactlyPresent","charAtIndex","charAtNextIndex","util","isNumberMatch","substring","MatchType","NSN_MATCH","getCountryCodeSource","phoneNumberRegion","getRegionCodeForCountryCode","getCountryCode","getMetadataForRegion","getNationalSignificantNumber","formatRule","chooseFormattingPatternForNumber","numberFormats","getNationalPrefixFormattingRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","formattingRuleHasFirstGroupOnly","rawInputCopy","normalizeDigitsOnly","getRawInput","maybeStripNationalPrefixAndCarrierCode","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITH_PLUS_SIGN","FROM_NUMBER_WITHOUT_PLUS_SIGN","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","Leniency_getNationalNumberGroups","alternateFormats","MetadataManager","getAlternateFormatsForCountry","formattingPattern","nationalSignificantNumber","formatNsnUsingPattern","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","hasExtension","contains","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","countryCode","region","getNddPrefixForRegion","Character","isDigit","getExtension","parsePreCandidate_SECOND_NUMBER_START_PATTERN","parsePreCandidate_parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","isValidCandidate_LEAD_CLASS_LEADING","isValidCandidate_BRACKET_PAIR_LIMIT","isValidCandidate_MATCHING_BRACKETS_ENTIRE","isValidCandidate_PUB_PAGES","PhoneNumberMatcher_extends","PhoneNumberMatcher_createClass","PhoneNumberMatcher_INNER_MATCHES","PhoneNumberMatcher_leadLimit","PhoneNumberMatcher_punctuationLimit","PhoneNumberMatcher_digitBlockLimit","PhoneNumberMatcher_blockLimit","PhoneNumberMatcher_punctuation","PhoneNumberMatcher_digitSequence","PhoneNumberMatcher_PATTERN","PhoneNumberMatcher_UNWANTED_END_CHAR_PATTERN","PhoneNumberMatcher_MAX_SAFE_INTEGER","MAX_SAFE_INTEGER","pow","es6_PhoneNumberMatcher","PhoneNumberMatcher","PhoneNumberMatcher_classCallCheck","state","searchIndex","leniency","maxTries","PATTERN","parseAndVerify","extractInnerMatch","startsAt","endsAt","isFirstMatch","possibleInnerMatch","_group","_match","group","previousChar","lastCharIndex","nextChar","isValidCandidate_isValidCandidate","lastMatch","find","hasNext","es6_findNumbers_findNumbers","matcher","results","findNumbers_findNumbers","searchNumbers_searchNumbers","AsYouType_createClass","AsYouType_LONGEST_DUMMY_PHONE_NUMBER","AsYouType_repeat","AsYouType_DIGIT_PLACEHOLDER_MATCHER","AsYouType_CREATE_CHARACTER_CLASS_PATTERN","AsYouType_CREATE_STANDALONE_DIGIT_PATTERN","AsYouType_ELIGIBLE_FORMAT_PATTERN","AsYouType_VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","es6_AsYouType","AsYouType","AsYouType_classCallCheck","reset","extracted_number","processInput","currentOutput","parsedInput","resetCountriness","isInternational","determineTheCountry","extractCountryCallingCode","initialize_phone_number_formats_for_this_country_calling_code","resetFormat","previous_national_prefix","extractNationalPrefix","matching_formats","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","formatNationalNumber","formatFullNumber","next_digits","national_number_formatted_with_previous_format","chosenFormat","formatNextNationalNumberDigits","formatted_number","attempt_to_format_complete_phone_number","chooseAnotherFormat","reformatNationalNumber","resetCountry","partially_populated_template","last_match_position","filter","leading_digits","index_of_leading_digits_pattern","had_enough_leading_digits","shouldFormat","leading_digits_patterns_count","leading_digits_pattern_index","min","leading_digits_pattern","isFormatApplicable","createFormattingTemplate","full_number","formattedNationalNumber","isPossibleNumber","_isArray2","_i2","nationalPrefixIsMandatoryWhenFormatting","getTemplateForNumberFormatPattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","getFormatFormat","strict_pattern","national_number_dummy_digits","digits","_iterator3","_isArray3","_i3","_ref3","AsYouType_cut_stripping_dangling_braces","cut_before_index","pop","cleared_string","_iterator4","_isArray4","_i4","_ref4","AsYouType_strip_dangling_braces","times","getExampleNumber_getExampleNumber","examples","formatIncompletePhoneNumber_formatIncompletePhoneNumber","validateFormat","condition","argIndex","framesToPop","makeEmptyFunction","arg","emptyFunction","thatReturns","thatReturnsFalse","thatReturnsTrue","thatReturnsNull","thatReturnsThis","thatReturnsArgument","invariant","ReactPropTypesSecret","shim","propName","componentName","location","propFullName","secret","getShim","ReactPropTypes","array","bool","any","arrayOf","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","$Object","D","check","set","setPrototypeOf","buggy","gOPN","windowNames","getWindowNames","getKeys","gOPS","getSymbols","symbols","isEnum","META","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","w","meta","KEY","NEED","fastKey","getWeak","onFreeze","DESCRIPTORS","$fails","wks","wksDefine","enumKeys","_create","gOPNExt","$GOPD","$DP","$JSON","JSON","_stringify","stringify","HIDDEN","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","protoDesc","wrap","sym","_k","isSymbol","$defineProperty","$defineProperties","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","es6Symbols","j","wellKnownSymbols","k","for","keyFor","useSetter","useSimple","replacer","$replacer","desc","fails","exp","$getPrototypeOf","$assign","A","K","forEach","T","aLen","ARG","tryGet","callee","classof","getIteratorMethod","getIterator","iterFn","toInteger","TO_STRING","pos","charCodeAt","documentElement","max","toLength","toAbsoluteIndex","IS_INCLUDES","$this","el","addToUnscopables","step","Arguments","_extends","_createClass","createInput","_react","_react2","_inputFormat","_core","_possibleConstructorReturn","defaultMetadata","_class","_temp2","_Component","InputSmart","_classCallCheck","storeInput","getTemplate","_inherits","_objectWithoutProperties","parsePhoneNumberCharacter","Input"],"mappings":"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","file":"react-phone-number-input-smart-input.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"React\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"react-phone-number-input-smart-input\", [\"React\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-phone-number-input-smart-input\"] = factory(require(\"React\"));\n\telse\n\t\troot[\"react-phone-number-input-smart-input\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 107);\n","var core = module.exports = { version: '2.5.3' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","exports.f = {}.propertyIsEnumerable;\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","module.exports = {};\n","module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","\"use strict\";\n\nexports.__esModule = true;\n\nvar _assign = require(\"../core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _assign2.default || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","exports.f = Object.getOwnPropertySymbols;\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","module.exports = true;\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && ((typeof call === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(call)) === \"object\" || typeof call === \"function\") ? call : self;\n};","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _iterator = require(\"../core-js/symbol/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = require(\"../core-js/symbol\");\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n};","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","module.exports = require('./_hide');\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = (!BUGGY && $native) || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","require('./es6.array.iterator');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar TO_STRING_TAG = require('./_wks')('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n","module.exports = function cmp (a, b) {\n    var pa = a.split('.');\n    var pb = b.split('.');\n    for (var i = 0; i < 3; i++) {\n        var na = Number(pa[i]);\n        var nb = Number(pb[i]);\n        if (na > nb) return 1;\n        if (nb > na) return -1;\n        if (!isNaN(na) && isNaN(nb)) return 1;\n        if (isNaN(na) && !isNaN(nb)) return -1;\n    }\n    return 0;\n};\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = require(\"../core-js/object/set-prototype-of\");\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = require(\"../core-js/object/create\");\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = require(\"../helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + (typeof superClass === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _defineProperty = require(\"../core-js/object/define-property\");\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};","module.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};","import _getIterator from \"babel-runtime/core-js/get-iterator\";\n// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = _getIterator(string), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar character = _step.value;\n\n\t\t\tif (character === symbol) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","import { count_occurences } from './helpers';\n\nexport default function (template, placeholder, parse) {\n\tif (typeof placeholder === 'function') {\n\t\tparse = placeholder;\n\t\tplaceholder = 'x';\n\t}\n\n\tvar max_characters = count_occurences(placeholder, template);\n\n\treturn function (character, value) {\n\t\tif (value.length < max_characters) {\n\t\t\treturn parse(character, value);\n\t\t}\n\t};\n}\n//# sourceMappingURL=template parser.js.map","import _getIterator from 'babel-runtime/core-js/get-iterator';\nimport { count_occurences } from './helpers';\nimport close_braces from './close braces';\n\n// Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\nexport default function (template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = count_occurences(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = _getIterator(template), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar character = _step.value;\n\n\t\t\t\tif (character !== placeholder) {\n\t\t\t\t\tfilled_in_template += character;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfilled_in_template += value[value_character_index];\n\t\t\t\tvalue_character_index++;\n\n\t\t\t\t// If the last available value character has been filled in,\n\t\t\t\t// then return the filled in template\n\t\t\t\t// (either trim the right part or retain it,\n\t\t\t\t//  if no more character placeholders in there)\n\t\t\t\tif (value_character_index === value.length) {\n\t\t\t\t\t// If there are more character placeholders\n\t\t\t\t\t// in the right part of the template\n\t\t\t\t\t// then simply trim it.\n\t\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = close_braces(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n}\n//# sourceMappingURL=template formatter.js.map","import { count_occurences } from './helpers';\n\nexport default function close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","import template_formatter from './template formatter';\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nexport default function format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = template_formatter(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","// Gets <input/> selection bounds\nexport function getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nexport var Keys = {\n\tBackspace: 8,\n\tDelete: 46\n\n\t// Finds out the operation to be intercepted and performed\n\t// based on the key down event `keyCode`.\n};export function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nexport function getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nexport function setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position\n\telement.setSelectionRange(caret_position, caret_position);\n}\n//# sourceMappingURL=dom.js.map","import edit from './edit';\nimport parse from './parse';\nimport format from './format';\n\nimport { getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom';\n\nexport function onCut(event, input, _parse, _format, on_change) {\n\t// The actual cut hasn't happened just yet hence the timeout.\n\tsetTimeout(function () {\n\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t}, 0);\n}\n\nexport function onPaste(event, input, _parse, _format, on_change) {\n\tvar selection = getSelection(input);\n\n\t// If selection is made,\n\t// just erase the selected text\n\t// prior to pasting\n\tif (selection) {\n\t\terase_selection(input, selection);\n\t}\n\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\nexport function onChange(event, input, _parse, _format, on_change) {\n\tformat_input_text(input, _parse, _format, undefined, on_change);\n}\n\n// Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n\tvar operation = getOperation(event);\n\n\tswitch (operation) {\n\t\tcase 'Delete':\n\t\tcase 'Backspace':\n\t\t\t// Intercept this operation and perform it manually.\n\t\t\tevent.preventDefault();\n\n\t\t\tvar selection = getSelection(input);\n\n\t\t\t// If selection is made,\n\t\t\t// just erase the selected text,\n\t\t\t// and don't apply any more operations to it.\n\t\t\tif (selection) {\n\t\t\t\terase_selection(input, selection);\n\t\t\t\treturn format_input_text(input, _parse, _format, undefined, on_change);\n\t\t\t}\n\n\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\treturn format_input_text(input, _parse, _format, operation, on_change);\n\n\t\tdefault:\n\t\t// Will be handled when `onChange` fires.\n\t}\n}\n\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\nfunction erase_selection(input, selection) {\n\tvar text = input.value;\n\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\tinput.value = text;\n\tsetCaretPosition(input, selection.start);\n}\n\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n\t// Parse `<input/>` textual value.\n\t// Get `value` and `caret` position.\n\tvar _parse2 = parse(input.value, getCaretPosition(input), _parse),\n\t    value = _parse2.value,\n\t    caret = _parse2.caret;\n\n\t// If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n\t// then apply that operation and get new `value` and `caret` position.\n\n\n\tif (operation) {\n\t\tvar operation_applied = edit(value, caret, operation);\n\n\t\tvalue = operation_applied.value;\n\t\tcaret = operation_applied.caret;\n\t}\n\n\t// Format the `value`.\n\t// (and reposition the caret accordingly)\n\tvar formatted = format(value, caret, _format);\n\n\tvar text = formatted.text;\n\tcaret = formatted.caret;\n\n\t// Set `<input/>` textual value manually\n\t// to prevent React from resetting the caret position\n\t// later inside subsequent `render()`.\n\t// Doesn't work for custom `inputComponent`s for some reason.\n\tinput.value = text;\n\t// Position the caret properly.\n\tsetCaretPosition(input, caret);\n\n\t// `<input/>` textual value may have changed,\n\t// so the parsed `value` may have changed too.\n\t// The `value` didn't neccessarily change\n\t// but it might have.\n\ton_change(value);\n}\n//# sourceMappingURL=input control.js.map","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport _parse from './parse';\n\nimport { onChange, onCut, onPaste, onKeyDown } from './input control';\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nvar ReactInput = function (_React$Component) {\n\t_inherits(ReactInput, _React$Component);\n\n\tfunction ReactInput() {\n\t\tvar _ref;\n\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, ReactInput);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactInput.__proto__ || _Object$getPrototypeOf(ReactInput)).call.apply(_ref, [this].concat(args))), _this), _this.storeInstance = function (instance) {\n\t\t\t_this.input = instance;\n\t\t}, _this.getInputElement = function () {\n\t\t\treturn _this.input;\n\t\t}, _this.onChange = function (event) {\n\t\t\tvar _this$props = _this.props,\n\t\t\t    parse = _this$props.parse,\n\t\t\t    format = _this$props.format;\n\n\n\t\t\treturn onChange(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onPaste = function () {\n\t\t\tvar _this$props2 = _this.props,\n\t\t\t    parse = _this$props2.parse,\n\t\t\t    format = _this$props2.format;\n\n\n\t\t\treturn onPaste(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onCut = function () {\n\t\t\tvar _this$props3 = _this.props,\n\t\t\t    parse = _this$props3.parse,\n\t\t\t    format = _this$props3.format;\n\n\n\t\t\treturn onCut(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _this.onBlur = function (event) {\n\t\t\tvar _this$props4 = _this.props,\n\t\t\t    parse = _this$props4.parse,\n\t\t\t    onBlur = _this$props4.onBlur;\n\n\t\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t\t// `event.target.value` in its `onBlur` handler.\n\n\t\t\tif (onBlur) {\n\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\tvalue: _parse(_this.getInputElement().value, undefined, parse).value\n\t\t\t\t\t})\n\n\t\t\t\t\t// For `redux-form` event detection.\n\t\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\t\tonBlur(_event);\n\t\t\t}\n\t\t}, _this.onKeyDown = function (event) {\n\t\t\tvar _this$props5 = _this.props,\n\t\t\t    parse = _this$props5.parse,\n\t\t\t    format = _this$props5.format;\n\n\n\t\t\tif (_this.props.onKeyDown) {\n\t\t\t\t_this.props.onKeyDown(event);\n\t\t\t}\n\n\t\t\treturn onKeyDown(event, _this.getInputElement(), parse, format, _this.props.onChange);\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\t_createClass(ReactInput, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    value = _props.value,\n\t\t\t    parse = _props.parse,\n\t\t\t    format = _props.format,\n\t\t\t    inputComponent = _props.inputComponent,\n\t\t\t    rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']);\n\n\t\t\t// Non-string `inputComponent`s would work in this case\n\t\t\t// but it would also introduce a caret reset bug:\n\t\t\t// the caret position would reset on each input.\n\t\t\t// The origins of this bug are unknown, they may be\n\t\t\t// somehow related to the `ref` property\n\t\t\t// being intercepted by React here.\n\n\n\t\t\treturn React.createElement(inputComponent, _extends({}, rest, {\n\t\t\t\tref: this.storeInstance,\n\t\t\t\tvalue: format(isEmpty(value) ? '' : value).text,\n\t\t\t\tonKeyDown: this.onKeyDown,\n\t\t\t\tonChange: this.onChange,\n\t\t\t\tonPaste: this.onPaste,\n\t\t\t\tonCut: this.onCut,\n\t\t\t\tonBlur: this.onBlur\n\t\t\t}));\n\t\t}\n\n\t\t/**\r\n   * Returns `<input/>` DOM Element.\r\n   * @return {DOMElement}\r\n   */\n\n\n\t\t// This handler is a workaround for `redux-form`.\n\n\t}, {\n\t\tkey: 'focus',\n\n\n\t\t/**\r\n   * Focuses the `<input/>`.\r\n   * Can be called manually.\r\n   */\n\t\tvalue: function focus() {\n\t\t\tthis.getInputElement().focus();\n\t\t}\n\t}]);\n\n\treturn ReactInput;\n}(React.Component);\n\nReactInput.propTypes = {\n\t// Parses a single characher of `<input/>` text.\n\tparse: PropTypes.func.isRequired,\n\n\t// Formats `value` into `<input/>` text.\n\tformat: PropTypes.func.isRequired,\n\n\t// Renders `<input/>` by default.\n\t// For some reason non-default `inputComponent`\n\t// will reset caret position.\n\tinputComponent: PropTypes.string.isRequired,\n\n\t// `<input/>` `type` attribute.\n\ttype: PropTypes.string.isRequired,\n\n\t// Is parsed from <input/> text.\n\tvalue: PropTypes.string,\n\n\t// This handler is called each time `<input/>` text is changed.\n\tonChange: PropTypes.func.isRequired,\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted text.\n\tonBlur: PropTypes.func,\n\n\t// Passthrough\n\tonKeyDown: PropTypes.func\n};\nReactInput.defaultProps = {\n\t// Renders `<input/>` by default.\n\t// For some reason non-default `inputComponent`\n\t// will reset caret position.\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute.\n\ttype: 'text'\n};\nexport default ReactInput;\n\n\nfunction isEmpty(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=ReactInput.js.map","// Copied from `libphonenumber-js`:\n// https://github.com/catamphetamine/libphonenumber-js/blob/master/source/parse.js\n//\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport default function (character, value) {\n\treturn DIGITS[character];\n}\n//# sourceMappingURL=parse digit.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// https://stackoverflow.com/a/46971044/970769\nvar ParseError = function ParseError(code) {\n  _classCallCheck(this, ParseError);\n\n  this.name = this.constructor.name;\n  this.message = code;\n  this.stack = new Error(code).stack;\n};\n\nexport default ParseError;\n\n\nParseError.prototype = Object.create(Error.prototype);\nParseError.prototype.constructor = ParseError;\n//# sourceMappingURL=ParseError.js.map","// The minimum length of the national significant number.\nexport var MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nexport var MAX_LENGTH_FOR_NSN = 17;\n\n// The maximum length of the country calling code.\nexport var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nexport var WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\nexport var PLUS_CHARS = '+\\uFF0B';\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')\n//# sourceMappingURL=constants.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matchesEntirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text);\n}\n\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\nexport function mergeArrays(a, b) {\n\tvar merged = a.slice();\n\n\tfor (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar element = _ref;\n\n\t\tif (a.indexOf(element) < 0) {\n\t\t\tmerged.push(element);\n\t\t}\n\t}\n\n\treturn merged.sort(function (a, b) {\n\t\treturn a - b;\n\t});\n\n\t// ES6 version, requires Set polyfill.\n\t// let merged = new Set(a)\n\t// for (const element of b)\n\t// {\n\t// \tmerged.add(i)\n\t// }\n\t// return Array.from(merged).sort((a, b) => a - b)\n}\n//# sourceMappingURL=util.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport compare from 'semver-compare';\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nvar V2 = '1.0.18';\n\n// Added \"idd_prefix\" and \"default_idd_prefix\".\nvar V3 = '1.2.0';\n\nvar DEFAULT_EXT_PREFIX = ' ext. ';\n\nvar Metadata = function () {\n\tfunction Metadata(metadata) {\n\t\t_classCallCheck(this, Metadata);\n\n\t\tvalidateMetadata(metadata);\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.v1 = !metadata.version;\n\t\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;\n\t\tthis.v3 = metadata.version !== undefined; // && compare(metadata.version, V4) === -1\n\t}\n\n\t_createClass(Metadata, [{\n\t\tkey: 'hasCountry',\n\t\tvalue: function hasCountry(country) {\n\t\t\treturn this.metadata.countries[country] !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'country',\n\t\tvalue: function country(_country) {\n\t\t\tif (!_country) {\n\t\t\t\tthis._country = undefined;\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (!this.hasCountry(_country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + _country);\n\t\t\t}\n\n\t\t\tthis._country = _country;\n\t\t\tthis.country_metadata = this.metadata.countries[_country];\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'getDefaultCountryMetadataForRegion',\n\t\tvalue: function getDefaultCountryMetadataForRegion() {\n\t\t\treturn this.metadata.countries[this.countryCallingCodes()[this.countryCallingCode()][0]];\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCode',\n\t\tvalue: function countryCallingCode() {\n\t\t\treturn this.country_metadata[0];\n\t\t}\n\t}, {\n\t\tkey: 'IDDPrefix',\n\t\tvalue: function IDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[1];\n\t\t}\n\t}, {\n\t\tkey: 'defaultIDDPrefix',\n\t\tvalue: function defaultIDDPrefix() {\n\t\t\tif (this.v1 || this.v2) return;\n\t\t\treturn this.country_metadata[12];\n\t\t}\n\t}, {\n\t\tkey: 'nationalNumberPattern',\n\t\tvalue: function nationalNumberPattern() {\n\t\t\tif (this.v1 || this.v2) return this.country_metadata[1];\n\t\t\treturn this.country_metadata[2];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.v1) return;\n\t\t\treturn this.country_metadata[this.v2 ? 2 : 3];\n\t\t}\n\t}, {\n\t\tkey: '_getFormats',\n\t\tvalue: function _getFormats(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 2 : this.v2 ? 3 : 4];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// formats are all stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'formats',\n\t\tvalue: function formats() {\n\t\t\tvar _this = this;\n\n\t\t\tvar formats = this._getFormats(this.country_metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];\n\t\t\treturn formats.map(function (_) {\n\t\t\t\treturn new Format(_, _this);\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefix',\n\t\tvalue: function nationalPrefix() {\n\t\t\treturn this.country_metadata[this.v1 ? 3 : this.v2 ? 4 : 5];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixFormattingRule',\n\t\tvalue: function _getNationalPrefixFormattingRule(country_metadata) {\n\t\t\treturn country_metadata[this.v1 ? 4 : this.v2 ? 5 : 6];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// national prefix formatting rule is stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._getNationalPrefixFormattingRule(this.country_metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixForParsing',\n\t\tvalue: function nationalPrefixForParsing() {\n\t\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t\t// then infer it from `national_prefix` (if any)\n\t\t\treturn this.country_metadata[this.v1 ? 5 : this.v2 ? 6 : 7] || this.nationalPrefix();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixTransformRule',\n\t\tvalue: function nationalPrefixTransformRule() {\n\t\t\treturn this.country_metadata[this.v1 ? 6 : this.v2 ? 7 : 8];\n\t\t}\n\t}, {\n\t\tkey: '_getNationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function _getNationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this.country_metadata[this.v1 ? 7 : this.v2 ? 8 : 9];\n\t\t}\n\n\t\t// For countries of the same region (e.g. NANPA)\n\t\t// \"national prefix is optional when parsing\" flag is\n\t\t// stored in the \"main\" country for that region.\n\t\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\n\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.country_metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigits',\n\t\tvalue: function leadingDigits() {\n\t\t\treturn this.country_metadata[this.v1 ? 8 : this.v2 ? 9 : 10];\n\t\t}\n\t}, {\n\t\tkey: 'types',\n\t\tvalue: function types() {\n\t\t\treturn this.country_metadata[this.v1 ? 9 : this.v2 ? 10 : 11];\n\t\t}\n\t}, {\n\t\tkey: 'hasTypes',\n\t\tvalue: function hasTypes() {\n\t\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this.types() && this.types().length === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Versions <= 1.2.4: can be `undefined`.\n\t\t\t// Version >= 1.2.5: can be `0`.\n\t\t\treturn !!this.types();\n\t\t}\n\t}, {\n\t\tkey: 'type',\n\t\tvalue: function type(_type) {\n\t\t\tif (this.hasTypes() && getType(this.types(), _type)) {\n\t\t\t\treturn new Type(getType(this.types(), _type), this);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'ext',\n\t\tvalue: function ext() {\n\t\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;\n\t\t\treturn this.country_metadata[13] || DEFAULT_EXT_PREFIX;\n\t\t}\n\t}, {\n\t\tkey: 'countryCallingCodes',\n\t\tvalue: function countryCallingCodes() {\n\t\t\tif (this.v1) return this.metadata.country_phone_code_to_countries;\n\t\t\treturn this.metadata.country_calling_codes;\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\t//\n\t\t// `country_calling_code` is always valid.\n\t\t// But the actual country may not necessarily be part of the metadata.\n\t\t//\n\n\t}, {\n\t\tkey: 'chooseCountryByCountryCallingCode',\n\t\tvalue: function chooseCountryByCountryCallingCode(country_calling_code) {\n\t\t\tvar country = this.countryCallingCodes()[country_calling_code][0];\n\n\t\t\t// Do not want to test this case.\n\t\t\t// (custom metadata, not all countries).\n\t\t\t/* istanbul ignore else */\n\t\t\tif (this.hasCountry(country)) {\n\t\t\t\tthis.country(country);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'selectedCountry',\n\t\tvalue: function selectedCountry() {\n\t\t\treturn this._country;\n\t\t}\n\t}]);\n\n\treturn Metadata;\n}();\n\nexport default Metadata;\n\nvar Format = function () {\n\tfunction Format(format, metadata) {\n\t\t_classCallCheck(this, Format);\n\n\t\tthis._format = format;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Format, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\treturn this._format[0];\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format() {\n\t\t\treturn this._format[1];\n\t\t}\n\t}, {\n\t\tkey: 'leadingDigitsPatterns',\n\t\tvalue: function leadingDigitsPatterns() {\n\t\t\treturn this._format[2] || [];\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixFormattingRule',\n\t\tvalue: function nationalPrefixFormattingRule() {\n\t\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsOptionalWhenFormatting',\n\t\tvalue: function nationalPrefixIsOptionalWhenFormatting() {\n\t\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\t}, {\n\t\tkey: 'nationalPrefixIsMandatoryWhenFormatting',\n\t\tvalue: function nationalPrefixIsMandatoryWhenFormatting() {\n\t\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t\t// set for this country, or when the national prefix formatting rule\n\t\t\t// contains no national prefix itself, or when this rule is set but\n\t\t\t// national prefix is optional for this phone number format\n\t\t\t// (and it is not enforced explicitly)\n\t\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormatting();\n\t\t}\n\n\t\t// Checks whether national prefix formatting rule contains national prefix.\n\n\t}, {\n\t\tkey: 'usesNationalPrefix',\n\t\tvalue: function usesNationalPrefix() {\n\t\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\tthis.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''));\n\t\t}\n\t}, {\n\t\tkey: 'internationalFormat',\n\t\tvalue: function internationalFormat() {\n\t\t\treturn this._format[5] || this.format();\n\t\t}\n\t}]);\n\n\treturn Format;\n}();\n\nvar Type = function () {\n\tfunction Type(type, metadata) {\n\t\t_classCallCheck(this, Type);\n\n\t\tthis.type = type;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(Type, [{\n\t\tkey: 'pattern',\n\t\tvalue: function pattern() {\n\t\t\tif (this.metadata.v1) return this.type;\n\t\t\treturn this.type[0];\n\t\t}\n\t}, {\n\t\tkey: 'possibleLengths',\n\t\tvalue: function possibleLengths() {\n\t\t\tif (this.metadata.v1) return;\n\t\t\treturn this.type[1] || this.metadata.possibleLengths();\n\t\t}\n\t}]);\n\n\treturn Type;\n}();\n\nfunction getType(types, type) {\n\tswitch (type) {\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0];\n\t\tcase 'MOBILE':\n\t\t\treturn types[1];\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2];\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3];\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4];\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5];\n\t\tcase 'UAN':\n\t\t\treturn types[6];\n\t\tcase 'PAGER':\n\t\t\treturn types[7];\n\t\tcase 'VOIP':\n\t\t\treturn types[8];\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9];\n\t}\n}\n\nexport function validateMetadata(metadata) {\n\tif (!metadata) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');\n\t}\n\n\t// `country_phone_code_to_countries` was renamed to\n\t// `country_calling_codes` in `1.0.18`.\n\tif (!is_object(metadata) || !is_object(metadata.countries) || !is_object(metadata.country_calling_codes) && !is_object(metadata.country_phone_code_to_countries)) {\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument was passed but it\\'s not a valid metadata. Must be an object having `.countries` and `.country_calling_codes` child object properties. Got ' + (is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata) + '.');\n\t}\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar is_object = function is_object(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nvar type_of = function type_of(_) {\n\treturn typeof _ === 'undefined' ? 'undefined' : _typeof(_);\n};\n\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\nexport function getExtPrefix(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).ext();\n\t}\n\treturn DEFAULT_EXT_PREFIX;\n}\n\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\nexport function getCountryCallingCode(country, metadata) {\n\tmetadata = new Metadata(metadata);\n\tif (metadata.hasCountry(country)) {\n\t\treturn metadata.country(country).countryCallingCode();\n\t}\n\tthrow new Error('Unknown country: ' + country);\n}\n\nexport function isSupportedCountry(country, metadata) {\n\t// metadata = new Metadata(metadata)\n\t// return metadata.hasCountry(country)\n\treturn metadata.countries[country] !== undefined;\n}\n//# sourceMappingURL=metadata.js.map","import { VALID_DIGITS } from './constants';\n\n// The RFC 3966 format for extensions.\nvar RFC3966_EXTN_PREFIX = ';ext=';\n\n// Pattern to capture digits used in an extension.\n// Places a maximum length of '7' for an extension.\nvar CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nfunction create_extension_pattern(purpose) {\n\t// One-character symbols that can be used to indicate an extension.\n\tvar single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E';\n\n\tswitch (purpose) {\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\n\t\tcase 'parsing':\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters;\n\t}\n\n\treturn RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + '[ \\xA0\\\\t,]*' + '(?:e?xt(?:ensi(?:o\\u0301?|\\xF3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\n\t// \"доб.\"\n\t'\\u0434\\u043E\\u0431|' + '[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' + '[:\\\\.\\uFF0E]?[ \\xA0\\\\t,-]*' + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';\n}\n\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\nexport var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');\n\nexport var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching');\n\n// Regexp of all known extension prefixes used by different regions followed by\n// 1 or more valid digits, for use when parsing.\nvar EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i');\n\n// Strips any extension (as in, the part of the number dialled after the call is\n// connected, usually indicated with extn, ext, x or similar) from the end of\n// the number, and returns it.\nexport function extractExtension(number) {\n\tvar start = number.search(EXTN_PATTERN);\n\tif (start < 0) {\n\t\treturn {};\n\t}\n\n\t// If we find a potential extension, and the number preceding this is a viable\n\t// number, we assume it is an extension.\n\tvar number_without_extension = number.slice(0, start);\n\n\tvar matches = number.match(EXTN_PATTERN);\n\tvar i = 1;\n\twhile (i < matches.length) {\n\t\tif (matches[i] != null && matches[i].length > 0) {\n\t\t\treturn {\n\t\t\t\tnumber: number_without_extension,\n\t\t\t\text: matches[i]\n\t\t\t};\n\t\t}\n\t\ti++;\n\t}\n}\n//# sourceMappingURL=extension.js.map","import { MIN_LENGTH_FOR_NSN, VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension';\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// Phone number extensions\n'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i');\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport default function isViablePhoneNumber(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);\n}\n//# sourceMappingURL=isViablePhoneNumber.js.map","// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport function parseDigit(character) {\n\treturn DIGITS[character];\n}\n\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\nexport default function parseDigits(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tvar digit = parseDigit(character);\n\t\tif (digit) {\n\t\t\tresult += digit;\n\t\t}\n\t}\n\n\treturn result;\n}\n//# sourceMappingURL=parseDigits.js.map","import { parseDigit } from './parseDigits';\n\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\nexport default function parseIncompletePhoneNumber(string) {\n\tvar result = '';\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar character = _ref;\n\n\t\tresult += parsePhoneNumberCharacter(character, result) || '';\n\t}\n\n\treturn result;\n}\n\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\nexport function parsePhoneNumberCharacter(character, value) {\n\t// Only allow a leading `+`.\n\tif (character === '+') {\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn '+';\n\t}\n\n\t// Allow digits.\n\treturn parseDigit(character);\n}\n//# sourceMappingURL=parseIncompletePhoneNumber.js.map","import Metadata from './metadata';\nimport { matchesEntirely, mergeArrays } from './util';\n\nvar NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL'];\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function getNumberType(input) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (!metadata.hasCountry(input.country)) {\n\t\tthrow new Error('Unknown country: ' + input.country);\n\t}\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\tmetadata.country(input.country);\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\n\t\treturn;\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\n\t\t//\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// v1 metadata.\n\t\t// Legacy.\n\t\t// Deprecated.\n\t\tif (!metadata.type('MOBILE')) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tfor (var _iterator = NON_FIXED_LINE_PHONE_TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar _type = _ref;\n\n\t\tif (is_of_type(nationalNumber, _type, metadata)) {\n\t\t\treturn _type;\n\t\t}\n\t}\n}\n\nexport function is_of_type(nationalNumber, type, metadata) {\n\ttype = metadata.type(type);\n\n\tif (!type || !type.pattern()) {\n\t\treturn false;\n\t}\n\n\t// Check if any possible number lengths are present;\n\t// if so, we use them to avoid checking\n\t// the validation pattern if they don't match.\n\t// If they are absent, this means they match\n\t// the general description, which we have\n\t// already checked before a specific number type.\n\tif (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {\n\t\treturn false;\n\t}\n\n\treturn matchesEntirely(nationalNumber, type.pattern());\n}\n\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\n\tvar type_info = metadata.type(type);\n\n\t// There should always be \"<possiblePengths/>\" set for every type element.\n\t// This is declared in the XML schema.\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\n\t// so we fall back to the \"general description\". Where no numbers of the type\n\t// exist at all, there is one possible length (-1) which is guaranteed\n\t// not to match the length of any real phone number.\n\tvar possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths();\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\n\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\n\t\t// No such country in metadata.\n\t\t/* istanbul ignore next */\n\t\tif (!metadata.type('FIXED_LINE')) {\n\t\t\t// The rare case has been encountered where no fixedLine data is available\n\t\t\t// (true for some non-geographical entities), so we just check mobile.\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);\n\t\t}\n\n\t\tvar mobile_type = metadata.type('MOBILE');\n\n\t\tif (mobile_type) {\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\n\t\t\t// Note that when adding the possible lengths from mobile, we have\n\t\t\t// to again check they aren't empty since if they are this indicates\n\t\t\t// they are the same as the general desc and should be obtained from there.\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths());\n\t\t\t// The current list is sorted; we need to merge in the new list and\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\n\t\t\t// the lists are very small.\n\n\t\t\t// if (local_lengths)\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\n\t\t\t// }\n\t\t\t// else\n\t\t\t// {\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\n\t\t\t// }\n\t\t}\n\t}\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\n\telse if (type && !type_info) {\n\t\t\treturn 'INVALID_LENGTH';\n\t\t}\n\n\tvar actual_length = nationalNumber.length;\n\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\n\t// // This is safe because there is never an overlap beween the possible lengths\n\t// // and the local-only lengths; this is checked at build time.\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\n\t// {\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\n\t// }\n\n\tvar minimum_length = possible_lengths[0];\n\n\tif (minimum_length === actual_length) {\n\t\treturn 'IS_POSSIBLE';\n\t}\n\n\tif (minimum_length > actual_length) {\n\t\treturn 'TOO_SHORT';\n\t}\n\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\n\t\treturn 'TOO_LONG';\n\t}\n\n\t// We skip the first element since we've already checked it.\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';\n}\n//# sourceMappingURL=getNumberType_.js.map","import Metadata from './metadata';\nimport { checkNumberLengthForType } from './getNumberType_';\n\nexport default function isPossibleNumber(input, options, metadata) {\n\t/* istanbul ignore if */\n\tif (options === undefined) {\n\t\toptions = {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (options.v2) {\n\t\tif (!input.countryCallingCode) {\n\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t}\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else {\n\t\tif (!input.phone) {\n\t\t\treturn false;\n\t\t}\n\t\tif (input.country) {\n\t\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t\t}\n\t\t\tmetadata.country(input.country);\n\t\t} else {\n\t\t\tif (!input.countryCallingCode) {\n\t\t\t\tthrow new Error('Invalid phone number object passed');\n\t\t\t}\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t\t}\n\t}\n\n\tif (!metadata.possibleLengths()) {\n\t\tthrow new Error('Metadata too old');\n\t}\n\n\treturn is_possible_number(input.phone || input.nationalNumber, undefined, metadata);\n}\n\nexport function is_possible_number(national_number, is_international, metadata) {\n\tswitch (checkNumberLengthForType(national_number, undefined, metadata)) {\n\t\tcase 'IS_POSSIBLE':\n\t\t\treturn true;\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t// \treturn !is_international\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n//# sourceMappingURL=isPossibleNumber_.js.map","import Metadata from './metadata';\nimport { VALID_DIGITS } from './constants';\n\nvar CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');\n\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\nvar SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/;\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata) {\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {\n\t\treturn countryMetadata.IDDPrefix();\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix();\n}\n\nexport function stripIDDPrefix(number, country, metadata) {\n\tif (!country) {\n\t\treturn;\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tvar countryMetadata = new Metadata(metadata);\n\tcountryMetadata.country(country);\n\n\tvar IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn;\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length);\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tvar matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\n\t\tif (matchedGroups[1] === '0') {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn number;\n}\n//# sourceMappingURL=IDD.js.map","var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport isViablePhoneNumber from './isViablePhoneNumber';\n\n// https://www.ietf.org/rfc/rfc3966.txt\n\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nexport function parseRFC3966(text) {\n\tvar number = void 0;\n\tvar ext = void 0;\n\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\n\ttext = text.replace(/^tel:/, 'tel=');\n\n\tfor (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar part = _ref;\n\n\t\tvar _part$split = part.split('='),\n\t\t    _part$split2 = _slicedToArray(_part$split, 2),\n\t\t    name = _part$split2[0],\n\t\t    value = _part$split2[1];\n\n\t\tswitch (name) {\n\t\t\tcase 'tel':\n\t\t\t\tnumber = value;\n\t\t\t\tbreak;\n\t\t\tcase 'ext':\n\t\t\t\text = value;\n\t\t\t\tbreak;\n\t\t\tcase 'phone-context':\n\t\t\t\t// Only \"country contexts\" are supported.\n\t\t\t\t// \"Domain contexts\" are ignored.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\tnumber = value + number;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If the phone number is not viable, then abort.\n\tif (!isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\tvar result = { number: number };\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\treturn result;\n}\n\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\nexport function formatRFC3966(_ref2) {\n\tvar number = _ref2.number,\n\t    ext = _ref2.ext;\n\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tif (number[0] !== '+') {\n\t\tthrow new Error('\"formatRFC3966()\" expects \"number\" to be in E.164 format.');\n\t}\n\n\treturn 'tel:' + number + (ext ? ';ext=' + ext : '');\n}\n//# sourceMappingURL=RFC3966.js.map","import Metadata from './metadata';\nimport { matchesEntirely } from './util';\nimport getNumberType from './getNumberType_';\n\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\nexport default function isValidNumber(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var metadata = arguments[2];\n\n  metadata = new Metadata(metadata);\n\n  // This is just to support `isValidNumber({})`\n  // for cases when `parseNumber()` returns `{}`.\n  if (!input.country) {\n    return false;\n  }\n\n  if (!metadata.hasCountry(input.country)) {\n    throw new Error('Unknown country: ' + input.country);\n  }\n\n  metadata.country(input.country);\n\n  // By default, countries only have type regexps when it's required for\n  // distinguishing different countries having the same `countryCallingCode`.\n  if (metadata.hasTypes()) {\n    return getNumberType(input, options, metadata.metadata) !== undefined;\n  }\n\n  // If there are no type regexps for this country in metadata then use\n  // `nationalNumberPattern` as a \"better than nothing\" replacement.\n  var national_number = options.v2 ? input.nationalNumber : input.phone;\n  return matchesEntirely(national_number, metadata.nationalNumberPattern());\n}\n//# sourceMappingURL=validate_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_PUNCTUATION } from './constants';\nimport { matchesEntirely } from './util';\nimport Metadata from './metadata';\nimport { getIDDPrefix } from './IDD';\nimport { formatRFC3966 } from './RFC3966';\n\nvar defaultOptions = {\n\tformatExtension: function formatExtension(formattedNumber, extension, metadata) {\n\t\treturn '' + formattedNumber + metadata.ext() + extension;\n\t}\n\n\t// Formats a phone number\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\n\t// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n\t// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n\t// formatNumber('+78005553535', 'NATIONAL')\n\t// formatNumber('+78005553535', 'NATIONAL', metadata)\n\t// ```\n\t//\n};export default function formatNumber(input, format, options, metadata) {\n\t// Apply default options.\n\tif (options) {\n\t\toptions = _extends({}, defaultOptions, options);\n\t} else {\n\t\toptions = defaultOptions;\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\tif (input.country) {\n\t\t// Validate `input.country`.\n\t\tif (!metadata.hasCountry(input.country)) {\n\t\t\tthrow new Error('Unknown country: ' + input.country);\n\t\t}\n\t\tmetadata.country(input.country);\n\t} else if (input.countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n\t} else return input.phone || '';\n\n\tvar countryCallingCode = metadata.countryCallingCode();\n\n\tvar nationalNumber = options.v2 ? input.nationalNumber : input.phone;\n\n\t// This variable should have been declared inside `case`s\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\n\tvar number = void 0;\n\n\tswitch (format) {\n\t\tcase 'NATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata);\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'INTERNATIONAL':\n\t\t\t// Legacy argument support.\n\t\t\t// (`{ country: ..., phone: '' }`)\n\t\t\tif (!nationalNumber) {\n\t\t\t\treturn '+' + countryCallingCode;\n\t\t\t}\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\tnumber = '+' + countryCallingCode + ' ' + number;\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn '+' + countryCallingCode + nationalNumber;\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966({\n\t\t\t\tnumber: '+' + countryCallingCode + nationalNumber,\n\t\t\t\text: input.ext\n\t\t\t});\n\n\t\tcase 'IDD':\n\t\t\tif (!options.fromCountry) {\n\t\t\t\treturn;\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n\t\t\t}\n\t\t\tvar IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata);\n\t\t\tif (!IDDPrefix) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.humanReadable) {\n\t\t\t\tvar formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\t\t\t\tif (formattedForSameCountryCallingCode) {\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode;\n\t\t\t\t} else {\n\t\t\t\t\tnumber = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n\t\t\t\t}\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension);\n\t\t\t}\n\t\t\treturn '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n\t\tdefault:\n\t\t\tthrow new Error('Unknown \"format\" argument passed to \"formatNumber()\": \"' + format + '\"');\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n\tvar formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n\tif (useInternationalFormat) {\n\t\treturn changeInternationalFormatStyle(formattedNumber);\n\t}\n\n\treturn formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n\tvar format = choose_format_for_number(metadata.formats(), number);\n\tif (!format) {\n\t\treturn number;\n\t}\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tfor (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar format = _ref;\n\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0) {\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tvar last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1];\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matchesEntirely(national_number, format.pattern())) {\n\t\t\treturn format;\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\nexport function changeInternationalFormatStyle(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;\n}\n\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n\tvar fromCountryMetadata = new Metadata(toCountryMetadata.metadata);\n\tfromCountryMetadata.country(fromCountry);\n\n\t// If calling within the same country calling code.\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n\t\t// For NANPA regions, return the national format for these regions\n\t\t// but prefix it with the country calling code.\n\t\tif (toCountryCallingCode === '1') {\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t\t}\n\n\t\t// If regions share a country calling code, the country calling code need\n\t\t// not be dialled. This also applies when dialling within a region, so this\n\t\t// if clause covers both these cases. Technically this is the case for\n\t\t// dialling from La Reunion to other overseas departments of France (French\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n\t\t// this edge case for now and for those cases return the version including\n\t\t// country calling code. Details here:\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\n\t\t//\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata);\n\t}\n}\n//# sourceMappingURL=format_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport Metadata from './metadata';\nimport isPossibleNumber from './isPossibleNumber_';\nimport isValidNumber from './validate_';\nimport isValidNumberForRegion from './isValidNumberForRegion_';\nimport getNumberType from './getNumberType_';\nimport formatNumber from './format_';\n\nvar PhoneNumber = function () {\n\tfunction PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n\t\t_classCallCheck(this, PhoneNumber);\n\n\t\tif (!countryCallingCode) {\n\t\t\tthrow new TypeError('`countryCallingCode` not passed');\n\t\t}\n\t\tif (!nationalNumber) {\n\t\t\tthrow new TypeError('`nationalNumber` not passed');\n\t\t}\n\t\t// If country code is passed then derive `countryCallingCode` from it.\n\t\t// Also store the country code as `.country`.\n\t\tif (isCountryCode(countryCallingCode)) {\n\t\t\tthis.country = countryCallingCode;\n\t\t\tvar _metadata = new Metadata(metadata);\n\t\t\t_metadata.country(countryCallingCode);\n\t\t\tcountryCallingCode = _metadata.countryCallingCode();\n\t\t}\n\t\tthis.countryCallingCode = countryCallingCode;\n\t\tthis.nationalNumber = nationalNumber;\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber;\n\t\tthis.metadata = metadata;\n\t}\n\n\t_createClass(PhoneNumber, [{\n\t\tkey: 'isPossible',\n\t\tvalue: function isPossible() {\n\t\t\treturn isPossibleNumber(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'isValid',\n\t\tvalue: function isValid() {\n\t\t\treturn isValidNumber(this, { v2: true }, this.metadata);\n\t\t}\n\n\t\t// // Is just an alias for `this.isValid() && this.country === country`.\n\t\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n\t\t// isValidForRegion(country) {\n\t\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n\t\t// }\n\n\t}, {\n\t\tkey: 'getType',\n\t\tvalue: function getType() {\n\t\t\treturn getNumberType(this, { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'format',\n\t\tvalue: function format(_format, options) {\n\t\t\treturn formatNumber(this, _format, options ? _extends({}, options, { v2: true }) : { v2: true }, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'formatNational',\n\t\tvalue: function formatNational(options) {\n\t\t\treturn this.format('NATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'formatInternational',\n\t\tvalue: function formatInternational(options) {\n\t\t\treturn this.format('INTERNATIONAL', options);\n\t\t}\n\t}, {\n\t\tkey: 'getURI',\n\t\tvalue: function getURI(options) {\n\t\t\treturn this.format('RFC3966', options);\n\t\t}\n\t}]);\n\n\treturn PhoneNumber;\n}();\n\nexport default PhoneNumber;\n\n\nvar isCountryCode = function isCountryCode(value) {\n\treturn (/^[A-Z]{2}$/.test(value)\n\t);\n};\n//# sourceMappingURL=PhoneNumber.js.map","// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\n\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { is_possible_number } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber';\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\n// `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\nexport default function parse(text) {\n\tvar options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\tvar metadata = arguments[2];\n\n\tmetadata = new Metadata(metadata);\n\n\t// Validate `defaultCountry`.\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\tthrow new Error('Unknown country: ' + options.defaultCountry);\n\t}\n\n\t// Parse the phone number.\n\n\tvar _parse_input = parse_input(text, options.v2),\n\t    formatted_phone_number = _parse_input.number,\n\t    ext = _parse_input.ext;\n\n\t// If the phone number is not viable then return nothing.\n\n\n\tif (!formatted_phone_number) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('NOT_A_NUMBER');\n\t\t}\n\t\treturn {};\n\t}\n\n\tvar _parse_phone_number = parse_phone_number(formatted_phone_number, options.defaultCountry, metadata),\n\t    country = _parse_phone_number.country,\n\t    nationalNumber = _parse_phone_number.national_number,\n\t    countryCallingCode = _parse_phone_number.countryCallingCode,\n\t    carrierCode = _parse_phone_number.carrierCode;\n\n\tif (!metadata.selectedCountry()) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('INVALID_COUNTRY');\n\t\t}\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n\t\t// Won't throw here because the regexp already demands length > 1.\n\t\t/* istanbul ignore if */\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_SHORT');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n\t\tif (options.v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\t// Google's demo just throws an error in this case.\n\t\treturn {};\n\t}\n\n\tif (options.v2) {\n\t\tvar phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n\t\tif (country) {\n\t\t\tphoneNumber.country = country;\n\t\t}\n\t\tif (carrierCode) {\n\t\t\tphoneNumber.carrierCode = carrierCode;\n\t\t}\n\t\tif (ext) {\n\t\t\tphoneNumber.ext = ext;\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n\n\t// Check if national phone number pattern matches the number.\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false;\n\n\tif (!options.extended) {\n\t\treturn valid ? result(country, nationalNumber, ext) : {};\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tcarrierCode: carrierCode,\n\t\tvalid: valid,\n\t\tpossible: valid ? true : options.extended === true && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\n\t\tphone: nationalNumber,\n\t\text: ext\n\t};\n}\n\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\nexport function extract_formatted_phone_number(text, v2) {\n\tif (!text) {\n\t\treturn;\n\t}\n\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\n\t\tif (v2) {\n\t\t\tthrow new ParseError('TOO_LONG');\n\t\t}\n\t\treturn;\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn;\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided.\n// \"Carrier codes\" are only used  in Colombia and Brazil,\n// and only when dialing within those countries from a mobile phone to a fixed line number.\nexport function strip_national_prefix_and_carrier_code(number, metadata) {\n\tif (!number || !metadata.nationalPrefixForParsing()) {\n\t\treturn { number: number };\n\t}\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn { number: number };\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// `national_prefix_for_parsing` capturing groups\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\n\tvar captured_groups_count = national_prefix_matcher.length - 1;\n\n\t// If the national number tranformation is needed then do it.\n\t//\n\t// `national_prefix_matcher[captured_groups_count]` means that\n\t// the corresponding captured group is not empty.\n\t// It can be empty if it's optional.\n\t// Example: \"0?(?:...)?\" for Argentina.\n\t//\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count]) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule());\n\t}\n\t// Else, no transformation is necessary,\n\t// and just strip the national prefix.\n\telse {\n\t\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length);\n\t\t}\n\n\tvar carrierCode = void 0;\n\tif (captured_groups_count > 0) {\n\t\tcarrierCode = national_prefix_matcher[1];\n\t}\n\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\n\t//\n\t// // Verify the parsed national (significant) number for this country\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n\t// //\n\t// // If the original number (before stripping national prefix) was viable,\n\t// // and the resultant number is not, then prefer the original phone number.\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\n\t// // a national prefix and a leading digit of a valid national phone number,\n\t// // like `8` is the national prefix for Russia and both\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t// if (matchesEntirely(number, national_number_rule) &&\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\n\t// {\n\t// \treturn number\n\t// }\n\n\t// Return the parsed national (significant) number\n\treturn {\n\t\tnumber: national_significant_number,\n\t\tcarrierCode: carrierCode\n\t};\n}\n\nexport function find_country_code(country_calling_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_calling_code` is always valid\n\tvar possible_countries = metadata.countryCallingCodes()[country_calling_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata);\n}\n\n// Changes `metadata` `country`.\nfunction _find_country_code(possible_countries, national_phone_number, metadata) {\n\tmetadata = new Metadata(metadata);\n\n\tfor (var _iterator = possible_countries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\tvar _ref;\n\n\t\tif (_isArray) {\n\t\t\tif (_i >= _iterator.length) break;\n\t\t\t_ref = _iterator[_i++];\n\t\t} else {\n\t\t\t_i = _iterator.next();\n\t\t\tif (_i.done) break;\n\t\t\t_ref = _i.value;\n\t\t}\n\n\t\tvar country = _ref;\n\n\t\tmetadata.country(country);\n\n\t\t// Leading digits check would be the simplest one\n\t\tif (metadata.leadingDigits()) {\n\t\t\tif (national_phone_number && national_phone_number.search(metadata.leadingDigits()) === 0) {\n\t\t\t\treturn country;\n\t\t\t}\n\t\t}\n\t\t// Else perform full validation with all of those\n\t\t// fixed-line/mobile/etc regular expressions.\n\t\telse if (getNumberType({ phone: national_phone_number, country: country }, undefined, metadata.metadata)) {\n\t\t\t\treturn country;\n\t\t\t}\n\t}\n}\n\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\nfunction parse_input(text, v2) {\n\t// Parse RFC 3966 phone number URI.\n\tif (text && text.indexOf('tel:') === 0) {\n\t\treturn parseRFC3966(text);\n\t}\n\n\tvar number = extract_formatted_phone_number(text, v2);\n\n\t// If the phone number is not viable, then abort.\n\tif (!number || !isViablePhoneNumber(number)) {\n\t\treturn {};\n\t}\n\n\t// Attempt to parse extension first, since it doesn't require region-specific\n\t// data and we want to have the non-normalised number here.\n\tvar with_extension_stripped = extractExtension(number);\n\tif (with_extension_stripped.ext) {\n\t\treturn with_extension_stripped;\n\t}\n\n\treturn { number: number };\n}\n\n/**\r\n * Creates `parse()` result object.\r\n */\nfunction result(country, national_number, ext) {\n\tvar result = {\n\t\tcountry: country,\n\t\tphone: national_number\n\t};\n\n\tif (ext) {\n\t\tresult.ext = ext;\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\nfunction parse_phone_number(formatted_phone_number, default_country, metadata) {\n\tvar _extractCountryCallin = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata),\n\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t    number = _extractCountryCallin.number;\n\n\tif (!number) {\n\t\treturn { countryCallingCode: countryCallingCode };\n\t}\n\n\tvar country = void 0;\n\n\tif (countryCallingCode) {\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t} else if (default_country) {\n\t\tmetadata.country(default_country);\n\t\tcountry = default_country;\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata);\n\t} else return {};\n\n\tvar _parse_national_numbe = parse_national_number(number, metadata),\n\t    national_number = _parse_national_numbe.national_number,\n\t    carrier_code = _parse_national_numbe.carrier_code;\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t// get their countries populated with the full set of\n\t// \"phone number type\" regular expressions.\n\t//\n\n\n\tvar exactCountry = find_country_code(countryCallingCode, national_number, metadata);\n\tif (exactCountry) {\n\t\tcountry = exactCountry;\n\t\tmetadata.country(country);\n\t}\n\n\treturn {\n\t\tcountry: country,\n\t\tcountryCallingCode: countryCallingCode,\n\t\tnational_number: national_number,\n\t\tcarrierCode: carrier_code\n\t};\n}\n\nfunction parse_national_number(number, metadata) {\n\tvar national_number = parseIncompletePhoneNumber(number);\n\tvar carrier_code = void 0;\n\n\t// Parsing national prefixes and carrier codes\n\t// is only required for local phone numbers\n\t// but some people don't understand that\n\t// and sometimes write international phone numbers\n\t// with national prefixes (or maybe even carrier codes).\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n\t// Google's original library forgives such mistakes\n\t// and so does this library, because it has been requested:\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(national_number, metadata),\n\t    potential_national_number = _strip_national_prefi.number,\n\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n\tif (metadata.possibleLengths()) {\n\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t// carrier code be long enough to be a possible length for the region.\n\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t// a valid short number.\n\t\tswitch (checkNumberLengthForType(potential_national_number, undefined, metadata)) {\n\t\t\tcase 'TOO_SHORT':\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\tcase 'INVALID_LENGTH':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tnational_number = potential_national_number;\n\t\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t} else {\n\t\t// If the original number (before stripping national prefix) was viable,\n\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t// like `8` is the national prefix for Russia and both\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, metadata.nationalNumberPattern())) {\n\t\t\t// Keep the number without stripping national prefix.\n\t\t} else {\n\t\t\tnational_number = potential_national_number;\n\t\t\tcarrier_code = carrierCode;\n\t\t}\n\t}\n\n\treturn {\n\t\tnational_number: national_number,\n\t\tcarrier_code: carrier_code\n\t};\n}\n\n// Determines the country for a given (possibly incomplete) phone number.\n// export function get_country_from_phone_number(number, metadata)\n// {\n// \treturn parse_phone_number(number, null, metadata).country\n// }\n\n// Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\nexport function extractCountryCallingCode(number, country, metadata) {\n\tnumber = parseIncompletePhoneNumber(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\t// Convert an \"out-of-country\" dialing phone number\n\t\t// to a proper international phone number.\n\t\tvar numberWithoutIDD = stripIDDPrefix(number, country, metadata);\n\n\t\t// If an IDD prefix was stripped then\n\t\t// convert the number to international one\n\t\t// for subsequent parsing.\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\n\t\t\tnumber = '+' + numberWithoutIDD;\n\t\t} else {\n\t\t\treturn { number: number };\n\t\t}\n\t}\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[1] === '0') {\n\t\treturn {};\n\t}\n\n\tmetadata = new Metadata(metadata);\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 2;\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar countryCallingCode = number.slice(1, i);\n\n\t\tif (metadata.countryCallingCodes()[countryCallingCode]) {\n\t\t\treturn {\n\t\t\t\tcountryCallingCode: countryCallingCode,\n\t\t\t\tnumber: number.slice(i)\n\t\t\t};\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n//# sourceMappingURL=parse_.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parseNumber from './parse_';\n\nexport default function parsePhoneNumber(text, options, metadata) {\n\treturn parseNumber(text, _extends({}, options, { v2: true }), metadata);\n}\n//# sourceMappingURL=parsePhoneNumber_.js.map","var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport parsePhoneNumber_ from './parsePhoneNumber_';\n\nexport default function parsePhoneNumber() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumber_(text, options, metadata);\n}\n\nexport function normalizeArguments(args) {\n\tvar _Array$prototype$slic = Array.prototype.slice.call(args),\n\t    _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),\n\t    arg_1 = _Array$prototype$slic2[0],\n\t    arg_2 = _Array$prototype$slic2[1],\n\t    arg_3 = _Array$prototype$slic2[2],\n\t    arg_4 = _Array$prototype$slic2[3];\n\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// If the phone number is passed as a string.\n\t// `parsePhoneNumber('88005553535', ...)`.\n\tif (typeof arg_1 === 'string') {\n\t\ttext = arg_1;\n\t} else throw new TypeError('A text for parsing must be a string.');\n\n\t// If \"default country\" argument is being passed then move it to `options`.\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\n\tif (!arg_2 || typeof arg_2 === 'string') {\n\t\tif (arg_4) {\n\t\t\toptions = arg_3;\n\t\t\tmetadata = arg_4;\n\t\t} else {\n\t\t\toptions = undefined;\n\t\t\tmetadata = arg_3;\n\t\t}\n\n\t\tif (arg_2) {\n\t\t\toptions = _extends({ defaultCountry: arg_2 }, options);\n\t\t}\n\t}\n\t// `defaultCountry` is not passed.\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\n\telse if (isObject(arg_2)) {\n\t\t\tif (arg_3) {\n\t\t\t\toptions = arg_2;\n\t\t\t\tmetadata = arg_3;\n\t\t\t} else {\n\t\t\t\tmetadata = arg_2;\n\t\t\t}\n\t\t} else throw new Error('Invalid second argument: ' + arg_2);\n\n\treturn {\n\t\ttext: text,\n\t\toptions: options,\n\t\tmetadata: metadata\n\t};\n}\n\n// Otherwise istanbul would show this as \"branch not covered\".\n/* istanbul ignore next */\nvar isObject = function isObject(_) {\n\treturn (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n//# sourceMappingURL=parsePhoneNumber.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport parsePhoneNumber from './parsePhoneNumber_';\nimport ParseError from './ParseError';\nimport { isSupportedCountry } from './metadata';\n\nexport default function parsePhoneNumberFromString(text, options, metadata) {\n\t// Validate `defaultCountry`.\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\n\t\toptions = _extends({}, options, {\n\t\t\tdefaultCountry: undefined\n\t\t});\n\t}\n\t// Parse phone number.\n\ttry {\n\t\treturn parsePhoneNumber(text, options, metadata);\n\t} catch (error) {\n\t\t/* istanbul ignore else */\n\t\tif (error instanceof ParseError) {\n\t\t\t//\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n}\n//# sourceMappingURL=parsePhoneNumberFromString_.js.map","import { normalizeArguments } from './parsePhoneNumber';\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_';\n\nexport default function parsePhoneNumberFromString() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn parsePhoneNumberFromString_(text, options, metadata);\n}\n//# sourceMappingURL=parsePhoneNumberFromString.js.map","/** Returns a regular expression quantifier with an upper and lower limit. */\nexport function limit(lower, upper) {\n\tif (lower < 0 || upper <= 0 || upper < lower) {\n\t\tthrow new TypeError();\n\t}\n\treturn \"{\" + lower + \",\" + upper + \"}\";\n}\n\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\nexport function trimAfterFirstMatch(regexp, string) {\n\tvar index = string.search(regexp);\n\n\tif (index >= 0) {\n\t\treturn string.slice(0, index);\n\t}\n\n\treturn string;\n}\n\nexport function startsWith(string, substring) {\n\treturn string.indexOf(substring) === 0;\n}\n\nexport function endsWith(string, substring) {\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length;\n}\n//# sourceMappingURL=util.js.map","// Javascript doesn't support UTF-8 regular expressions.\n// So mimicking them here.\n\n// Copy-pasted from `PhoneNumberMatcher.js`.\n\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\n\nvar _pZ = ' \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000';\nexport var pZ = '[' + _pZ + ']';\nexport var PZ = '[^' + _pZ + ']';\n\nexport var _pN = '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\n// const pN = `[${_pN}]`\n\nvar _pNd = '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19';\nexport var pNd = '[' + _pNd + ']';\n\nexport var _pL = 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';\nvar pL = '[' + _pL + ']';\nvar pL_regexp = new RegExp(pL);\n\nvar _pSc = '$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6';\nvar pSc = '[' + _pSc + ']';\nvar pSc_regexp = new RegExp(pSc);\n\nvar _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26';\nvar pMn = '[' + _pMn + ']';\nvar pMn_regexp = new RegExp(pMn);\n\nvar _InBasic_Latin = '\\0-\\x7F';\nvar _InLatin_1_Supplement = '\\x80-\\xFF';\nvar _InLatin_Extended_A = '\\u0100-\\u017F';\nvar _InLatin_Extended_Additional = '\\u1E00-\\u1EFF';\nvar _InLatin_Extended_B = '\\u0180-\\u024F';\nvar _InCombining_Diacritical_Marks = '\\u0300-\\u036F';\n\nvar latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');\n\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\nexport function isLatinLetter(letter) {\n  // Combining marks are a subset of non-spacing-mark.\n  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\n    return false;\n  }\n\n  return latinLetterRegexp.test(letter);\n}\n\nexport function isInvalidPunctuationSymbol(character) {\n  return character === '%' || pSc_regexp.test(character);\n}\n//# sourceMappingURL=utf-8.js.map","import isValidNumber from '../validate_';\nimport parseDigits from '../parseDigits';\n\nimport { startsWith, endsWith } from './util';\n\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\nexport default {\n  /**\r\n   * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n   */\n  POSSIBLE: function POSSIBLE(number, candidate, metadata) {\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"possible\" and \"valid\".\r\n   * Numbers written in national format must have their national-prefix\r\n   * present if it is usually written for a number of this type.\r\n   */\n  VALID: function VALID(number, candidate, metadata) {\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString(), metadata)) {\n      return false;\n    }\n\n    // Skipped for simplicity.\n    // return isNationalPrefixPresentIfRequired(number, metadata)\n    return true;\n  },\n\n\n  /**\r\n   * Phone numbers accepted are \"valid\" and\r\n   * are grouped in a possible way for this locale. For example, a US number written as\r\n   * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n   * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol in the national significant number\r\n   * are also dropped at this level.\r\n   *\r\n   * Warning: This level might result in lower coverage especially for regions outside of\r\n   * country code \"+1\". If you are not sure about which level to use,\r\n   * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n   */\n  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped);\n  },\n\n\n  /**\r\n   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n   * are grouped in the same way that we would have formatted it, or as a single block. For\r\n   * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n   * \"650 253 0000\" or \"6502530000\" are.\r\n   * Numbers with more than one '/' symbol are also dropped at this level.\r\n   * <p>\r\n   * Warning: This level might result in lower coverage especially for regions outside of country\r\n   * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n   * libphonenumber-discuss@googlegroups.com.\r\n   */\n  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata) {\n    var candidateString = candidate.toString();\n\n    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString, metadata) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number, metadata)) {\n      return false;\n    }\n\n    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent);\n  }\n};\n\nfunction containsOnlyValidXChars(number, candidate, metadata) {\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\n  // national significant number or (2) an extension sign, in which case they always precede the\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\n  // or 'X'. We ignore the character if it appears as the last character of the string.\n  for (var index = 0; index < candidate.length - 1; index++) {\n    var charAtIndex = candidate.charAt(index);\n\n    if (charAtIndex === 'x' || charAtIndex === 'X') {\n      var charAtNextIndex = candidate.charAt(index + 1);\n\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {\n        // This is the carrier code case, in which the 'X's always precede the national\n        // significant number.\n        index++;\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {\n          return false;\n        }\n        // This is the extension sign case, in which the 'x' or 'X' should always precede the\n        // extension number.\n      } else if (parseDigits(candidate.substring(index)) !== number.ext) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isNationalPrefixPresentIfRequired(number, _metadata) {\n  // First, check how we deduced the country code. If it was written in international format, then\n  // the national prefix is not required.\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {\n    return true;\n  }\n\n  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());\n\n  var metadata = util.getMetadataForRegion(phoneNumberRegion);\n  if (metadata == null) {\n    return true;\n  }\n\n  // Check if a national prefix should be present when formatting this number.\n  var nationalNumber = util.getNationalSignificantNumber(number);\n  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber);\n\n  // To do this, we check that a national prefix formatting rule was present\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {\n    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {\n      // The national-prefix is optional in these cases, so we don't need to check if it was\n      // present.\n      return true;\n    }\n\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {\n      // National Prefix not needed for this number.\n      return true;\n    }\n\n    // Normalize the remainder.\n    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput());\n\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\n    // return the result.\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);\n  }\n\n  return true;\n}\n\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate) {\n  var firstSlashInBodyIndex = candidate.indexOf('/');\n  if (firstSlashInBodyIndex < 0) {\n    // No slashes, this is okay.\n    return false;\n  }\n\n  // Now look for a second one.\n  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);\n  if (secondSlashInBodyIndex < 0) {\n    // Only one slash, this is okay.\n    return false;\n  }\n\n  // If the first slash is after the country calling code, this is permitted.\n  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;\n\n  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {\n    // Any more slashes and this is illegal.\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;\n  }\n\n  return true;\n}\n\nfunction checkNumberGroupingIsValid(number, candidate, metadata, checkGroups) {\n  // TODO: Evaluate how this works for other locales (testing has been limited to NANPA regions)\n  // and optimise if necessary.\n  var normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */);\n  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n    return true;\n  }\n\n  // If this didn't pass, see if there are any alternate formats, and try them instead.\n  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());\n\n  if (alternateFormats) {\n    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var alternateFormat = _ref;\n\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);\n\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together.\r\n */\nfunction getNationalNumberGroups(metadata, number, formattingPattern) {\n  if (formattingPattern) {\n    // We format the NSN only, and split that according to the separator.\n    var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');\n  }\n\n  // This will be in the format +CC-DG;ext=EXT where DG represents groups of digits.\n  var rfc3966Format = formatNumber(number, 'RFC3966', metadata);\n\n  // We remove the extension part from the formatted string before splitting it into different\n  // groups.\n  var endIndex = rfc3966Format.indexOf(';');\n  if (endIndex < 0) {\n    endIndex = rfc3966Format.length;\n  }\n\n  // The country-code will have a '-' following it.\n  var startIndex = rfc3966Format.indexOf('-') + 1;\n  return rfc3966Format.slice(startIndex, endIndex).split('-');\n}\n\nfunction allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN);\n\n  // Set this to the last group, skipping it if the number has an extension.\n  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1;\n\n  // First we check if the national significant number is formatted as a block.\n  // We use contains and not equals, since the national significant number may be present with\n  // a prefix such as a national number prefix, or the country code itself.\n  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {\n    return true;\n  }\n\n  // Starting from the end, go through in reverse, excluding the first group, and check the\n  // candidate and number groups are the same.\n  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {\n      return false;\n    }\n    formattedNumberGroupIndex--;\n    candidateNumberGroupIndex--;\n  }\n\n  // Now check the first group. There may be a national prefix at the start, so we only check\n  // that the candidate group ends with the formatted number group.\n  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);\n}\n\nfunction allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {\n  var fromIndex = 0;\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {\n    // First skip the country code if the normalized candidate contained it.\n    var countryCode = String(number.getCountryCode());\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();\n  }\n\n  // Check each group of consecutive digits are not broken into separate groupings in the\n  // {@code normalizedCandidate} string.\n  for (var i = 0; i < formattedNumberGroups.length; i++) {\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);\n    if (fromIndex < 0) {\n      return false;\n    }\n    // Moves {@code fromIndex} forward.\n    fromIndex += formattedNumberGroups[i].length();\n    if (i == 0 && fromIndex < normalizedCandidate.length()) {\n      // We are at the position right after the NDC. We get the region used for formatting\n      // information based on the country code in the phone number, rather than the number itself,\n      // as we do not need to distinguish between different countries with the same country\n      // calling code and this is faster.\n      var region = util.getRegionCodeForCountryCode(number.getCountryCode());\n      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\n        // This means there is no formatting symbol after the NDC. In this case, we only\n        // accept the number if there is no formatting symbol at all in the number, except\n        // for extensions. This is only important for countries with national prefixes.\n        var nationalSignificantNumber = util.getNationalSignificantNumber(number);\n        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);\n      }\n    }\n  }\n\n  // The check here makes sure that we haven't mistakenly already used the extension to\n  // match the last group of the subscriber number. Note the extension cannot have\n  // formatting in-between digits.\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());\n}\n//# sourceMappingURL=Leniency.js.map","import { trimAfterFirstMatch } from './util';\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nvar SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/;\n\nexport default function parsePreCandidate(candidate) {\n\t// Check for extra numbers at the end.\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\n\t// from split notations (+41 79 123 45 67 / 68).\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);\n}\n//# sourceMappingURL=parsePreCandidate.js.map","// Matches strings that look like dates using \"/\" as a separator.\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\nvar SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/;\n\n// Matches timestamps.\n// Examples: \"2012-01-02 08:00\".\n// Note that the reg-ex does not include the\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\nvar TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/;\nvar TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/;\n\nexport default function isValidPreCandidate(candidate, offset, text) {\n\t// Skip a match that is more likely to be a date.\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\n\t\treturn false;\n\t}\n\n\t// Skip potential time-stamps.\n\tif (TIME_STAMPS.test(candidate)) {\n\t\tvar followingText = text.slice(offset + candidate.length);\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidPreCandidate.js.map","// Copy-pasted from `PhoneNumberMatcher.js`.\n\nimport { PLUS_CHARS } from '../constants';\nimport { limit } from './util';\n\nimport { isLatinLetter, isInvalidPunctuationSymbol } from './utf-8';\n\nvar OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B';\nvar CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D';\nvar NON_PARENS = '[^' + OPENING_PARENS + CLOSING_PARENS + ']';\n\nexport var LEAD_CLASS = '[' + OPENING_PARENS + PLUS_CHARS + ']';\n\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\nvar LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS);\n\n// Limit on the number of pairs of brackets in a phone number.\nvar BRACKET_PAIR_LIMIT = limit(0, 3);\n\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\nvar MATCHING_BRACKETS_ENTIRE = new RegExp('^' + \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\" + NON_PARENS + \"+\" + \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT + NON_PARENS + \"*\" + '$');\n\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\nvar PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/;\n\nexport default function isValidCandidate(candidate, offset, text, leniency) {\n\t// Check the candidate doesn't contain any formatting\n\t// which would indicate that it really isn't a phone number.\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\n\t\treturn;\n\t}\n\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\n\tif (leniency !== 'POSSIBLE') {\n\t\t// If the candidate is not at the start of the text,\n\t\t// and does not start with phone-number punctuation,\n\t\t// check the previous character.\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {\n\t\t\tvar previousChar = text[offset - 1];\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tvar lastCharIndex = offset + candidate.length;\n\t\tif (lastCharIndex < text.length) {\n\t\t\tvar nextChar = text[lastCharIndex];\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=isValidCandidate.js.map","var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE, VALID_PUNCTUATION } from './constants';\n\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension';\n\nimport { limit, trimAfterFirstMatch } from './findNumbers/util';\n\nimport { _pL, _pN, pZ, PZ, pNd } from './findNumbers/utf-8';\n\nimport Leniency from './findNumbers/Leniency';\nimport parsePreCandidate from './findNumbers/parsePreCandidate';\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate';\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate';\n\nimport { isSupportedCountry } from './metadata';\n\nimport parseNumber from './parse_';\n\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\nvar INNER_MATCHES = [\n// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\n'\\\\/+(.*)/',\n\n// Note that the bracket here is inside the capturing group, since we consider it part of the\n// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\n'(\\\\([^(]*)',\n\n// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\n// We require a space on either side of the hyphen for it to be considered a separator.\n'(?:' + pZ + '-|-' + pZ + ')' + pZ + '*(.+)',\n\n// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\n// possible that it's supposed to be used to break two numbers without spaces, and we haven't\n// seen many instances of it used within a number.\n'[\\u2012-\\u2015\\uFF0D]' + pZ + '*(.+)',\n\n// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\n'\\\\.+' + pZ + '*([^.]+)',\n\n// Breaks on space - e.g. \"3324451234 8002341234\"\npZ + '+(' + PZ + '+)'];\n\n// Limit on the number of leading (plus) characters.\nvar leadLimit = limit(0, 2);\n\n// Limit on the number of consecutive punctuation characters.\nvar punctuationLimit = limit(0, 4);\n\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\nvar digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE;\n\n// Limit on the number of blocks separated by punctuation.\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\nvar blockLimit = limit(0, digitBlockLimit);\n\n/* A punctuation sequence allowing white space. */\nvar punctuation = '[' + VALID_PUNCTUATION + ']' + punctuationLimit;\n\n// A digits block without punctuation.\nvar digitSequence = pNd + limit(1, digitBlockLimit);\n\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\nvar PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?';\n\n// Regular expression of trailing characters that we want to remove.\n// We remove all characters that are not alpha or numerical characters.\n// The hash character is retained here, as it may signify\n// the previous block was an extension.\n//\n// // Don't know what does '&&' mean here.\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\n//\nvar UNWANTED_END_CHAR_PATTERN = new RegExp('[^' + _pN + _pL + '#]+$');\n\nvar NON_DIGITS_PATTERN = /(\\D+)/;\n\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;\n\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\n\nvar PhoneNumberMatcher = function () {\n\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\n\n  /** The iteration tristate. */\n  function PhoneNumberMatcher() {\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var metadata = arguments[2];\n\n    _classCallCheck(this, PhoneNumberMatcher);\n\n    this.state = 'NOT_READY';\n    this.searchIndex = 0;\n\n    options = _extends({}, options, {\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\n    });\n\n    if (!options.leniency) {\n      throw new TypeError('`Leniency` not supplied');\n    }\n\n    if (options.maxTries < 0) {\n      throw new TypeError('`maxTries` not supplied');\n    }\n\n    this.text = text;\n    this.options = options;\n    this.metadata = metadata;\n\n    /** The degree of validation requested. */\n    this.leniency = Leniency[options.leniency];\n\n    if (!this.leniency) {\n      throw new TypeError('Unknown leniency: ' + options.leniency + '.');\n    }\n\n    /** The maximum number of retries after matching an invalid number. */\n    this.maxTries = options.maxTries;\n\n    this.PATTERN = new RegExp(PATTERN, 'ig');\n  }\n\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\n\n\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\n\n\n  _createClass(PhoneNumberMatcher, [{\n    key: 'find',\n    value: function find() // (index)\n    {\n      // // Reset the regular expression.\n      // this.PATTERN.lastIndex = index\n\n      var matches = void 0;\n      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {\n        var candidate = matches[0];\n        var offset = matches.index;\n\n        candidate = parsePreCandidate(candidate);\n\n        if (isValidPreCandidate(candidate, offset, this.text)) {\n          var match =\n          // Try to come up with a valid match given the entire candidate.\n          this.parseAndVerify(candidate, offset, this.text)\n          // If that failed, try to find an \"inner match\" -\n          // there might be a phone number within this candidate.\n          || this.extractInnerMatch(candidate, offset, this.text);\n\n          if (match) {\n            if (this.options.v2) {\n              var phoneNumber = new PhoneNumber(match.country, match.phone, this.metadata);\n              if (match.ext) {\n                phoneNumber.ext = match.ext;\n              }\n              return {\n                startsAt: match.startsAt,\n                endsAt: match.endsAt,\n                number: phoneNumber\n              };\n            }\n            return match;\n          }\n        }\n\n        this.maxTries--;\n      }\n    }\n\n    /**\r\n     * Attempts to extract a match from `candidate`\r\n     * if the whole candidate does not qualify as a match.\r\n     */\n\n  }, {\n    key: 'extractInnerMatch',\n    value: function extractInnerMatch(candidate, offset, text) {\n      for (var _iterator = INNER_MATCHES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var innerMatchPattern = _ref;\n\n        var isFirstMatch = true;\n        var matches = void 0;\n        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');\n        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {\n          if (isFirstMatch) {\n            // We should handle any group before this one too.\n            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));\n\n            var _match = this.parseAndVerify(_group, offset, text);\n            if (_match) {\n              return _match;\n            }\n\n            this.maxTries--;\n            isFirstMatch = false;\n          }\n\n          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]);\n\n          // Java code does `groupMatcher.start(1)` here,\n          // but there's no way in javascript to get a group match start index,\n          // therefore using the overall match start index `matches.index`.\n          var match = this.parseAndVerify(group, offset + matches.index, text);\n          if (match) {\n            return match;\n          }\n\n          this.maxTries--;\n        }\n      }\n    }\n\n    /**\r\n     * Parses a phone number from the `candidate` using `parseNumber` and\r\n     * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n     *\r\n     * @param candidate  the candidate match\r\n     * @param offset  the offset of {@code candidate} within {@link #text}\r\n     * @return  the parsed and validated phone number match, or null\r\n     */\n\n  }, {\n    key: 'parseAndVerify',\n    value: function parseAndVerify(candidate, offset, text) {\n      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\n        return;\n      }\n\n      var number = parseNumber(candidate, {\n        extended: true,\n        defaultCountry: this.options.defaultCountry\n      }, this.metadata);\n\n      if (!number.possible) {\n        return;\n      }\n\n      if (this.leniency(number, candidate, this.metadata)) {\n        // // We used parseAndKeepRawInput to create this number,\n        // // but for now we don't return the extra values parsed.\n        // // TODO: stop clearing all values here and switch all users over\n        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\n        // number.clearCountryCodeSource()\n        // number.clearRawInput()\n        // number.clearPreferredDomesticCarrierCode()\n\n        var result = {\n          startsAt: offset,\n          endsAt: offset + candidate.length,\n          country: number.country,\n          phone: number.phone\n        };\n\n        if (number.ext) {\n          result.ext = number.ext;\n        }\n\n        return result;\n      }\n    }\n  }, {\n    key: 'hasNext',\n    value: function hasNext() {\n      if (this.state === 'NOT_READY') {\n        this.lastMatch = this.find(); // (this.searchIndex)\n\n        if (this.lastMatch) {\n          // this.searchIndex = this.lastMatch.endsAt\n          this.state = 'READY';\n        } else {\n          this.state = 'DONE';\n        }\n      }\n\n      return this.state === 'READY';\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      // Check the state and find the next match as a side-effect if necessary.\n      if (!this.hasNext()) {\n        throw new Error('No next element');\n      }\n\n      // Don't retain that memory any longer than necessary.\n      var result = this.lastMatch;\n      this.lastMatch = null;\n      this.state = 'NOT_READY';\n      return result;\n    }\n  }]);\n\n  return PhoneNumberMatcher;\n}();\n\nexport default PhoneNumberMatcher;\n//# sourceMappingURL=PhoneNumberMatcher.js.map","import _findNumbers from './findNumbers_';\nimport { normalizeArguments } from './parsePhoneNumber';\n\nexport default function findNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\treturn _findNumbers(text, options, metadata);\n}\n//# sourceMappingURL=findNumbers.js.map","import PhoneNumberMatcher from './PhoneNumberMatcher';\n\nexport default function findNumbers(text, options, metadata) {\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\tvar results = [];\n\twhile (matcher.hasNext()) {\n\t\tresults.push(matcher.next());\n\t}\n\treturn results;\n}\n//# sourceMappingURL=findNumbers_.js.map","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { normalizeArguments } from './parsePhoneNumber';\nimport PhoneNumberMatcher from './PhoneNumberMatcher';\n\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\nexport default function searchNumbers() {\n\tvar _normalizeArguments = normalizeArguments(arguments),\n\t    text = _normalizeArguments.text,\n\t    options = _normalizeArguments.options,\n\t    metadata = _normalizeArguments.metadata;\n\n\tvar matcher = new PhoneNumberMatcher(text, options, metadata);\n\n\treturn _defineProperty({}, Symbol.iterator, function () {\n\t\treturn {\n\t\t\tnext: function next() {\n\t\t\t\tif (matcher.hasNext()) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: matcher.next()\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t});\n}\n//# sourceMappingURL=searchNumbers.js.map","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n//\n// Simplified: does not differentiate between \"local-only\" numbers\n// and \"internationally dialable\" numbers.\n// For example, doesn't include changes like this:\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\n\nimport Metadata from './metadata';\n\nimport PhoneNumber from './PhoneNumber';\n\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS } from './constants';\n\nimport { matchesEntirely } from './util';\n\nimport { extractCountryCallingCode as _extractCountryCallingCode, extract_formatted_phone_number, find_country_code, strip_national_prefix_and_carrier_code } from './parse_';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, changeInternationalFormatStyle } from './format_';\n\nimport { checkNumberLengthForType } from './getNumberType_';\n\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\n\n// Deprecated: Google has removed some formatting pattern related code from their repo.\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\n// Because this library supports generating custom metadata\n// some users may still be using old metadata so the relevant\n// code seems to stay until some next major version update.\nvar SUPPORT_LEGACY_FORMATTING_PATTERNS = true;\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\[([^\\[\\]])*\\]/g\n\t);\n};\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {\n\treturn (/\\d(?=[^,}][^,}])/g\n\t);\n};\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar AsYouType = function () {\n\n\t/**\r\n  * @param {string?} [defaultCountry] - The default country used for parsing non-international phone numbers.\r\n  * @param {Object} metadata\r\n  */\n\tfunction AsYouType(defaultCountry, metadata) {\n\t\t_classCallCheck(this, AsYouType);\n\n\t\tthis.options = {};\n\n\t\tthis.metadata = new Metadata(metadata);\n\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\n\t\t\tthis.defaultCountry = defaultCountry;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\t// Not setting `options` to a constructor argument\n\t// not to break backwards compatibility\n\t// for older versions of the library.\n\n\n\t_createClass(AsYouType, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text) || '';\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number)) {\n\t\t\t\treturn this.currentOutput;\n\t\t\t}\n\n\t\t\treturn this.processInput(parseIncompletePhoneNumber(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'processInput',\n\t\tvalue: function processInput(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsedInput) {\n\t\t\t\t\tthis.parsedInput += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.resetCountriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsedInput += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.nationalNumber += input;\n\n\t\t\t// TODO: Deprecated: rename `this.nationalNumber`\n\t\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.isInternational()) {\n\t\t\t\tif (!this.countryCallingCode) {\n\t\t\t\t\t// Extract country calling code from the digits entered so far.\n\n\t\t\t\t\t// There must be some digits in order to extract anything from them.\n\t\t\t\t\tif (!this.nationalNumber) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extractCountryCallingCode()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsedInput;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determineTheCountry();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.nationalPrefix;\n\t\t\t\tthis.nationalNumber = this.nationalPrefix + this.nationalNumber;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extractNationalPrefix();\n\n\t\t\t\tif (this.nationalPrefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = undefined;\n\t\t\t\t\tthis.resetFormat();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if (!this.shouldFormat())\n\t\t\t// {\n\t\t\t// \treturn this.format_as_non_formatted_number()\n\t\t\t// }\n\n\t\t\tif (!this.nationalNumber) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.formatNationalNumber(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.formatFullNumber(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.format_as_non_formatted_number();\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\t// Strip national prefix for incorrectly inputted international phones.\n\t\t\tif (this.isInternational() && this.countryCallingCode) {\n\t\t\t\treturn '+' + this.countryCallingCode + this.nationalNumber;\n\t\t\t}\n\n\t\t\treturn this.parsedInput;\n\t\t}\n\t}, {\n\t\tkey: 'formatNationalNumber',\n\t\tvalue: function formatNationalNumber(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosenFormat) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.formatNextNationalNumberDigits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from formatNextNationalNumberDigits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.chooseAnotherFormat()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformatNationalNumber();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsedInput = '';\n\n\t\t\tthis.currentOutput = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tthis.nationalNumber = '';\n\t\t\tthis.carrierCode = '';\n\n\t\t\tthis.resetCountriness();\n\n\t\t\tthis.resetFormat();\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'resetCountry',\n\t\tvalue: function resetCountry() {\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.country = undefined;\n\t\t\t} else {\n\t\t\t\tthis.country = this.defaultCountry;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetCountriness',\n\t\tvalue: function resetCountriness() {\n\t\t\tthis.resetCountry();\n\n\t\t\tif (this.defaultCountry && !this.isInternational()) {\n\t\t\t\tthis.metadata.country(this.defaultCountry);\n\t\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode();\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code();\n\t\t\t} else {\n\t\t\t\tthis.metadata.country(undefined);\n\t\t\t\tthis.countryCallingCode = undefined;\n\n\t\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'resetFormat',\n\t\tvalue: function resetFormat() {\n\t\t\tthis.chosenFormat = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformatNationalNumber',\n\t\tvalue: function reformatNationalNumber() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.formatNextNationalNumberDigits(this.nationalNumber);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_calling_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_calling_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = this.metadata.formats().filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());\n\t\t\t});\n\n\t\t\tthis.matching_formats = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.nationalNumber;\n\n\t\t\t// \"leading digits\" pattern list starts with a\n\t\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\n\t\t\t// So, after a user inputs 3 digits of a national (significant) phone number\n\t\t\t// this national (significant) number can already be formatted.\n\t\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\n\t\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\n\n\t\t\t// This implementation is different from Google's\n\t\t\t// in that it searches for a fitting format\n\t\t\t// even if the user has entered less than\n\t\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\n\t\t\t// Because some leading digits patterns already match for a single first digit.\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\t// \"Available formats\" are all formats available for the country.\n\t\t\t// \"Matching formats\" are only formats eligible for the national number being entered.\n\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\n\t\t\t// then format matching starts narrowing down the list of possible formats\n\t\t\t// (only previously matched formats are considered for next digits).\n\t\t\tvar available_formats = this.had_enough_leading_digits && this.matching_formats || this.available_formats;\n\t\t\tthis.had_enough_leading_digits = this.shouldFormat();\n\n\t\t\tthis.matching_formats = available_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_patterns_count = format.leadingDigitsPatterns().length;\n\n\t\t\t\t// If this format is not restricted to a certain\n\t\t\t\t// leading digits pattern then it fits.\n\t\t\t\tif (leading_digits_patterns_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_patterns_count - 1);\n\t\t\t\tvar leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it.\n\t\t\t// The test for this `if` condition is marked as:\n\t\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\n\t\t\t// To construct a valid test case for this one can find a country\n\t\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\n\t\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\n\t\t\tif (this.chosenFormat && this.matching_formats.indexOf(this.chosenFormat) === -1) {\n\t\t\t\tthis.resetFormat();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'shouldFormat',\n\t\tvalue: function shouldFormat() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Presumably the limitation of \"3 digits min\"\n\t\t\t// is imposed to exclude false matches,\n\t\t\t// e.g. when there are two different formats\n\t\t\t// each one fitting one or two leading digits being input.\n\t\t\t// But for this case I would propose a specific `if/else` condition.\n\t\t\t//\n\t\t\treturn this.nationalNumber.length >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// `leadingDigitsPattern` also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tfor (var _iterator = this.matching_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n\t\t\t\tvar _ref;\n\n\t\t\t\tif (_isArray) {\n\t\t\t\t\tif (_i >= _iterator.length) break;\n\t\t\t\t\t_ref = _iterator[_i++];\n\t\t\t\t} else {\n\t\t\t\t\t_i = _iterator.next();\n\t\t\t\t\tif (_i.done) break;\n\t\t\t\t\t_ref = _i.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref;\n\n\t\t\t\tvar matcher = new RegExp('^(?:' + format.pattern() + ')$');\n\n\t\t\t\tif (!matcher.test(this.nationalNumber)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\tthis.resetFormat();\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\tvar formatted_number = format_national_number_using_format(this.nationalNumber, format, this.isInternational(), this.nationalPrefix !== '', this.metadata);\n\n\t\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\t\tif (this.nationalPrefix && this.countryCallingCode === '1') {\n\t\t\t\t\tformatted_number = '1 ' + formatted_number;\n\t\t\t\t}\n\n\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t//\n\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t// with the current metadata,\n\t\t\t\t// but just in case.\n\t\t\t\t//\n\t\t\t\t/* istanbul ignore else */\n\t\t\t\tif (this.createFormattingTemplate(format)) {\n\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\tthis.reformatNationalNumber();\n\t\t\t\t} else {\n\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\tvar full_number = this.formatFullNumber(formatted_number);\n\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t}\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'formatFullNumber',\n\t\tvalue: function formatFullNumber(formattedNationalNumber) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn '+' + this.countryCallingCode + ' ' + formattedNationalNumber;\n\t\t\t}\n\t\t\treturn formattedNationalNumber;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extractCountryCallingCode',\n\t\tvalue: function extractCountryCallingCode() {\n\t\t\tvar _extractCountryCallin = _extractCountryCallingCode(this.parsedInput, this.defaultCountry, this.metadata.metadata),\n\t\t\t    countryCallingCode = _extractCountryCallin.countryCallingCode,\n\t\t\t    number = _extractCountryCallin.number;\n\n\t\t\tif (!countryCallingCode) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.countryCallingCode = countryCallingCode;\n\n\t\t\t// Sometimes people erroneously write national prefix\n\t\t\t// as part of an international number, e.g. +44 (0) ....\n\t\t\t// This violates the standards for international phone numbers,\n\t\t\t// so \"As You Type\" formatter assumes no national prefix\n\t\t\t// when parsing a phone number starting from `+`.\n\t\t\t// Even if it did attempt to filter-out that national prefix\n\t\t\t// it would look weird for a user trying to enter a digit\n\t\t\t// because from user's perspective the keyboard \"wouldn't be working\".\n\t\t\tthis.nationalNumber = number;\n\n\t\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n\t\t\treturn this.metadata.selectedCountry() !== undefined;\n\t\t}\n\t}, {\n\t\tkey: 'extractNationalPrefix',\n\t\tvalue: function extractNationalPrefix() {\n\t\t\tthis.nationalPrefix = '';\n\n\t\t\tif (!this.metadata.selectedCountry()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Only strip national prefixes for non-international phone numbers\n\t\t\t// because national prefixes can't be present in international phone numbers.\n\t\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\n\n\t\t\tvar _strip_national_prefi = strip_national_prefix_and_carrier_code(this.nationalNumber, this.metadata),\n\t\t\t    potential_national_number = _strip_national_prefi.number,\n\t\t\t    carrierCode = _strip_national_prefi.carrierCode;\n\n\t\t\tif (carrierCode) {\n\t\t\t\tthis.carrierCode = carrierCode;\n\t\t\t}\n\n\t\t\t// We require that the NSN remaining after stripping the national prefix and\n\t\t\t// carrier code be long enough to be a possible length for the region.\n\t\t\t// Otherwise, we don't do the stripping, since the original number could be\n\t\t\t// a valid short number.\n\t\t\tif (!this.metadata.possibleLengths() || this.isPossibleNumber(this.nationalNumber) && !this.isPossibleNumber(potential_national_number)) {\n\t\t\t\t// Verify the parsed national (significant) number for this country\n\t\t\t\t//\n\t\t\t\t// If the original number (before stripping national prefix) was viable,\n\t\t\t\t// and the resultant number is not, then prefer the original phone number.\n\t\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t\t\t\t// a national prefix and a leading digit of a valid national phone number,\n\t\t\t\t// like `8` is the national prefix for Russia and both\n\t\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\t\t\t\tif (matchesEntirely(this.nationalNumber, this.metadata.nationalNumberPattern()) && !matchesEntirely(potential_national_number, this.metadata.nationalNumberPattern())) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.nationalPrefix = this.nationalNumber.slice(0, this.nationalNumber.length - potential_national_number.length);\n\t\t\tthis.nationalNumber = potential_national_number;\n\n\t\t\treturn this.nationalPrefix;\n\t\t}\n\t}, {\n\t\tkey: 'isPossibleNumber',\n\t\tvalue: function isPossibleNumber(number) {\n\t\t\tvar validation_result = checkNumberLengthForType(number, undefined, this.metadata);\n\t\t\tswitch (validation_result) {\n\t\t\t\tcase 'IS_POSSIBLE':\n\t\t\t\t\treturn true;\n\t\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\n\t\t\t\t// \treturn !this.isInternational()\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'chooseAnotherFormat',\n\t\tvalue: function chooseAnotherFormat() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tfor (var _iterator2 = this.matching_formats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n\t\t\t\tvar _ref2;\n\n\t\t\t\tif (_isArray2) {\n\t\t\t\t\tif (_i2 >= _iterator2.length) break;\n\t\t\t\t\t_ref2 = _iterator2[_i2++];\n\t\t\t\t} else {\n\t\t\t\t\t_i2 = _iterator2.next();\n\t\t\t\t\tif (_i2.done) break;\n\t\t\t\t\t_ref2 = _i2.value;\n\t\t\t\t}\n\n\t\t\t\tvar format = _ref2;\n\n\t\t\t\t// If this format is currently being used\n\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\tif (this.chosenFormat === format) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t// then extract the template from this format\n\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\tif (!this.isFormatApplicable(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!this.createFormattingTemplate(format)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.chosenFormat = format;\n\n\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t// using the old template needs to be reset.\n\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// No format matches the phone number,\n\t\t\t// therefore set `country` to `undefined`\n\t\t\t// (or to the default country).\n\t\t\tthis.resetCountry();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.resetFormat();\n\t\t}\n\t}, {\n\t\tkey: 'isFormatApplicable',\n\t\tvalue: function isFormatApplicable(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// If this format doesn't use national prefix\n\t\t\t// but the user did input national prefix\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (this.nationalPrefix && !format.usesNationalPrefix() && !format.nationalPrefixIsOptionalWhenFormatting()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'createFormattingTemplate',\n\t\tvalue: function createFormattingTemplate(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.getTemplateForNumberFormatPattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.isInternational()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'getTemplateForNumberFormatPattern',\n\t\tvalue: function getTemplateForNumberFormatPattern(format) {\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = format.pattern();\n\n\t\t\t/* istanbul ignore else */\n\t\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\n\t\t\t\tnumber_pattern = number_pattern\n\t\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d');\n\t\t\t}\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.nationalNumber.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.getFormatFormat(format);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.nationalNumber : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.nationalNumber` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.nationalNumber.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.nationalNumber` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'formatNextNationalNumberDigits',\n\t\tvalue: function formatNextNationalNumberDigits(digits) {\n\t\t\t// Using `.split('')` to iterate through a string here\n\t\t\t// to avoid requiring `Symbol.iterator` polyfill.\n\t\t\t// `.split('')` is generally not safe for Unicode,\n\t\t\t// but in this particular case for `digits` it is safe.\n\t\t\t// for (const digit of digits)\n\t\t\tfor (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n\t\t\t\tvar _ref3;\n\n\t\t\t\tif (_isArray3) {\n\t\t\t\t\tif (_i3 >= _iterator3.length) break;\n\t\t\t\t\t_ref3 = _iterator3[_i3++];\n\t\t\t\t} else {\n\t\t\t\t\t_i3 = _iterator3.next();\n\t\t\t\t\tif (_i3.done) break;\n\t\t\t\t\t_ref3 = _i3.value;\n\t\t\t\t}\n\n\t\t\t\tvar digit = _ref3;\n\n\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t// in a subsequent `this.chooseAnotherFormat()` call\n\t\t\t\t\t// later in code.\n\t\t\t\t\tthis.chosenFormat = undefined;\n\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t}\n\n\t\t\t// Return the formatted phone number so far.\n\t\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1);\n\n\t\t\t// The old way which was good for `input-format` but is not so good\n\t\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\n\t\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\n\t\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\n\t\t}\n\t}, {\n\t\tkey: 'isInternational',\n\t\tvalue: function isInternational() {\n\t\t\treturn this.parsedInput && this.parsedInput[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'getFormatFormat',\n\t\tvalue: function getFormatFormat(format) {\n\t\t\tif (this.isInternational()) {\n\t\t\t\treturn changeInternationalFormatStyle(format.internationalFormat());\n\t\t\t}\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (format.nationalPrefixFormattingRule()) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.nationalPrefix || !format.usesNationalPrefix()) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Special handling for NANPA countries for AsYouType formatter.\n\t\t\t// Copied from Google's `libphonenumber`:\n\t\t\t// https://github.com/googlei18n/libphonenumber/blob/66986dbbe443ee8450e2b54dcd44ac384b3bbee8/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L535-L573\n\t\t\telse if (this.countryCallingCode === '1' && this.nationalPrefix === '1') {\n\t\t\t\t\treturn '1 ' + format.format();\n\t\t\t\t}\n\n\t\t\treturn format.format();\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determineTheCountry',\n\t\tvalue: function determineTheCountry() {\n\t\t\tthis.country = find_country_code(this.countryCallingCode, this.nationalNumber, this.metadata);\n\t\t}\n\n\t\t/**\r\n   * Returns an instance of `PhoneNumber` class.\r\n   * Will return `undefined` if no national (significant) number\r\n   * digits have been entered so far, or if no `defaultCountry` has been\r\n   * set and the user enters a phone number not in international format.\r\n   */\n\n\t}, {\n\t\tkey: 'getNumber',\n\t\tvalue: function getNumber() {\n\t\t\tif (!this.countryCallingCode || !this.nationalNumber) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tvar phoneNumber = new PhoneNumber(this.country || this.countryCallingCode, this.nationalNumber, this.metadata.metadata);\n\t\t\tif (this.carrierCode) {\n\t\t\t\tphoneNumber.carrierCode = this.carrierCode;\n\t\t\t}\n\t\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\n\t\t\treturn phoneNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getNationalNumber',\n\t\tvalue: function getNationalNumber() {\n\t\t\treturn this.nationalNumber;\n\t\t}\n\t}, {\n\t\tkey: 'getTemplate',\n\t\tvalue: function getTemplate() {\n\t\t\tif (!this.template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar index = -1;\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < this.parsedInput.length) {\n\t\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn cut_stripping_dangling_braces(this.template, index + 1);\n\t\t}\n\t}]);\n\n\treturn AsYouType;\n}();\n\nexport default AsYouType;\n\n\nexport function strip_dangling_braces(string) {\n\tvar dangling_braces = [];\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (string[i] === '(') {\n\t\t\tdangling_braces.push(i);\n\t\t} else if (string[i] === ')') {\n\t\t\tdangling_braces.pop();\n\t\t}\n\t\ti++;\n\t}\n\n\tvar start = 0;\n\tvar cleared_string = '';\n\tdangling_braces.push(string.length);\n\tfor (var _iterator4 = dangling_braces, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {\n\t\tvar _ref4;\n\n\t\tif (_isArray4) {\n\t\t\tif (_i4 >= _iterator4.length) break;\n\t\t\t_ref4 = _iterator4[_i4++];\n\t\t} else {\n\t\t\t_i4 = _iterator4.next();\n\t\t\tif (_i4.done) break;\n\t\t\t_ref4 = _i4.value;\n\t\t}\n\n\t\tvar index = _ref4;\n\n\t\tcleared_string += string.slice(start, index);\n\t\tstart = index + 1;\n\t}\n\n\treturn cleared_string;\n}\n\nexport function cut_stripping_dangling_braces(string, cut_before_index) {\n\tif (string[cut_before_index] === ')') {\n\t\tcut_before_index++;\n\t}\n\treturn strip_dangling_braces(string.slice(0, cut_before_index));\n}\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string.\n// Unicode-unsafe (because using `.split()`).\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\t// Using `.split('')` to iterate through a string here\n\t// to avoid requiring `Symbol.iterator` polyfill.\n\t// `.split('')` is generally not safe for Unicode,\n\t// but in this particular case for counting brackets it is safe.\n\t// for (const character of string)\n\tfor (var _iterator5 = string.split(''), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {\n\t\tvar _ref5;\n\n\t\tif (_isArray5) {\n\t\t\tif (_i5 >= _iterator5.length) break;\n\t\t\t_ref5 = _iterator5[_i5++];\n\t\t} else {\n\t\t\t_i5 = _iterator5.next();\n\t\t\tif (_i5.done) break;\n\t\t\t_ref5 = _i5.value;\n\t\t}\n\n\t\tvar character = _ref5;\n\n\t\tif (character === symbol) {\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=AsYouType.js.map","import PhoneNumber from './PhoneNumber';\n\nexport default function getExampleNumber(country, examples, metadata) {\n\tif (examples[country]) {\n\t\treturn new PhoneNumber(country, examples[country], metadata);\n\t}\n}\n//# sourceMappingURL=getExampleNumber.js.map","import AsYouType from './AsYouType';\n\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\n  if (!metadata) {\n    metadata = country;\n    country = undefined;\n  }\n  return new AsYouType(country, metadata).input(value);\n}\n//# sourceMappingURL=formatIncompletePhoneNumber.js.map","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    invariant(\n      false,\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","require('../../modules/es6.object.create');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/create\"), __esModule: true };","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","require('../../modules/es6.object.set-prototype-of');\nmodule.exports = require('../../modules/_core').Object.setPrototypeOf;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/set-prototype-of\"), __esModule: true };","require('./_wks-define')('observable');\n","require('./_wks-define')('asyncIterator');\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","require('../../modules/es6.symbol');\nrequire('../../modules/es6.object.to-string');\nrequire('../../modules/es7.symbol.async-iterator');\nrequire('../../modules/es7.symbol.observable');\nmodule.exports = require('../../modules/_core').Symbol;\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol\"), __esModule: true };","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","module.exports = { \"default\": require(\"core-js/library/fn/symbol/iterator\"), __esModule: true };","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","require('../../modules/es6.object.define-property');\nvar $Object = require('../../modules/_core').Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n","module.exports = { \"default\": require(\"core-js/library/fn/object/define-property\"), __esModule: true };","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","require('../../modules/es6.object.get-prototype-of');\nmodule.exports = require('../../modules/_core').Object.getPrototypeOf;\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","require('../../modules/es6.object.assign');\nmodule.exports = require('../../modules/_core').Object.assign;\n","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var anObject = require('./_an-object');\nvar get = require('./core.get-iterator-method');\nmodule.exports = require('./_core').getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = function () { /* empty */ };\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","require('../modules/web.dom.iterable');\nrequire('../modules/es6.string.iterator');\nmodule.exports = require('../modules/core.get-iterator');\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.createInput = createInput;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _inputFormat = require('input-format');\n\nvar _core = require('libphonenumber-js/core');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * This input uses `input-format` library\r\n * for \"smart\" caret positioning.\r\n */\nfunction createInput(defaultMetadata) {\n\tvar _class, _temp2;\n\n\treturn _temp2 = _class = function (_Component) {\n\t\t_inherits(InputSmart, _Component);\n\n\t\tfunction InputSmart() {\n\t\t\tvar _ref;\n\n\t\t\tvar _temp, _this, _ret;\n\n\t\t\t_classCallCheck(this, InputSmart);\n\n\t\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\t\targs[_key] = arguments[_key];\n\t\t\t}\n\n\t\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InputSmart.__proto__ || Object.getPrototypeOf(InputSmart)).call.apply(_ref, [this].concat(args))), _this), _this.focus = function () {\n\t\t\t\treturn _this.input.focus();\n\t\t\t}, _this.storeInput = function (ref) {\n\t\t\t\treturn _this.input = ref;\n\t\t\t}, _this.format = function (value) {\n\t\t\t\tvar _this$props = _this.props,\n\t\t\t\t    country = _this$props.country,\n\t\t\t\t    metadata = _this$props.metadata;\n\n\t\t\t\t// \"As you type\" formatter.\n\n\t\t\t\tvar formatter = new _core.AsYouType(country, metadata);\n\n\t\t\t\t// Format the number.\n\t\t\t\tvar text = formatter.input(value);\n\n\t\t\t\treturn { text: text, template: formatter.getTemplate() };\n\t\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t\t}\n\n\t\t_createClass(InputSmart, [{\n\t\t\tkey: 'render',\n\t\t\tvalue: function render() {\n\t\t\t\tvar _props = this.props,\n\t\t\t\t    country = _props.country,\n\t\t\t\t    metadata = _props.metadata,\n\t\t\t\t    rest = _objectWithoutProperties(_props, ['country', 'metadata']);\n\n\t\t\t\treturn _react2.default.createElement(_inputFormat.ReactInput, _extends({}, rest, {\n\t\t\t\t\tref: this.storeInput,\n\t\t\t\t\tparse: _core.parsePhoneNumberCharacter,\n\t\t\t\t\tformat: this.format }));\n\t\t\t}\n\t\t}]);\n\n\t\treturn InputSmart;\n\t}(_react.Component), _class.defaultProps = {\n\t\tmetadata: defaultMetadata\n\t}, _temp2;\n}\n\nexports.default = createInput();\n//# sourceMappingURL=InputSmart.js.map","'use strict'\r\n\r\nvar metadata = require('libphonenumber-js/metadata.min.json')\r\nvar createInput = require('../commonjs/InputSmart').createInput\r\n\r\nvar Input = createInput(metadata)\r\n\r\nexports = module.exports = Input\r\nexports['default']       = Input"],"sourceRoot":""}