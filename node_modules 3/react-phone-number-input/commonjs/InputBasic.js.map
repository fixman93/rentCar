{"version":3,"sources":["../source/InputBasic.js"],"names":["createInput","PureComponent","Component","defaultMetadata","InputBasic","state","onChange","event","props","value","newValue","target","format","indexOf","slice","setState","onBlur","_event","stopPropagation","preventDefault","focus","input","storeInput","ref","country","metadata","onFocus","rest","propTypes","string","isRequired","func","object","defaultProps"],"mappings":"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","file":"InputBasic.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nexport function createInput(defaultMetadata)\r\n{\r\n\t/**\r\n\t * `InputBasic`'s caret is not as \"smart\" as the default `inputComponent`'s\r\n\t * but still works good enough. When erasing or inserting digits in the middle\r\n\t * of a phone number the caret usually jumps to the end: this is the expected\r\n\t * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t */\r\n\tclass InputBasic extends PureComponent\r\n\t{\r\n\t\tstatic propTypes =\r\n\t\t{\r\n\t\t\t// The parsed phone number.\r\n\t\t\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t\tvalue : PropTypes.string.isRequired,\r\n\r\n\t\t\t// Updates the `value`.\r\n\t\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t\t// Toggles the `--focus` CSS class.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/189\r\n\t\t\tonFocus : PropTypes.func,\r\n\r\n\t\t\t// `onBlur` workaround for `redux-form`'s bug.\r\n\t\t\tonBlur : PropTypes.func,\r\n\r\n\t\t\t// A two-letter country code for formatting `value`\r\n\t\t\t// as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t\t// E.g. \"US\", \"RU\", etc.\r\n\t\t\t// If no `country` is passed then `value`\r\n\t\t\t// is formatted as an international phone number.\r\n\t\t\t// (e.g. `+7 800 555 35 35`)\r\n\t\t\tcountry : PropTypes.string,\r\n\r\n\t\t\t// `libphonenumber-js` metadata.\r\n\t\t\tmetadata : PropTypes.object.isRequired\r\n\t\t}\r\n\r\n\t\tstatic defaultProps =\r\n\t\t{\r\n\t\t\tmetadata : defaultMetadata\r\n\t\t}\r\n\r\n\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t// https://github.com/facebook/react/issues/955\r\n\t\tstatic getDerivedStateFromProps({ value })\r\n\t\t{\r\n\t\t\treturn { value }\r\n\t\t}\r\n\r\n\t\tstate = {}\r\n\r\n\t\tonChange = (event) =>\r\n\t\t{\r\n\t\t\tconst { onChange } = this.props\r\n\t\t\tconst { value } = this.state\r\n\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t// Working around this issue with this simple hack.\r\n\t\t\tif (newValue === value)\r\n\t\t\t{\r\n\t\t\t\tif (this.format(newValue).indexOf(event.target.value) === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t\t// https://github.com/facebook/react/issues/955\r\n\t\t\tthis.setState({ value: newValue }, () => onChange(newValue))\r\n\t\t}\r\n\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`'s bug\r\n\t\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t\t//\r\n\t\t// New `value` is taken from `event` in `redux-form`'s `handleBlur()`.\r\n\t\t// https://github.com/erikras/redux-form/blob/785edf8aac3adc84aba2ab6898a4aa8c48687750/src/ConnectedField.js#L168\r\n\t\t// `redux-form` shouldn't have taken the new `value` from `event`.\r\n\t\t//\r\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t\t//\r\n\t\tonBlur = (event) =>\r\n\t\t{\r\n\t\t\tconst { onBlur } = this.props\r\n\t\t\tconst { value } = this.state\r\n\r\n\t\t\tif (onBlur)\r\n\t\t\t{\r\n\t\t\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\t\t\tconst _event =\r\n\t\t\t\t{\r\n\t\t\t\t\t...event,\r\n\t\t\t\t\ttarget:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t...event.target,\r\n\t\t\t\t\t\tvalue\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Workaround for `redux-form` event detection.\r\n\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\t\t\treturn onBlur(_event)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tformat(value)\r\n\t\t{\r\n\t\t\tconst { country, metadata } = this.props\r\n\r\n\t\t\treturn formatIncompletePhoneNumber(value, country, metadata)\r\n\t\t}\r\n\r\n\t\tfocus = () => this.input.focus()\r\n\r\n\t\tstoreInput = (ref) => this.input = ref\r\n\r\n\t\trender()\r\n\t\t{\r\n\t\t\tconst\r\n\t\t\t{\r\n\t\t\t\tonChange,\r\n\t\t\t\tonFocus,\r\n\t\t\t\tcountry,\r\n\t\t\t\tmetadata,\r\n\t\t\t\t...rest\r\n\t\t\t}\r\n\t\t\t= this.props\r\n\r\n\t\t\t// Prevents React from resetting the `<input/>` caret position.\r\n\t\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\r\n\t\t\t// https://github.com/facebook/react/issues/955\r\n\t\t\tconst { value } = this.state\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete=\"tel\"\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tref={this.storeInput}\r\n\t\t\t\t\tvalue={this.format(value)}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}/>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\treturn reactLifecyclesCompat(InputBasic)\r\n}\r\n\r\nexport default createInput()"]}