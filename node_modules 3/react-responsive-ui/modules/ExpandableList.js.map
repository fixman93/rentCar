{"version":3,"sources":["../source/ExpandableList.js"],"names":["PureComponent","Component","ExpandableList","state","toggle","expandable","expand","parameters","collapse","isExpanded","preload","onBlur","event","chooseFocusedItem","list","getFocusedItemIndex","undefined","focusItem","index","clearFocus","onKeyDown","onEnter","props","keyCode","preventDefault","storeExpandableRef","ref","storeListRef","onChange","value","focusSelectedItem","setState","selectedItemIndex","collapsedDueToItemBeingSelected","hasOnChange","onCollapse","onExpand","focusOnExpand","children","focus","calculateHeight","alignment","upward","scrollIntoView","onPreloadStateChange","getTogglerNode","onFocusOut","highlightSelectedItem","closeLabel","closeButtonIcon","className","rest","hasOwnProperty","selectedItemValue","propTypes","scrollMaxItems","number","scrollBarPadding","bool","func","isRequired","string","defaultProps"],"mappings":"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","file":"ExpandableList.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\nimport ScrollableList from './ScrollableList'\r\nimport Expandable from './Expandable'\r\nimport { findItemIndexByValue } from './List'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class ExpandableList extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Maximum items fitting the list height (scrollable).\r\n\t\tscrollMaxItems : PropTypes.number,\r\n\r\n\t\t// Whether should add `margin-right` for scrollbar width on overflow.\r\n\t\tscrollBarPadding : PropTypes.bool,\r\n\r\n\t\t// Preloads the contents of the expandable list\r\n\t\t// before it's expanded. Must return a `Promise`.\r\n\t\tpreload : PropTypes.func,\r\n\r\n\t\t// Whether the list items should be focused upon expand.\r\n\t\tfocusOnExpand : PropTypes.bool.isRequired,\r\n\t\tfocusSelectedItem : PropTypes.bool.isRequired,\r\n\r\n\t\tclassName : PropTypes.string\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\talignment : 'left',\r\n\t\tfocusOnExpand : true,\r\n\t\tfocusSelectedItem : true\r\n\t}\r\n\r\n\tstatic getDerivedStateFromProps(props, state)\r\n\t{\r\n\t\t// Using `!state.hasOwnProperty()` as \"not initialized\"\r\n\t\t// because when there's an empty option `props.value` is `undefined`.\r\n\t\tif (!state.hasOwnProperty('selectedItemValue') || state.selectedItemValue !== props.value)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tselectedItemValue : props.value,\r\n\t\t\t\t// `findItemIndexByValue()` must return `undefined` for \"no such item\".\r\n\t\t\t\tselectedItemIndex : findItemIndexByValue(props.value, props.children)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\ttoggle     = () => this.expandable.toggle()\r\n\texpand     = (parameters) => this.expandable.expand(parameters)\r\n\tcollapse   = () => this.expandable.collapse()\r\n\tisExpanded = () => this.expandable.isExpanded()\r\n\tpreload    = () => this.expandable.preload()\r\n\tonBlur     = (event) => this.expandable.onBlur(event)\r\n\r\n\tchooseFocusedItem = () => this.list && this.list.chooseFocusedItem()\r\n\tgetFocusedItemIndex = () => this.list ? this.list.getFocusedItemIndex() : undefined\r\n\tfocusItem = (index) => this.list.focusItem(index)\r\n\tclearFocus = () => this.list.clearFocus()\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onEnter } = this.props\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// \"Escape\".\r\n\t\t\t// Collapse.\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\t// Collapse the list if it's expanded.\r\n\t\t\t\treturn this.expandable.collapse()\r\n\r\n\t\t\t// \"Up\" arrow.\r\n\t\t\t// Select the previous item (if present).\r\n\t\t\tcase 38:\r\n\t\t\t// \"Down\" arrow.\r\n\t\t\t// Select the next item (if present).\r\n\t\t\tcase 40:\r\n\t\t\t\tif (this.isExpanded())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Navigate the list (if it was already expanded).\r\n\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Expand the list if it's collapsed.\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\tthis.expandable.expand()\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Enter\".\r\n\t\t\tcase 13:\r\n\t\t\t\t// Select the currently focused item.\r\n\t\t\t\treturn this.list && this.list.onKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\tstoreExpandableRef = (ref) => this.expandable = ref\r\n\tstoreListRef = (ref) => this.list = ref\r\n\r\n\tonChange = (value, index) =>\r\n\t{\r\n\t\tconst { onChange, focusSelectedItem } = this.props\r\n\r\n\t\tif (onChange) {\r\n\t\t\tonChange(value, index)\r\n\t\t}\r\n\r\n\t\tif (focusSelectedItem)\r\n\t\t{\r\n\t\t\tthis.setState({\r\n\t\t\t\tselectedItemIndex : index\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.collapsedDueToItemBeingSelected = true\r\n\t\tthis.collapse()\r\n\t\tthis.collapsedDueToItemBeingSelected = undefined\r\n\t}\r\n\r\n\t// If a `<List/>` has `onChange` then it wraps `<List.Item/>`s with `<button/>`s.\r\n\t// The `onChange` added by `<ExpandableList/>` overrides the original `onChange`.\r\n\t// If there was no `onChange` â€” there will be one.\r\n\t// So to retain that info `hasOnChange` property is used as a workaround.\r\n\thasOnChange = () => {\r\n\t\tconst { onChange } = this.props\r\n\t\treturn !!onChange\r\n\t}\r\n\r\n\tonCollapse = (parameters) =>\r\n\t{\r\n\t\tconst { onCollapse } = this.props\r\n\r\n\t\tif (onCollapse)\r\n\t\t{\r\n\t\t\tonCollapse\r\n\t\t\t({\r\n\t\t\t\t...parameters,\r\n\t\t\t\tcollapsedDueToItemBeingSelected : this.collapsedDueToItemBeingSelected\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis.list && this.list.clearFocus()\r\n\t}\r\n\r\n\tonExpand = () =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tfocusOnExpand,\r\n\t\t\tonExpand,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { selectedItemIndex } = this.state\r\n\r\n\t\tif (onExpand) {\r\n\t\t\tonExpand()\r\n\t\t}\r\n\r\n\t\tif (focusOnExpand)\r\n\t\t{\r\n\t\t\tif (selectedItemIndex === undefined) {\r\n\t\t\t\tthis.list.focus()\r\n\t\t\t} else {\r\n\t\t\t\tthis.list.focusItem(selectedItemIndex)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Re-calculate `<ScrollableList/>` height.\r\n\t\tthis.list.calculateHeight()\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\talignment,\r\n\t\t\tupward,\r\n\t\t\tscrollIntoView,\r\n\t\t\tpreload,\r\n\t\t\tonPreloadStateChange,\r\n\t\t\tgetTogglerNode,\r\n\t\t\tonFocusOut,\r\n\t\t\tonChange,\r\n\t\t\thighlightSelectedItem,\r\n\t\t\tcloseLabel,\r\n\t\t\tcloseButtonIcon,\r\n\t\t\tclassName,\r\n\t\t\tchildren,\r\n\t\t\t...rest\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\treturn (\r\n\t\t\t<Expandable\r\n\t\t\t\tref={ this.storeExpandableRef }\r\n\t\t\t\talignment={ alignment }\r\n\t\t\t\tupward={ upward }\r\n\t\t\t\tscrollIntoView={ scrollIntoView }\r\n\t\t\t\tpreload={ preload }\r\n\t\t\t\tonPreloadStateChange={ onPreloadStateChange }\r\n\t\t\t\tonExpand={ this.onExpand }\r\n\t\t\t\tonCollapse={ this.onCollapse }\r\n\t\t\t\tgetTogglerNode={ getTogglerNode }\r\n\t\t\t\tonFocusOut={ onFocusOut }\r\n\t\t\t\tcloseLabel={ closeLabel }\r\n\t\t\t\tcloseButtonIcon={ closeButtonIcon }\r\n\t\t\t\tclassName={ classNames(className, 'rrui__expandable-list',\r\n\t\t\t\t{\r\n\t\t\t\t\t'rrui__expandable-list--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t'rrui__expandable-list--right-aligned' : alignment === 'right'\r\n\t\t\t\t}) }>\r\n\r\n\t\t\t\t<ScrollableList\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\texpandable\r\n\t\t\t\t\tref={ this.storeListRef }\r\n\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\thasOnChange={ this.hasOnChange() }\r\n\t\t\t\t\thighlightSelectedItem={ onChange === undefined && highlightSelectedItem === undefined ? false : highlightSelectedItem }>\r\n\t\t\t\t\t{ children }\r\n\t\t\t\t</ScrollableList>\r\n\t\t\t</Expandable>\r\n\t\t)\r\n\t}\r\n}"]}