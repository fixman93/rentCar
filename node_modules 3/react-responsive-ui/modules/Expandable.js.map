{"version":3,"sources":["../source/Expandable.js"],"names":["PureComponent","Component","Expandable","state","expanded","isExpanded","expand","parameters","toggle","collapse","props","onExpand","onExpanded","onCollapse","onCollapsed","preload","onPreloadStateChange","onPreloadError","isPreloading","undefined","refreshingExpanded","refresh","Promise","resolve","isToggling","onTapOutsideRef","stopListeningToTouches","clearTimeout","scrollIntoViewTimer","focusOut","setState","removeFromDOMAfterCollapsed","then","removeFromDOMTimer","shouldRender","setTimeout","scrollIntoView","listenToTouches","expandAnimationDuration","onKeyDown","event","defaultPrevented","ctrlKey","altKey","shiftKey","metaKey","keyCode","preventDefault","onBlur","onFocusOutRef","storeContainerNode","node","container","getContainerNode","storeOnTapOutsideRef","ref","storeOnFocusOutRef","onFocusOut","onTapOutsideTimer","_onFocusOut","onTapOutside","onTapOutsideDelay","error","console","shouldScrollIntoView","scrollIntoViewDelay","scrollMode","behavior","block","inline","Math","max","alignment","upward","getTogglerNode","closeLabel","CloseButtonIcon","closeButtonIcon","role","style","className","children","element","Children","map","child","cloneElement","propTypes","func","oneOf","bool","string","object","isRequired","number","oneOfType","defaultProps"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;AACA,IAAMA,gBAAgB,gBAAMA,aAAN,IAAuB,gBAAMC,SAAnD;;AAEA;;;;;;;;;;;;;;;;;IAiBqBC,U;;;;;;;;;;;;;;4LAwEpBC,K,GAAQ;AACP;AACAC,aAAU;AAFH,G,QAYRC,U,GAAa;AAAA,UAAM,MAAKF,KAAL,CAAWC,QAAjB;AAAA,G,QAEbE,M,GAAW,UAACC,UAAD;AAAA,UAAgB,MAAKC,MAAL,CAAY,IAAZ,EAAkBD,UAAlB,CAAhB;AAAA,G,QACXE,Q,GAAW;AAAA,UAAM,MAAKD,MAAL,CAAY,KAAZ,CAAN;AAAA,G,QAEXA,M,GAAS,UAACF,MAAD,EACT;AAAA,OADkBC,UAClB,uEAD+B,EAC/B;AAAA,qBAWG,MAAKG,KAXR;AAAA,OAGEC,QAHF,eAGEA,QAHF;AAAA,OAIEC,UAJF,eAIEA,UAJF;AAAA,OAKEC,UALF,eAKEA,UALF;AAAA,OAMEC,WANF,eAMEA,WANF;AAAA,OAOEC,OAPF,eAOEA,OAPF;AAAA,OAQEC,oBARF,eAQEA,oBARF;AAAA,OASEC,cATF,eASEA,cATF;AAAA,qBAkBG,MAAKd,KAlBR;AAAA,OAeEC,QAfF,eAeEA,QAfF;AAAA,OAgBEc,YAhBF,eAgBEA,YAhBF;;AAoBC;;AACA,OAAIZ,WAAWa,SAAf,EAA0B;AACzBb,aAAS,CAACF,QAAV;AACA;;AAED;AACA;AACA;;AAEA,OAAIgB,2BAAJ;;AAEA,OAAId,UAAUF,QAAV,IAAsBG,WAAWc,OAArC,EAA8C;AAC7CD,yBAAqB,IAArB;AACA;;AAED,OAAId,WAAWF,QAAX,IAAuB,CAACgB,kBAA5B,EAAgD;AAC/C,WAAOE,QAAQC,OAAR,EAAP;AACA;;AAED,OAAI,MAAKC,UAAL,IAAmB,CAACJ,kBAAxB,EAA4C;AAC3C,WAAOE,QAAQC,OAAR,EAAP;AACA;;AAED,SAAKC,UAAL,GAAkB,IAAlB;;AAEA;AACA,OAAI,CAAClB,MAAL,EACA;AACC,QAAI,MAAKmB,eAAT,EAA0B;AACzB,WAAKA,eAAL,CAAqBC,sBAArB;AACA;;AAEDC,iBAAa,MAAKC,mBAAlB;;AAEA,QAAIf,UAAJ,EAAgB;AACfA,gBAAW,EAAEgB,UAAU,MAAKA,QAAjB,EAAX;AACA;;AAED;AACA;AACA;AACA,WAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC/B,WAAKO,QAAL,CAAc,EAAE1B,UAAW,KAAb,EAAd,EAAoC,YAAM;AACzC,UAAIU,WAAJ,EAAiB;AAChBA;AACA;AACD,YAAKiB,2BAAL;AACA,YAAKP,UAAL,GAAkB,KAAlB;AACAD;AACA,MAPD;AAQA,KATM,CAAP;AAUA;;AAED;AACA,UAAO,MAAKR,OAAL,GAAeiB,IAAf,CAAoB;AAAA,WAAM,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAC7C;AACCI,kBAAa,MAAKM,kBAAlB;;AAEA,WAAKH,QAAL,CACC;AACAI,oBAAe;AADf,MADD;AAIA;AACA;AACA;AACA;AACA,iBACA;AACC,UAAIvB,QAAJ,EAAc;AACbA;AACA;;AAEDwB,iBAAW,YACX;AACC,aAAKL,QAAL,CAAc,EAAE1B,UAAW,IAAb,EAAd,EAAmC,YACnC;AACC,YAAIQ,UAAJ,EAAgB;AACfA;AACA;;AAED,cAAKwB,cAAL;AACAb;;AAEA,YAAI,MAAKE,eAAT,EAA0B;AACzB,eAAKA,eAAL,CAAqBY,eAArB;AACA;;AAED,cAAKb,UAAL,GAAkB,KAAlB;AACA,QAdD;AAeA,OAjBD,EAkBA,EAlBA;AAmBA,MAjCD;AAkCA,KAtCgC,CAAN;AAAA,IAApB,CAAP;AAuCA,G,QAsFDO,2B,GAA8B,YAC9B;AAAA,OACSO,uBADT,GACqC,MAAK5B,KAD1C,CACS4B,uBADT;;AAGC;AACA;;AACA,SAAKL,kBAAL,GAA0BE,WAAW,YACrC;AACC;AACA,UAAKL,QAAL,CAAc,EAAEI,cAAe,KAAjB,EAAd;AACA,IAJyB,EAK1BI,0BAA0B,GALA,CAA1B;AAMA,G,QAEDC,S,GAAY,UAACC,KAAD,EACZ;AACC,OAAIA,MAAMC,gBAAV,EAA4B;AAC3B;AACA;;AAED,OAAID,MAAME,OAAN,IAAiBF,MAAMG,MAAvB,IAAiCH,MAAMI,QAAvC,IAAmDJ,MAAMK,OAA7D,EAAsE;AACrE;AACA;;AAED,WAAQL,MAAMM,OAAd;AAEC;AACA,SAAK,EAAL;AACCN,WAAMO,cAAN;AACA;AACA,YAAO,MAAKtC,QAAL,EAAP;AANF;AAQA,G,QAEDuC,M,GAAS,UAACR,KAAD;AAAA,UAAW,MAAKS,aAAL,IAAsB,MAAKA,aAAL,CAAmBD,MAAnB,CAA0BR,KAA1B,CAAjC;AAAA,G,QAETU,kB,GAAqB,UAACC,IAAD;AAAA,UAAU,MAAKC,SAAL,GAAiBD,IAA3B;AAAA,G,QACrBE,gB,GAAmB;AAAA,UAAM,MAAKD,SAAX;AAAA,G,QAEnBE,oB,GAAuB,UAACC,GAAD;AAAA,UAAS,MAAK9B,eAAL,GAAuB8B,GAAhC;AAAA,G,QACvBC,kB,GAAqB,UAACD,GAAD;AAAA,UAAS,MAAKN,aAAL,GAAqBM,GAA9B;AAAA,G,QAErBE,U,GAAa,UAACjB,KAAD,EACb;AACC;AACA;AACA,OAAI,MAAKkB,iBAAT,EAA4B;AAC3B/B,iBAAa,MAAK+B,iBAAlB;AACA,UAAKA,iBAAL,GAAyBvC,SAAzB;AACA;;AAED,SAAKwC,WAAL,CAAiBnB,KAAjB;AACA,G,QAEDoB,Y,GAAe,UAACpB,KAAD,EACf;AAAA,OACSqB,iBADT,GAC+B,MAAKnD,KADpC,CACSmD,iBADT;;;AAGClC,gBAAa,MAAK+B,iBAAlB;AACA,SAAKA,iBAAL,GAAyBvB,WAAW,YAAM;AACzC;AACA;AACA,QAAI,MAAKuB,iBAAT,EAA4B;AAC3B,WAAKC,WAAL,CAAiBnB,KAAjB;AACA;AACD,UAAKkB,iBAAL,GAAyBvC,SAAzB;AACA,IAPwB,EAOtB0C,iBAPsB,CAAzB;AAQA,G;;;;;yCAtRD;AACClC,gBAAa,KAAKC,mBAAlB;AACAD,gBAAa,KAAKM,kBAAlB;AACAN,gBAAa,KAAK+B,iBAAlB;AACA;;;;;AA2HD;4BAEA;AAAA;;AAAA,gBAC2C,KAAKhD,KADhD;AAAA,OACSK,OADT,UACSA,OADT;AAAA,OACkBC,oBADlB,UACkBA,oBADlB;;;AAGC,OAAID,OAAJ,EACA;AACC,SAAKe,QAAL,CAAc;AACbZ,mBAAe;AADF,KAAd;;AAIA,QAAIF,oBAAJ,EAA0B;AACzBA,0BAAqB,IAArB;AACA;AACD;;AAED,UAAO,CAACD,UAAUA,SAAV,GAAsBO,QAAQC,OAAR,EAAvB,EACLS,IADK,CACA,YACN;AACC,QAAIhB,oBAAJ,EAA0B;AACzBA,0BAAqB,KAArB;AACA;;AAED,WAAKc,QAAL,CAAc;AACbZ,mBAAe;AADF,KAAd;AAGA,IAVK,EAWN,UAAC4C,KAAD,EACA;AACCC,YAAQD,KAAR,CAAcA,KAAd;;AAEA;AACA;AACA;;AAEA,QAAI9C,oBAAJ,EAA0B;AACzBA,0BAAqB,KAArB;AACA;;AAED,WAAKc,QAAL,CAAc;AACbZ,mBAAe;AADF,KAAd;AAGA,IA1BK,CAAP;AA2BA;;;mCAGD;AAAA;;AAAA,iBAOG,KAAKR,KAPR;AAAA,OAGmBsD,oBAHnB,WAGE5B,cAHF;AAAA,OAIE6B,mBAJF,WAIEA,mBAJF;AAAA,OAKE3B,uBALF,WAKEA,uBALF;;AASC;AACA;AACA;;AACA,OAAI0B,oBAAJ,EACA;AACC,SAAKpC,mBAAL,GAA2BO,WAAW,YACtC;AAAA,SACS/B,QADT,GACsB,OAAKD,KAD3B,CACSC,QADT;;AAGC;AACA;;AACA,SAAIA,QAAJ,EACA;AACC;AACA;;AAEA,4CAAe,OAAKgD,SAApB,EACA;AACCc,mBAAa,WADd;AAECC,iBAAa,QAFd;AAGCC,cAAa,SAHd;AAICC,eAAa;AAJd,OADA;AAOA;AACD,KAnB0B,EAoB3BC,KAAKC,GAAL,CAASN,mBAAT,EAA8B3B,uBAA9B,IAAyD,GApB9B,CAA3B;AAqBA;AACD;;;8BAuEWE,K,EAAO;AAAA,OACViB,UADU,GACK,KAAK/C,KADV,CACV+C,UADU;;AAElB,QAAK5B,QAAL,GAAgB,IAAhB;AACA4B,cAAWjB,KAAX;AACA,QAAKX,QAAL,GAAgBV,SAAhB;AACA;;;2BAGD;AAAA,iBAcG,KAAKT,KAdR;AAAA,OAGE8D,SAHF,WAGEA,SAHF;AAAA,OAIEC,MAJF,WAIEA,MAJF;AAAA,OAKEhB,UALF,WAKEA,UALF;AAAA,OAMEiB,cANF,WAMEA,cANF;AAAA,OAOEC,UAPF,WAOEA,UAPF;AAAA,OAQoBC,eARpB,WAQEC,eARF;AAAA,OASEC,IATF,WASEA,IATF;AAAA,OAUEC,KAVF,WAUEA,KAVF;AAAA,OAWEC,SAXF,WAWEA,SAXF;AAAA,OAYEC,QAZF,WAYEA,QAZF;AAAA,gBAqBG,KAAK9E,KArBR;AAAA,OAkBE+B,YAlBF,UAkBEA,YAlBF;AAAA,OAmBE9B,QAnBF,UAmBEA,QAnBF;;;AAuBC,OAAI,CAAC8B,YAAL,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED;AACA;;AAEA;AACA;;AAEA;;AAEA,OAAIgD,UACH;AAAA;AAAA;AACC,UAAM,KAAKhC,kBADZ;AAEC,gBAAY,KAAKX,SAFlB;AAGC,aAAS,KAAKS,MAHf;AAIC,WAAO8B,IAJR;AAKC,oBAAc,KAAKpE,KAAL,CAAW,aAAX,CALf;AAMC,mBAAa,KAAKA,KAAL,CAAW,YAAX,CANd;AAOC,YAAQqE,KAPT;AAQC,gBAAY,0BAEXC,SAFW,EAGX,cAHW,EAIX,kBAJW,EAKX,2BALW,EAMX;AACC,oCAAoC5E,QADrC;AAEC,wCAAoCoE,cAAc,MAFnD;AAGC,yCAAoCA,cAAc,OAHnD;AAIC,kCAAoCC,MAJrC;AAKC,oCAAoC,CAACA;AALtC,MANW,CARb;AAsBG,oBAAMU,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,UAACI,KAAD,EAC/B;AACC,YAAO,gBAAMC,YAAN,CAAmBD,KAAnB,EACP;AACCL,iBAAW,0BAEVK,MAAM3E,KAAN,CAAYsE,SAFF,EAGV,2BAHU,EAIV;AACC,8CAAwC5E;AADzC,OAJU;AADZ,MADO,CAAP;AAWA,KAbC,CAtBH;AAsCGA,gBAAYwE,eAAZ,IACD;AAAA;AAAA;AACC,eAAS,KAAKnE,QADf;AAEC,kBAAYkE,UAFb;AAGC,iBAAW,0BAAW,2BAAX,EAAwC,yBAAxC,CAHZ;AAIC,mCAAC,eAAD;AAJD;AAvCF,IADD;;AAkDA,OAAIlB,UAAJ,EAAgB;AACfyB,cACC;AAAA;AAAA;AACC,WAAK,KAAK1B,kBADX;AAEC,wBAAkB,KAAKH,gBAFxB;AAGC,sBAAgBqB,cAHjB;AAIC,kBAAY,KAAKjB,UAJlB;AAKEyB;AALF,KADD;AASA;;AAED,OAAIzB,UAAJ,EAAgB;AACfyB,cACC;AAAA;AAAA;AACC,WAAK,KAAK5B,oBADX;AAEC,wBAAkB,KAAKD,gBAFxB;AAGC,sBAAgBqB,cAHjB;AAIC,oBAAc,KAAKd,YAJpB;AAKEsB;AALF,KADD;AASA;;AAED,UAAOA,OAAP;AACA;;;;EA5dsClF,a,UAEhCuF,S,GACP;AACC;AACA;AACAxE,UAAU,oBAAUyE,IAHrB;AAICxE,uBAAuB,oBAAUwE,IAJlC;AAKCvE,iBAAiB,oBAAUuE,IAL5B;;AAOC7E,WAAW,oBAAU6E,IAPtB;AAQC3E,aAAa,oBAAU2E,IARxB;;AAUC;AACAhB,YAAY,oBAAUiB,KAAV,CAAgB,CAAC,MAAD,EAAS,OAAT,CAAhB,CAXb;;AAaC;AACA;AACA;AACAhB,SAAS,oBAAUiB,IAhBpB;;AAkBC;AACAZ,OAAO,oBAAUa,MAnBlB;;AAqBC;AACAZ,QAAQ,oBAAUa,MAtBnB;;AAwBC;AACAZ,YAAY,oBAAUW,MAzBvB;;AA2BC;AACA;AACA;AACA;AACA;AACAvD,iBAAiB,oBAAUsD,IAAV,CAAeG,UAhCjC;;AAkCC;AACA;AACAvD,0BAA0B,oBAAUwD,MAAV,CAAiBD,UApC5C;;AAsCC5B,sBAAsB,oBAAU6B,MAAV,CAAiBD,UAtCxC;;AAwCCnB,iBAAiB,oBAAUc,IAxC5B;AAyCC/B,aAAa,oBAAU+B,IAzCxB;;AA2CC3B,oBAAoB,oBAAUiC,MAAV,CAAiBD,UA3CtC;;AA6CC;AACA;AACAlB,aAAa,oBAAUgB,MA/CxB;;AAiDC;AACA;AACAd,kBAAkB,oBAAUkB,SAAV,CAAoB,CAAC,oBAAUP,IAAX,EAAiB,oBAAUC,KAAV,CAAgB,CAAC,KAAD,CAAhB,CAAjB,CAApB,EAAgEI;AAnDnF,C,SAsDOG,Y,GACP;AACC5D,iBAAiB,IADlB;AAECE,0BAA0B,GAF3B;AAGC2B,sBAAsB,CAHvB;;AAKC;AACA;AACAJ,oBAAoB,EAPrB;;AASC;AACA;AACAgB;AAXD,C;kBA1DoB3E,U","file":"Expandable.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport scrollIntoView from 'scroll-into-view-if-needed'\r\n\r\nimport Close, { CloseIcon } from './Close'\r\nimport OnFocusOut from './OnFocusOut'\r\nimport OnTapOutside from './OnTapOutside'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n/**\r\n * Usage:\r\n *\r\n * <button onClick={() => this.expandable.toggle()}>\r\n *   Toggle\r\n * </button>\r\n *\r\n * <Expandable ref={ref => this.expandable = ref}>\r\n *   ...\r\n * </Expandable>\r\n *\r\n * Methods:\r\n * * `.toggle()`\r\n * * `.expand()`\r\n * * `.collapse()`\r\n * * `.isExpanded()`\r\n */\r\nexport default class Expandable extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Can optionally preload `<Expandable/>` contents before expanding it.\r\n\t\t// Must return a `Promise`.\r\n\t\tpreload : PropTypes.func,\r\n\t\tonPreloadStateChange : PropTypes.func,\r\n\t\tonPreloadError : PropTypes.func,\r\n\r\n\t\tonExpand : PropTypes.func,\r\n\t\tonCollapse : PropTypes.func,\r\n\r\n\t\t// Whether the `<Expandable/>` expands upwards or downwards.\r\n\t\talignment : PropTypes.oneOf(['left', 'right']),\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then the dropdown expands itself upward.\r\n\t\t// (as opposed to the default downward)\r\n\t\tupward : PropTypes.bool,\r\n\r\n\t\t// ARIA `role` (accessibility).\r\n\t\trole : PropTypes.string,\r\n\r\n\t\t// CSS style object.\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t// CSS class.\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t// When the `<Expandable/>` is expanded\r\n\t\t// its content may not fit on the screen.\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then the browser will automatically scroll\r\n\t\t// so that the expanded content fits on the screen.\r\n\t\tscrollIntoView : PropTypes.bool.isRequired,\r\n\r\n\t\t// If `scrollIntoView` is `true` (which is the default)\r\n\t\t// then these two are gonna define the delay after which it scrolls into view.\r\n\t\texpandAnimationDuration : PropTypes.number.isRequired,\r\n\r\n\t\tscrollIntoViewDelay : PropTypes.number.isRequired,\r\n\r\n\t\tgetTogglerNode : PropTypes.func,\r\n\t\tonFocusOut : PropTypes.func,\r\n\r\n\t\tonTapOutsideDelay : PropTypes.number.isRequired,\r\n\r\n\t\t// `aria-label` for the \"Close\" button\r\n\t\t// (which is an \"x\" visible in fullscreen mode).\r\n\t\tcloseLabel : PropTypes.string,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([false])]).isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\tscrollIntoView : true,\r\n\t\texpandAnimationDuration : 150,\r\n\t\tscrollIntoViewDelay : 0,\r\n\r\n\t\t// `onFocusOut` is triggered right after `onTapOutside`.\r\n\t\t// This workaround prevents duplicate `onFocusOut` call.\r\n\t\tonTapOutsideDelay : 30,\r\n\r\n\t\t// The \"x\" button icon that closes the `<Select/>`\r\n\t\t// in fullscreen mode on mobile devices.\r\n\t\tcloseButtonIcon : CloseIcon\r\n\t}\r\n\r\n\tstate = {\r\n\t\t// This initialization is required for `if (expand === expanded)`.\r\n\t\texpanded: false\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.scrollIntoViewTimer)\r\n\t\tclearTimeout(this.removeFromDOMTimer)\r\n\t\tclearTimeout(this.onTapOutsideTimer)\r\n\t}\r\n\r\n\tisExpanded = () => this.state.expanded\r\n\r\n\texpand   = (parameters) => this.toggle(true, parameters)\r\n\tcollapse = () => this.toggle(false)\r\n\r\n\ttoggle = (expand, parameters = {}) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonExpand,\r\n\t\t\tonExpanded,\r\n\t\t\tonCollapse,\r\n\t\t\tonCollapsed,\r\n\t\t\tpreload,\r\n\t\t\tonPreloadStateChange,\r\n\t\t\tonPreloadError\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\texpanded,\r\n\t\t\tisPreloading\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// If no `expand` argument provided then just toggle.\r\n\t\tif (expand === undefined) {\r\n\t\t\texpand = !expanded\r\n\t\t}\r\n\r\n\t\t// Don't collapse if already collapsed.\r\n\t\t// Don't expand if already expanded\r\n\t\t// until manually forcing a refresh of content.\r\n\r\n\t\tlet refreshingExpanded\r\n\r\n\t\tif (expand && expanded && parameters.refresh) {\r\n\t\t\trefreshingExpanded = true\r\n\t\t}\r\n\r\n\t\tif (expand === expanded && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tif (this.isToggling && !refreshingExpanded) {\r\n\t\t\treturn Promise.resolve()\r\n\t\t}\r\n\r\n\t\tthis.isToggling = true\r\n\r\n\t\t// Collapse.\r\n\t\tif (!expand)\r\n\t\t{\r\n\t\t\tif (this.onTapOutsideRef) {\r\n\t\t\t\tthis.onTapOutsideRef.stopListeningToTouches()\r\n\t\t\t}\r\n\r\n\t\t\tclearTimeout(this.scrollIntoViewTimer)\r\n\r\n\t\t\tif (onCollapse) {\r\n\t\t\t\tonCollapse({ focusOut: this.focusOut })\r\n\t\t\t}\r\n\r\n\t\t\t// Set `expanded` to `false` to play the collapse CSS animation.\r\n\t\t\t// Once that animation is finished remove\r\n\t\t\t// the contents of the `<Expanded/>` from DOM.\r\n\t\t\treturn new Promise((resolve) => {\r\n\t\t\t\tthis.setState({ expanded : false }, () => {\r\n\t\t\t\t\tif (onCollapsed) {\r\n\t\t\t\t\t\tonCollapsed();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.removeFromDOMAfterCollapsed()\r\n\t\t\t\t\tthis.isToggling = false\r\n\t\t\t\t\tresolve()\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// Expand.\r\n\t\treturn this.preload().then(() => new Promise((resolve) =>\r\n\t\t{\r\n\t\t\tclearTimeout(this.removeFromDOMTimer)\r\n\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tshouldRender : true\r\n\t\t\t},\r\n\t\t\t// Without the 10ms delay for some reason the CSS \"expand\" animation won't play.\r\n\t\t\t// Perhaps a browser decides to optimize two subsequent renders\r\n\t\t\t// and doesn't render \"pre-expanded\" and \"expanded\" states separately.\r\n\t\t\t// Even with a 0ms delay it would randomly play/not-play the expand animation.\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tif (onExpand) {\r\n\t\t\t\t\tonExpand()\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetTimeout(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.setState({ expanded : true }, () =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (onExpanded) {\r\n\t\t\t\t\t\t\tonExpanded()\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.scrollIntoView()\r\n\t\t\t\t\t\tresolve()\r\n\r\n\t\t\t\t\t\tif (this.onTapOutsideRef) {\r\n\t\t\t\t\t\t\tthis.onTapOutsideRef.listenToTouches()\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.isToggling = false\r\n\t\t\t\t\t})\r\n\t\t\t\t},\r\n\t\t\t\t10)\r\n\t\t\t})\r\n\t\t}))\r\n\t}\r\n\r\n\t// Preload `<Expanded/>` content (if required).\r\n\tpreload()\r\n\t{\r\n\t\tconst { preload, onPreloadStateChange } = this.props\r\n\r\n\t\tif (preload)\r\n\t\t{\r\n\t\t\tthis.setState({\r\n\t\t\t\tisPreloading : true\r\n\t\t\t})\r\n\r\n\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\tonPreloadStateChange(true)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (preload ? preload() : Promise.resolve())\r\n\t\t\t.then(() =>\r\n\t\t\t{\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading : false\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.error(error)\r\n\r\n\t\t\t\t// if (onPreloadError) {\r\n\t\t\t\t// \tonPreloadError(error)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\tif (onPreloadStateChange) {\r\n\t\t\t\t\tonPreloadStateChange(false)\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisPreloading : false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}\r\n\r\n\tscrollIntoView()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tscrollIntoView : shouldScrollIntoView,\r\n\t\t\tscrollIntoViewDelay,\r\n\t\t\texpandAnimationDuration\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\t// // For some reason in IE 11 \"scroll into view\" scrolls\r\n\t\t// // to the top of the page, therefore turn it off for IE.\r\n\t\t// if (!isInternetExplorer() && shouldScrollIntoView)\r\n\t\tif (shouldScrollIntoView)\r\n\t\t{\r\n\t\t\tthis.scrollIntoViewTimer = setTimeout(() =>\r\n\t\t\t{\r\n\t\t\t\tconst { expanded } = this.state\r\n\r\n\t\t\t\t// If still expanded and there are any options\r\n\t\t\t\t// then scroll into view.\r\n\t\t\t\tif (expanded)\r\n\t\t\t\t{\r\n\t\t\t\t\t// https://github.com/stipsan/scroll-into-view-if-needed/issues/359\r\n\t\t\t\t\t// scrollIntoView(this.container, false, { duration: 300 })\r\n\r\n\t\t\t\t\tscrollIntoView(this.container,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tscrollMode : 'if-needed',\r\n\t\t\t\t\t\tbehavior   : 'smooth',\r\n\t\t\t\t\t\tblock      : 'nearest',\r\n\t\t\t\t\t\tinline     : 'nearest'\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tMath.max(scrollIntoViewDelay, expandAnimationDuration) * 1.1)\r\n\t\t}\r\n\t}\r\n\r\n\tremoveFromDOMAfterCollapsed = () =>\r\n\t{\r\n\t\tconst { expandAnimationDuration } = this.props\r\n\r\n\t\t// For some reason in IE 11 \"scroll into view\" scrolls\r\n\t\t// to the top of the page, therefore turn it off for IE.\r\n\t\tthis.removeFromDOMTimer = setTimeout(() =>\r\n\t\t{\r\n\t\t\t// Re-render to remove the options DOM nodes.\r\n\t\t\tthis.setState({ shouldRender : false })\r\n\t\t},\r\n\t\texpandAnimationDuration * 1.1)\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// Collapse on \"Escape\".\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\t// Collapse the list if it's expanded\r\n\t\t\t\treturn this.collapse()\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => this.onFocusOutRef && this.onFocusOutRef.onBlur(event)\r\n\r\n\tstoreContainerNode = (node) => this.container = node\r\n\tgetContainerNode = () => this.container\r\n\r\n\tstoreOnTapOutsideRef = (ref) => this.onTapOutsideRef = ref\r\n\tstoreOnFocusOutRef = (ref) => this.onFocusOutRef = ref\r\n\r\n\tonFocusOut = (event) =>\r\n\t{\r\n\t\t// `onFocusOut` is triggered right after `onTapOutside`.\r\n\t\t// This workaround prevents duplicate `onFocusOut` call.\r\n\t\tif (this.onTapOutsideTimer) {\r\n\t\t\tclearTimeout(this.onTapOutsideTimer)\r\n\t\t\tthis.onTapOutsideTimer = undefined\r\n\t\t}\r\n\r\n\t\tthis._onFocusOut(event)\r\n\t}\r\n\r\n\tonTapOutside = (event) =>\r\n\t{\r\n\t\tconst { onTapOutsideDelay } = this.props\r\n\r\n\t\tclearTimeout(this.onTapOutsideTimer)\r\n\t\tthis.onTapOutsideTimer = setTimeout(() => {\r\n\t\t\t// `onFocusOut` is triggered right after `onTapOutside`.\r\n\t\t\t// This workaround prevents duplicate `onFocusOut` call.\r\n\t\t\tif (this.onTapOutsideTimer) {\r\n\t\t\t\tthis._onFocusOut(event)\r\n\t\t\t}\r\n\t\t\tthis.onTapOutsideTimer = undefined\r\n\t\t}, onTapOutsideDelay)\r\n\t}\r\n\r\n\t_onFocusOut(event) {\r\n\t\tconst { onFocusOut } = this.props\r\n\t\tthis.focusOut = true\r\n\t\tonFocusOut(event)\r\n\t\tthis.focusOut = undefined\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\talignment,\r\n\t\t\tupward,\r\n\t\t\tonFocusOut,\r\n\t\t\tgetTogglerNode,\r\n\t\t\tcloseLabel,\r\n\t\t\tcloseButtonIcon : CloseButtonIcon,\r\n\t\t\trole,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tchildren\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tshouldRender,\r\n\t\t\texpanded\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tif (!shouldRender) {\r\n\t\t\treturn null\r\n\t\t}\r\n\r\n\t\t// `tabIndex={ -1 }` makes the `<div/>` focusable.\r\n\t\t// So that `<Expandable/>` doesn't collapse on click inside it (top, bottom).\r\n\r\n\t\t// `aria-hidden={true/false}` is not set automatically here\r\n\t\t// because when `<Expandable/>` is collapsed then it's not rendered.\r\n\r\n\t\t// tabIndex={ -1 }\r\n\r\n\t\tlet element = (\r\n\t\t\t<div\r\n\t\t\t\tref={ this.storeContainerNode }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\trole={ role }\r\n\t\t\t\taria-hidden={ this.props['aria-hidden'] }\r\n\t\t\t\taria-label={ this.props['aria-label'] }\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\tclassName,\r\n\t\t\t\t\t'rrui__shadow',\r\n\t\t\t\t\t'rrui__expandable',\r\n\t\t\t\t\t'rrui__expandable--overlay',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__expandable--expanded'      : expanded,\r\n\t\t\t\t\t\t'rrui__expandable--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t'rrui__expandable--right-aligned' : alignment === 'right',\r\n\t\t\t\t\t\t'rrui__expandable--upward'        : upward,\r\n\t\t\t\t\t\t'rrui__expandable--downward'      : !upward\r\n\t\t\t\t\t}\r\n\t\t\t\t) }>\r\n\t\t\t\t{ React.Children.map(children, (child) =>\r\n\t\t\t\t{\r\n\t\t\t\t\treturn React.cloneElement(child,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tclassName: classNames\r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\tchild.props.className,\r\n\t\t\t\t\t\t\t'rrui__expandable__content',\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t'rrui__expandable__content--expanded' : expanded\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}) }\r\n\r\n\t\t\t\t{/* The \"x\" button to hide the fullscreen expandable on mobile devices */}\r\n\t\t\t\t{ expanded && CloseButtonIcon &&\r\n\t\t\t\t\t<Close\r\n\t\t\t\t\t\tonClick={this.collapse}\r\n\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\tclassName={classNames('rrui__close--bottom-right', 'rrui__expandable__close')}>\r\n\t\t\t\t\t\t<CloseButtonIcon/>\r\n\t\t\t\t\t</Close>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\tif (onFocusOut) {\r\n\t\t\telement = (\r\n\t\t\t\t<OnFocusOut\r\n\t\t\t\t\tref={this.storeOnFocusOutRef}\r\n\t\t\t\t\tgetContainerNode={this.getContainerNode}\r\n\t\t\t\t\tgetTogglerNode={getTogglerNode}\r\n\t\t\t\t\tonFocusOut={this.onFocusOut}>\r\n\t\t\t\t\t{element}\r\n\t\t\t\t</OnFocusOut>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tif (onFocusOut) {\r\n\t\t\telement = (\r\n\t\t\t\t<OnTapOutside\r\n\t\t\t\t\tref={this.storeOnTapOutsideRef}\r\n\t\t\t\t\tgetContainerNode={this.getContainerNode}\r\n\t\t\t\t\tgetTogglerNode={getTogglerNode}\r\n\t\t\t\t\tonTapOutside={this.onTapOutside}>\r\n\t\t\t\t\t{element}\r\n\t\t\t\t</OnTapOutside>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn element\r\n\t}\r\n}"]}