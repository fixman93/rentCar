{"version":3,"sources":["../source/KeyboardNavigationListener.js"],"names":["KeyboardNavigationListener","onKeyDown","event","ctrlKey","altKey","shiftKey","metaKey","keyCode","tabbing","document","body","classList","add","onPointerEvent","remove","window","addEventListener","PointerEvent","removeEventListener","Component"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEqBA,0B;;;;;;;;;;;;;;4NAuCpBC,S,GAAY,UAACC,KAAD,EAAW;AACtB,OAAIA,MAAMC,OAAN,IAAiBD,MAAME,MAAvB,IAAiCF,MAAMG,QAAvC,IAAmDH,MAAMI,OAA7D,EAAsE;AACrE;AACA;AACD,WAAQJ,MAAMK,OAAd;AACC;AACA,SAAK,CAAL;AACC,SAAI,CAAC,MAAKC,OAAV,EAAmB;AAClB,YAAKA,OAAL,GAAe,IAAf;AACAC,eAASC,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,eAA5B;AACA;AACD;AAPF;AASA,G,QAEDC,c,GAAiB,UAACX,KAAD,EAAW;AAC3B,OAAI,MAAKM,OAAT,EAAkB;AACjB,UAAKA,OAAL,GAAe,KAAf;AACAC,aAASC,IAAT,CAAcC,SAAd,CAAwBG,MAAxB,CAA+B,eAA/B;AACA;AACD,G;;;;;sCA1DmB;AACnBC,UAAOC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKf,SAAxC;AACA;AACA;AACA,OAAIc,OAAOE,YAAX,EAAyB;AACxBF,WAAOC,gBAAP,CAAwB,aAAxB,EAAuC,KAAKH,cAA5C;AACAE,WAAOC,gBAAP,CAAwB,aAAxB,EAAuC,KAAKH,cAA5C;AACA,IAHD,MAGO;AACN;AACAE,WAAOC,gBAAP,CAAwB,WAAxB,EAAqC,KAAKH,cAA1C;AACAE,WAAOC,gBAAP,CAAwB,WAAxB,EAAqC,KAAKH,cAA1C;AACA;AACA,QAAI,kBAAkBE,MAAtB,EAA8B;AAC7BA,YAAOC,gBAAP,CAAwB,YAAxB,EAAsC,KAAKH,cAA3C;AACAE,YAAOC,gBAAP,CAAwB,UAAxB,EAAoC,KAAKH,cAAzC;AACA;AACD;AACD;;;yCAEsB;AACtBE,UAAOG,mBAAP,CAA2B,SAA3B,EAAsC,KAAKjB,SAA3C;AACA;AACA;AACA,OAAIc,OAAOE,YAAX,EAAyB;AACxBF,WAAOG,mBAAP,CAA2B,aAA3B,EAA0C,KAAKL,cAA/C;AACAE,WAAOG,mBAAP,CAA2B,aAA3B,EAA0C,KAAKL,cAA/C;AACA,IAHD,MAGO;AACN;AACAE,WAAOG,mBAAP,CAA2B,WAA3B,EAAwC,KAAKL,cAA7C;AACAE,WAAOG,mBAAP,CAA2B,WAA3B,EAAwC,KAAKL,cAA7C;AACA;AACA,QAAI,kBAAkBE,MAAtB,EAA8B;AAC7BA,YAAOG,mBAAP,CAA2B,YAA3B,EAAyC,KAAKL,cAA9C;AACAE,YAAOG,mBAAP,CAA2B,UAA3B,EAAuC,KAAKL,cAA5C;AACA;AACD;AACD;;;2BAwBQ;AACR,UAAO,IAAP;AACA;;;;EA/DsD,gBAAMM,S;;kBAAzCnB,0B","file":"KeyboardNavigationListener.js","sourcesContent":["import React from 'react'\r\n\r\n// The original idea is by `what-input` library.\r\n// https://github.com/ten1seven/what-input\r\n//\r\n// Still, seems that \"Screen Readers\" emit all sorts of\r\n// pointer events even when using only keyboard navigation.\r\n// https://patrickhlauke.github.io/touch/tests/results/#desktop-assistive-technology-events\r\n//\r\n// So, listening to pointer events and deciding on the input method\r\n// is not a 100%-formally-correct technique (though it does make perfect sense).\r\n// So, for having one's ass covered it's not considered a reliable strategy.\r\n//\r\n// There's a script listening for `mousedown` events on each button/link/input\r\n// which then removes the outline (and adds it when it detects a keyboard event).\r\n// https://github.com/lindsayevans/outline.js\r\n\r\nexport default class KeyboardNavigationListener extends React.Component {\r\n\tcomponentDidMount() {\r\n\t\twindow.addEventListener('keydown', this.onKeyDown)\r\n\t\t// \"Pointer\" events are mouse/stylus/pen/touch events.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\r\n\t\tif (window.PointerEvent) {\r\n\t\t\twindow.addEventListener('pointermove', this.onPointerEvent)\r\n\t\t\twindow.addEventListener('pointerdown', this.onPointerEvent)\r\n\t\t} else {\r\n\t\t\t// Mouse events.\r\n\t\t\twindow.addEventListener('mousemove', this.onPointerEvent)\r\n\t\t\twindow.addEventListener('mousedown', this.onPointerEvent)\r\n\t\t\t// Touch events.\r\n\t\t\tif ('ontouchstart' in window) {\r\n\t\t\t\twindow.addEventListener('touchstart', this.onPointerEvent)\r\n\t\t\t\twindow.addEventListener('touchend', this.onPointerEvent)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\twindow.removeEventListener('keydown', this.onKeyDown)\r\n\t\t// \"Pointer\" events are mouse/stylus/pen/touch events.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events\r\n\t\tif (window.PointerEvent) {\r\n\t\t\twindow.removeEventListener('pointermove', this.onPointerEvent)\r\n\t\t\twindow.removeEventListener('pointerdown', this.onPointerEvent)\r\n\t\t} else {\r\n\t\t\t// Mouse events.\r\n\t\t\twindow.removeEventListener('mousemove', this.onPointerEvent)\r\n\t\t\twindow.removeEventListener('mousedown', this.onPointerEvent)\r\n\t\t\t// Touch events.\r\n\t\t\tif ('ontouchstart' in window) {\r\n\t\t\t\twindow.removeEventListener('touchstart', this.onPointerEvent)\r\n\t\t\t\twindow.removeEventListener('touchend', this.onPointerEvent)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown = (event) => {\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tswitch (event.keyCode) {\r\n\t\t\t// \"Tab\".\r\n\t\t\tcase 9:\r\n\t\t\t\tif (!this.tabbing) {\r\n\t\t\t\t\tthis.tabbing = true\r\n\t\t\t\t\tdocument.body.classList.add('rrui__tabbing')\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\tonPointerEvent = (event) => {\r\n\t\tif (this.tabbing) {\r\n\t\t\tthis.tabbing = false\r\n\t\t\tdocument.body.classList.remove('rrui__tabbing')\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn null\r\n\t}\r\n}"]}