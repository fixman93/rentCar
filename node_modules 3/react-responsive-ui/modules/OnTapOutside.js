'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OnTapOutside = (_temp2 = _class = function (_React$Component) {
	_inherits(OnTapOutside, _React$Component);

	function OnTapOutside() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, OnTapOutside);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OnTapOutside.__proto__ || Object.getPrototypeOf(OnTapOutside)).call.apply(_ref, [this].concat(args))), _this), _this.onTouchStart = function (event) {
			// Ignore multitouch.
			if (event.touches.length > 1) {
				// Reset.
				return _this.onTouchCancel();
			}

			_this.initialTouchX = event.changedTouches[0].clientX;
			_this.initialTouchY = event.changedTouches[0].clientY;
			_this.tapping = true;
		}, _this.onTouchMove = function (event) {
			var moveThreshold = _this.props.moveThreshold;

			// Ignore multitouch.

			if (!_this.tapping) {
				return;
			}

			var deltaX = Math.abs(event.changedTouches[0].clientX - _this.initialTouchX);
			var deltaY = Math.abs(event.changedTouches[0].clientY - _this.initialTouchY);

			if (deltaX > moveThreshold || deltaY > moveThreshold) {
				// Reset.
				_this.onTouchCancel();
			}
		}, _this.onTouchEnd = function (event) {
			// Ignore multitouch.
			if (!_this.tapping) {
				return;
			}

			// Reset.
			_this.onTouchCancel();

			_this.onTap(event);
		}, _this.onTouchCancel = function () {
			_this.initialTouchX = undefined;
			_this.initialTouchY = undefined;
			_this.tapping = false;
		}, _this.onTap = function (event) {
			var _this$props = _this.props,
			    getContainerNode = _this$props.getContainerNode,
			    getTogglerNode = _this$props.getTogglerNode,
			    onTapOutside = _this$props.onTapOutside;


			if (getContainerNode().contains(event.target)) {
				return;
			}

			if (getTogglerNode) {
				if (getTogglerNode().contains(event.target)) {
					return;
				}
			}

			if (onTapOutside) {
				_this.focusOut = true;
				onTapOutside(event);
				_this.focusOut = undefined;
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(OnTapOutside, [{
		key: 'listenToTouches',
		value: function listenToTouches() {
			document.addEventListener('touchstart', this.onTouchStart);
			document.addEventListener('touchmove', this.onTouchMove);
			document.addEventListener('touchend', this.onTouchEnd);
			document.addEventListener('touchcancel', this.onTouchCancel);
		}
	}, {
		key: 'stopListeningToTouches',
		value: function stopListeningToTouches() {
			document.removeEventListener('touchstart', this.onTouchStart);
			document.removeEventListener('touchmove', this.onTouchMove);
			document.removeEventListener('touchend', this.onTouchEnd);
			document.removeEventListener('touchcancel', this.onTouchCancel);
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.stopListeningToTouches();
		}

		// On mobile devices "blur" event isn't triggered
		// when a user taps outside. This is to allow touch scrolling
		// while not losing focus on an input field or a button.
		// Adding a manual "on click" listener to emulate
		// "on blur" event when user taps outside (to collapse the expandable).

	}, {
		key: 'render',
		value: function render() {
			var children = this.props.children;

			return children;
		}
	}]);

	return OnTapOutside;
}(_react2.default.Component), _class.propTypes = {
	onTapOutside: _propTypes2.default.func.isRequired,
	getTogglerNode: _propTypes2.default.func,
	getContainerNode: _propTypes2.default.func.isRequired,
	moveThreshold: _propTypes2.default.number.isRequired
}, _class.defaultProps = {
	moveThreshold: 5
}, _temp2);
exports.default = OnTapOutside;
//# sourceMappingURL=OnTapOutside.js.map