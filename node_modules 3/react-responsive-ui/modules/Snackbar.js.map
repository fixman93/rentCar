{"version":3,"sources":["../source/Snackbar.js"],"names":["PureComponent","Component","Snackbar","state","status","queue","next","props","minTime","lengthTimeFactor","value","shift","setState","queueSize","length","height","undefined","hiding","duration","content","window","rruiCollapseOnFocusOut","auto_hide_timer","setTimeout","hide","hideAnimationDuration","show","show_next_snack_timeout","storeContainerNode","node","container","storeSnackbarNode","snackbar","clearTimeout","show_snack_timeout","prevProps","push","newValue","receiveNewValue","offsetHeight","marginBottom","parseInt","getComputedStyle","anti_lag_timeout","component","type","containerStyle","transform","transition","showCloseButton","close","renderContent","action","onClick","title","propTypes","shape","oneOfType","string","func","object","number","isRequired","bool","defaultProps","Close"],"mappings":"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","file":"Snackbar.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n// Sits at the bottom of a page and displays notifications\r\nexport default class Snackbar extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Snackbar value (either a message, or an object)\r\n\t\tvalue : PropTypes.shape\r\n\t\t({\r\n\t\t\t// Notification content.\r\n\t\t\tcontent : PropTypes.oneOfType\r\n\t\t\t([\r\n\t\t\t\tPropTypes.string,\r\n\t\t\t\tPropTypes.node\r\n\t\t\t]),\r\n\r\n\t\t\t// Instead of `content` property one may supply `component` property\r\n\t\t\t// which must be a React component which receives all \"rest\" `value` properties\r\n\t\t\t// and also `hide`property (a function that hides the notification).\r\n\t\t\tcomponent : PropTypes.func,\r\n\r\n\t\t\t// `props` are passed to `component`.\r\n\t\t\tprops : PropTypes.object,\r\n\r\n\t\t\t// If `content` is a `string` then its `length` is calculated automatically.\r\n\t\t\t// Otherwise one may pass `length` manually.\r\n\t\t\t// It's used for calculating notification `duration`.\r\n\t\t\tlength : PropTypes.number,\r\n\r\n\t\t\t// `type` is appended as a BEM modifier to `.rrui__snackbar` CSS class.\r\n\t\t\t// E.g. `.rrui__snackbar--error` for `{ type: \"error\" }`.\r\n\t\t\ttype : PropTypes.string,\r\n\r\n\t\t\t// How long does the notification stay.\r\n\t\t\t// Pass `-1` for it to stay until it's closed manually.\r\n\t\t\tduration : PropTypes.number,\r\n\r\n\t\t\t// (optional)\r\n\t\t\t// Action button on the right side.\r\n\t\t\taction: PropTypes.shape({\r\n\t\t\t\tonClick: PropTypes.func.isRequired,\r\n\t\t\t\ttitle: PropTypes.string.isRequired\r\n\t\t\t}),\r\n\r\n\t\t\t// (optional)\r\n\t\t\t// Set to `true` to show a close button.\r\n\t\t\t// Close button is automatically shown\r\n\t\t\t// when `content` is text and `duration` is `-1`.\r\n\t\t\tclose: PropTypes.bool\r\n\t\t}),\r\n\r\n\t\t// // \"Snack\" showing CSS animation duration.\r\n\t\t// // Is 225 milliseconds by default.\r\n\t\t// showAnimationDuration : PropTypes.number.isRequired,\r\n\r\n\t\t// \"Snack\" hiding CSS animation duration.\r\n\t\t// Is 195 milliseconds by default.\r\n\t\thideAnimationDuration : PropTypes.number.isRequired,\r\n\r\n\t\t// The total display duration (in milliseconds) of a snack\r\n\t\t// is `minTime + message.length * lengthTimeFactor`\r\n\t\tminTime          : PropTypes.number.isRequired,\r\n\t\tlengthTimeFactor : PropTypes.number.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// showAnimationDuration : 225,\r\n\t\thideAnimationDuration : 195,\r\n\t\tminTime : 1200,\r\n\t\tlengthTimeFactor : 60\r\n\t}\r\n\r\n\tstate = {}\r\n\r\n\tstatus = 'idle'\r\n\tqueue = []\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.auto_hide_timer)\r\n\t\tclearTimeout(this.show_next_snack_timeout)\r\n\t\tclearTimeout(this.show_snack_timeout)\r\n\t}\r\n\r\n\treceiveNewValue(prevProps)\r\n\t{\r\n\t\tconst { value } = this.props\r\n\r\n\t\t// If `value` has changed then push it to the queue.\r\n\t\tif (value && value !== prevProps.value)\r\n\t\t{\r\n\t\t\t// Add the notification to the queue\r\n\t\t\tthis.push(value)\r\n\t\t}\r\n\t}\r\n\r\n\t// Adds a notification to the queue\r\n\tpush(newValue)\r\n\t{\r\n\t\t// Add the notification to the queue\r\n\t\tthis.queue.push(newValue)\r\n\t\tthis.setState({\r\n\t\t\tqueueSize: this.queue.length\r\n\t\t})\r\n\t\t// If the notification queue was empty\r\n\t\t// then kick-start it.\r\n\t\tif (this.status === 'idle') {\r\n\t\t\tthis.next()\r\n\t\t}\r\n\t}\r\n\r\n\t// Displays the next notification in the queue\r\n\tnext = () =>\r\n\t{\r\n\t\tconst {\r\n\t\t\tminTime,\r\n\t\t\tlengthTimeFactor\r\n\t\t} = this.props\r\n\r\n\t\t// Get the next notification from the queue\r\n\t\t// (will be `undefined` if the queue is empty)\r\n\t\tconst value = this.queue.shift()\r\n\r\n\t\t// Reset the notification display\r\n\t\tthis.setState({\r\n\t\t\tvalue,\r\n\t\t\tqueueSize: this.queue.length,\r\n\t\t\theight: undefined,\r\n\t\t\t// wide: undefined,\r\n\t\t\thiding: false\r\n\t\t})\r\n\r\n\t\t// If the queue is empty, then just exit\r\n\t\tif (!value) {\r\n\t\t\tthis.status = 'idle'\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.status = 'active'\r\n\r\n\t\t// `state.show` will be set to `true` later,\r\n\t\t// when the height of the element is measured\r\n\t\t// (which is after it renders)\r\n\r\n\t\tif (value.duration === -1) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// The total display duration (in milliseconds) of a snack\r\n\t\t// is `minTime + message.length * lengthTimeFactor`\r\n\t\tconst length = typeof value.content === 'string' ? value.content.length : value.length || 0\r\n\t\tconst duration = value.duration || (minTime + length * lengthTimeFactor)\r\n\r\n\t\t// Hide the notification after it expires.\r\n\t\tif (window.rruiCollapseOnFocusOut !== false) {\r\n\t\t\tthis.auto_hide_timer = setTimeout(this.hide, duration)\r\n\t\t}\r\n\t}\r\n\r\n\thide = () =>\r\n\t{\r\n\t\tconst { hideAnimationDuration } = this.props\r\n\r\n\t\t// Start the hiding animation for the notification\r\n\t\tthis.setState({ show: false, hiding: true })\r\n\r\n\t\t// Display the next notification\r\n\t\t// after the currently being hidden one\r\n\t\t// finishes its hiding animation.\r\n\t\tthis.show_next_snack_timeout = setTimeout(this.next, hideAnimationDuration)\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps)\r\n\t{\r\n\t\tlet { height, value } = this.state\r\n\r\n\t\t// If `value` got updated then push it to the list of `queue`.\r\n\t\tthis.receiveNewValue(prevProps)\r\n\r\n\t\t// The notification DOM element has just been rendered\r\n\t\t// which means its dimensions are set by now.\r\n\t\t// Calculate the notification container DOM element height\r\n\t\t// so that the slide-from-bottom animation knows\r\n\t\t// its target Y-position for the CSS `translate` transform.\r\n\t\tif (height === undefined && value)\r\n\t\t{\r\n\t\t\theight = this.snackbar.offsetHeight\r\n\t\t\t// const wide = this.snackbar.offsetWidth === document.documentElement.clientWidth\r\n\t\t\tconst marginBottom = parseInt(getComputedStyle(this.container).marginBottom)\r\n\t\t\tconst anti_lag_timeout = 100 // Otherwise it would jump to fully shown in Chrome when there's a queue of snacks waiting to be shown\r\n\t\t\tthis.setState({\r\n\t\t\t\theight,\r\n\t\t\t\t// wide,\r\n\t\t\t\tmarginBottom\r\n\t\t\t}, () => {\r\n\t\t\t\tthis.show_snack_timeout = setTimeout(() => this.setState({ show: true }), anti_lag_timeout)\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tstoreContainerNode = (node) => this.container = node\r\n\tstoreSnackbarNode  = (node) => this.snackbar = node\r\n\r\n\trenderContent(value)\r\n\t{\r\n\t\tif (value.component) {\r\n\t\t\treturn value.component({ ...value.props, hide: this.hide })\r\n\t\t}\r\n\t\treturn null\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst {\r\n\t\t\ttype\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tshow,\r\n\t\t\tvalue,\r\n\t\t\theight,\r\n\t\t\t// wide,\r\n\t\t\tmarginBottom,\r\n\t\t\thiding,\r\n\t\t\tqueueSize\r\n\t\t} = this.state\r\n\r\n\t\tconst containerStyle = {}\r\n\r\n\t\tif (!show) {\r\n\t\t\t// If no snack is being shown,\r\n\t\t\t// or if a snack is about to be shown,\r\n\t\t\t// then shift it under the screen's bottom border\r\n\t\t\t// to show the slide-from-bottom animation at the next step.\r\n\t\t\tif (height !== undefined) {\r\n\t\t\t\tcontainerStyle.transform = `translateY(${height + marginBottom}px)`\r\n\t\t\t}\r\n\t\t\tif (!hiding) {\r\n\t\t\t\tcontainerStyle.transition = 'none'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst showCloseButton = value && (value.close || (typeof value.content === 'string' && value.duration === -1))\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tref={ this.storeContainerNode }\r\n\t\t\t\tstyle={ containerStyle }\r\n\t\t\t\tclassName={ classNames('rrui__snackbar__container',\r\n\t\t\t\t{\r\n\t\t\t\t\t'rrui__snackbar__container--hidden' : !show,\r\n\t\t\t\t\t// 'rrui__snackbar__container--wide' : wide\r\n\t\t\t\t}) }>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={ this.storeSnackbarNode }\r\n\t\t\t\t\tclassName={ classNames('rrui__snackbar', value && value.type && `rrui__snackbar--${value.type}`) }>\r\n\r\n\t\t\t\t\t<p className=\"rrui__snackbar__text\">\r\n\t\t\t\t\t\t{ value && (value.content !== undefined ? value.content : this.renderContent(value)) }\r\n\t\t\t\t\t</p>\r\n\r\n\t\t\t\t\t{(value && value.action || showCloseButton) &&\r\n\t\t\t\t\t\t<div className=\"rrui__snackbar__actions\">\r\n\t\t\t\t\t\t\t{value && value.action &&\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\tonClick={value.action.onClick}\r\n\t\t\t\t\t\t\t\t\tclass=\"rrui__snackbar__action rrui__button-reset\">\r\n\t\t\t\t\t\t\t\t\t{value.action.title}\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t{showCloseButton &&\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\tonClick={this.hide}\r\n\t\t\t\t\t\t\t\t\tclassName=\"rrui__snackbar__close rrui__button-reset\">\r\n\t\t\t\t\t\t\t\t\t<Close/>\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* value && value.duration === -1 && */}\r\n\t\t\t\t\t{queueSize > 0 &&\r\n\t\t\t\t\t\t<div className=\"rrui__snackbar__count\">\r\n\t\t\t\t\t\t\t{queueSize + 1}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction Close() {\r\n\treturn (\r\n\t\t<svg className=\"rrui__snackbar__close-icon\" viewBox=\"0 0 100 100\">\r\n\t\t\t<line stroke=\"currentColor\" strokeWidth=\"10\" x1=\"2\" y1=\"2\" x2=\"98\" y2=\"98\"/>\r\n\t\t\t<line stroke=\"currentColor\" strokeWidth=\"10\" x1=\"2\" y1=\"98\" x2=\"98\" y2=\"2\"/>\r\n\t\t</svg>\r\n\t)\r\n}"]}