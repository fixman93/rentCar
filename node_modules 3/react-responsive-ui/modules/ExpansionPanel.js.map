{"version":3,"sources":["../source/ExpansionPanel.js"],"names":["DownArrow","props","ExpansionPanel","state","height","isExpanded","undefined","content","toggle","expand","onToggle","clearTimeout","resetHeightTimer","setState","expandedHeight","current","scrollHeight","prevProps","prevState","expandContentAnimationDuration","setTimeout","title","disabled","ToggleIcon","toggleIcon","toggleIconPlacement","style","className","children","HEADING_STYLE","Component","propTypes","string","isRequired","bool","func","oneOfType","oneOf","number","object","defaultProps","margin"],"mappings":"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","file":"ExpansionPanel.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport createRef from 'react-create-ref'\r\nimport classNames from 'classnames'\r\n\r\nconst DownArrow = (props) => (\r\n\t<svg viewBox=\"0 0 12 7\" {...props}>\r\n\t\t<g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\r\n\t\t\t<path fill=\"currentColor\" d=\"M0.776785714,0 C0.995536808,0 1.17633857,0.0761808302 1.31919643,0.228544776 L6,4.93003731 L10.6808036,0.228544776 C10.8236614,0.0805340858 11.0044632,0.00652985075 11.2232143,0.00652985075 C11.4419654,0.00652985075 11.6227671,0.0805340858 11.765625,0.228544776 C11.9218758,0.380908722 12,0.568095905 12,0.79011194 C12,1.01648123 11.9218758,1.20584501 11.765625,1.35820896 L6.26116071,6.88899254 C6.18973179,6.96299788 6.10267908,7 6,7 C5.89732092,7 5.81026821,6.96299788 5.73883929,6.88899254 L0.234375,1.35820896 C0.0781242187,1.20149175 0,1.01321627 0,0.793376866 C0,0.573537458 0.0781242187,0.385261978 0.234375,0.228544776 C0.381697165,0.0761808302 0.562498929,0 0.776785714,0 Z\"/>\r\n\t\t</g>\r\n\t</svg>\r\n)\r\n\r\nexport default class ExpansionPanel extends React.Component {\r\n\tstatic propTypes = {\r\n\t\ttitle: PropTypes.string.isRequired,\r\n\t\tdisabled: PropTypes.bool,\r\n\t\t// `isExpanded` can be used for manual control.\r\n\t\t// For example, when there's a group of expansion panels\r\n\t\t// and only one of them should be expanded at any given time.\r\n\t\tisExpanded: PropTypes.bool,\r\n\t\tonToggle: PropTypes.func,\r\n\t\ttoggleIcon: PropTypes.oneOfType([\r\n\t\t\tPropTypes.func,\r\n\t\t\tPropTypes.bool\r\n\t\t]).isRequired,\r\n\t\ttoggleIconPlacement: PropTypes.oneOf(['start', 'end']).isRequired,\r\n\t\texpandContentAnimationDuration: PropTypes.number.isRequired,\r\n\t\tstyle: PropTypes.object,\r\n\t\tclassName: PropTypes.string\r\n\t}\r\n\r\n\tstatic defaultProps = {\r\n\t\ttoggleIcon: DownArrow,\r\n\t\ttoggleIconPlacement: 'end',\r\n\t\texpandContentAnimationDuration: 300\r\n\t}\r\n\r\n\tstate = {\r\n\t\theight: this.props.isExpanded ? undefined : 0,\r\n\t\tisExpanded: this.props.isExpanded\r\n\t}\r\n\r\n\tcontent = createRef()\r\n\r\n\ttoggle = (expand = !this.state.isExpanded) => {\r\n\t\tconst { onToggle } = this.props\r\n\t\tif (onToggle) {\r\n\t\t\tonToggle(expand)\r\n\t\t}\r\n\t\tclearTimeout(this.resetHeightTimer)\r\n\t\tthis.setState((state) => {\r\n\t\t\tconst isExpanded = expand\r\n\t\t\treturn {\r\n\t\t\t\tisExpanded,\r\n\t\t\t\theight: isExpanded ? null : undefined,\r\n\t\t\t\texpandedHeight: isExpanded ? null : this.content.current.scrollHeight\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tonToggle = () => this.toggle()\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { expandContentAnimationDuration } = this.props\r\n\t\tif (this.props.isExpanded !== prevProps.isExpanded) {\r\n\t\t\tthis.toggle(this.props.isExpanded)\r\n\t\t}\r\n\t\tif (this.state.isExpanded !== prevState.isExpanded) {\r\n\t\t\t// If `<ExpansionPanel/>` is being expanded then measure its content height.\r\n\t\t\tif (this.state.height === null) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\theight: this.content.current.scrollHeight\r\n\t\t\t\t})\r\n\t\t\t\tthis.resetHeightTimer = setTimeout(() => {\r\n\t\t\t\t\tthis.setState((state) => ({\r\n\t\t\t\t\t\theight: undefined\r\n\t\t\t\t\t}))\r\n\t\t\t\t}, expandContentAnimationDuration)\r\n\t\t\t} else {\r\n\t\t\t\t// Added a timeout here so that React doesn't\r\n\t\t\t\t// optimize two `setState()`s into a single one.\r\n\t\t\t\t// Added a `10` timeout here so that the browser doesn't\r\n\t\t\t\t// optimize two `setState()`s into a single one.\r\n\t\t\t\tthis.resetHeightTimer = setTimeout(() => {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\theight: 0\r\n\t\t\t\t\t})\r\n\t\t\t\t}, 20)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearTimeout(this.resetHeightTimer)\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\ttitle,\r\n\t\t\tdisabled,\r\n\t\t\ttoggleIcon: ToggleIcon,\r\n\t\t\ttoggleIconPlacement,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tchildren\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tisExpanded,\r\n\t\t\theight,\r\n\t\t\texpandedHeight\r\n\t\t} = this.state\r\n\r\n\t\t// There was a possibility of using `<details/>`/`<summary/>` elements here\r\n\t\t// but `<summary/>` can only contain any valid paragraph content\r\n\t\t// which means it can't contain lists, divs, paragraphs, etc.\r\n\r\n\t\treturn (\r\n\t\t\t<section\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'rrui__expansion-panel')}>\r\n\t\t\t\t<header style={HEADING_STYLE}>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tonClick={this.onToggle}\r\n\t\t\t\t\t\taria-expanded={isExpanded ? true : false}\r\n\t\t\t\t\t\taria-label={this.props['aria-label']}\r\n\t\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\t\tclassName={classNames('rrui__button-reset', 'rrui__outline', 'rrui__expansion-panel__header', {\r\n\t\t\t\t\t\t\t// The explicit \"modifier\" CSS classes on \"header\" are\r\n\t\t\t\t\t\t\t// to support <Collapsible/>s inside <Collapsible/>s.\r\n\t\t\t\t\t\t\t'rrui__expansion-panel__header--expanded': isExpanded,\r\n\t\t\t\t\t\t\t'rrui__expansion-panel__header--toggle-icon-start': ToggleIcon && toggleIconPlacement === 'start',\r\n\t\t\t\t\t\t\t'rrui__expansion-panel__header--toggle-icon-end': ToggleIcon && toggleIconPlacement === 'end'\r\n\t\t\t\t\t\t})}>\r\n\t\t\t\t\t\t{ToggleIcon && toggleIconPlacement === 'start' &&\r\n\t\t\t\t\t\t\t<ToggleIcon\r\n\t\t\t\t\t\t\t\taria-hidden\r\n\t\t\t\t\t\t\t\tclassName={classNames('rrui__expansion-panel__icon', 'rrui__expansion-panel__icon--start', {\r\n\t\t\t\t\t\t\t\t\t// The explicit \"modifier\" CSS class is to\r\n\t\t\t\t\t\t\t\t\t// support <Collapsible/>s inside <Collapsible/>s.\r\n\t\t\t\t\t\t\t\t\t'rrui__expansion-panel__icon--expanded': isExpanded\r\n\t\t\t\t\t\t\t\t})}/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<span className=\"rrui__expansion-panel__heading\">\r\n\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t{ToggleIcon && toggleIconPlacement === 'end' &&\r\n\t\t\t\t\t\t\t<ToggleIcon\r\n\t\t\t\t\t\t\t\taria-hidden\r\n\t\t\t\t\t\t\t\tclassName={classNames('rrui__expansion-panel__icon', 'rrui__expansion-panel__icon--end', {\r\n\t\t\t\t\t\t\t\t\t// The explicit \"modifier\" CSS class is to\r\n\t\t\t\t\t\t\t\t\t// support <Collapsible/>s inside <Collapsible/>s.\r\n\t\t\t\t\t\t\t\t\t'rrui__expansion-panel__icon--expanded': isExpanded\r\n\t\t\t\t\t\t\t\t})}/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</header>\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={this.content}\r\n\t\t\t\t\taria-hidden={!isExpanded}\r\n\t\t\t\t\tstyle={{ height: isExpanded ? (height === null ? 0 : (height === undefined ? 'auto' : `${height}px`)) : (height === undefined ? expandedHeight : 0) }}\r\n\t\t\t\t\tclassName=\"rrui__expansion-panel__content-wrapper\">\r\n\t\t\t\t\t<div className=\"rrui__expansion-panel__content\">\r\n\t\t\t\t\t\t{children}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst HEADING_STYLE = {\r\n\tmargin: 0\r\n}"]}