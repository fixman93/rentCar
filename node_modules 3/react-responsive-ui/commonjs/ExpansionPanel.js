'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactCreateRef = require('react-create-ref');

var _reactCreateRef2 = _interopRequireDefault(_reactCreateRef);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DownArrow = function DownArrow(props) {
	return _react2.default.createElement(
		'svg',
		_extends({ viewBox: '0 0 12 7' }, props),
		_react2.default.createElement(
			'g',
			{ stroke: 'none', 'stroke-width': '1', fill: 'none', 'fill-rule': 'evenodd' },
			_react2.default.createElement('path', { fill: 'currentColor', d: 'M0.776785714,0 C0.995536808,0 1.17633857,0.0761808302 1.31919643,0.228544776 L6,4.93003731 L10.6808036,0.228544776 C10.8236614,0.0805340858 11.0044632,0.00652985075 11.2232143,0.00652985075 C11.4419654,0.00652985075 11.6227671,0.0805340858 11.765625,0.228544776 C11.9218758,0.380908722 12,0.568095905 12,0.79011194 C12,1.01648123 11.9218758,1.20584501 11.765625,1.35820896 L6.26116071,6.88899254 C6.18973179,6.96299788 6.10267908,7 6,7 C5.89732092,7 5.81026821,6.96299788 5.73883929,6.88899254 L0.234375,1.35820896 C0.0781242187,1.20149175 0,1.01321627 0,0.793376866 C0,0.573537458 0.0781242187,0.385261978 0.234375,0.228544776 C0.381697165,0.0761808302 0.562498929,0 0.776785714,0 Z' })
		)
	);
};

var ExpansionPanel = (_temp2 = _class = function (_React$Component) {
	_inherits(ExpansionPanel, _React$Component);

	function ExpansionPanel() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ExpansionPanel);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpansionPanel.__proto__ || Object.getPrototypeOf(ExpansionPanel)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			height: _this.props.isExpanded ? undefined : 0,
			isExpanded: _this.props.isExpanded
		}, _this.content = (0, _reactCreateRef2.default)(), _this.toggle = function () {
			var expand = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !_this.state.isExpanded;
			var onToggle = _this.props.onToggle;

			if (onToggle) {
				onToggle(expand);
			}
			clearTimeout(_this.resetHeightTimer);
			_this.setState(function (state) {
				var isExpanded = expand;
				return {
					isExpanded: isExpanded,
					height: isExpanded ? null : undefined,
					expandedHeight: isExpanded ? null : _this.content.current.scrollHeight
				};
			});
		}, _this.onToggle = function () {
			return _this.toggle();
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ExpansionPanel, [{
		key: 'componentDidUpdate',
		value: function componentDidUpdate(prevProps, prevState) {
			var _this2 = this;

			var expandContentAnimationDuration = this.props.expandContentAnimationDuration;

			if (this.props.isExpanded !== prevProps.isExpanded) {
				this.toggle(this.props.isExpanded);
			}
			if (this.state.isExpanded !== prevState.isExpanded) {
				// If `<ExpansionPanel/>` is being expanded then measure its content height.
				if (this.state.height === null) {
					this.setState({
						height: this.content.current.scrollHeight
					});
					this.resetHeightTimer = setTimeout(function () {
						_this2.setState(function (state) {
							return {
								height: undefined
							};
						});
					}, expandContentAnimationDuration);
				} else {
					// Added a timeout here so that React doesn't
					// optimize two `setState()`s into a single one.
					// Added a `10` timeout here so that the browser doesn't
					// optimize two `setState()`s into a single one.
					this.resetHeightTimer = setTimeout(function () {
						_this2.setState({
							height: 0
						});
					}, 20);
				}
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this.resetHeightTimer);
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    title = _props.title,
			    disabled = _props.disabled,
			    ToggleIcon = _props.toggleIcon,
			    toggleIconPlacement = _props.toggleIconPlacement,
			    style = _props.style,
			    className = _props.className,
			    children = _props.children;
			var _state = this.state,
			    isExpanded = _state.isExpanded,
			    height = _state.height,
			    expandedHeight = _state.expandedHeight;

			// There was a possibility of using `<details/>`/`<summary/>` elements here
			// but `<summary/>` can only contain any valid paragraph content
			// which means it can't contain lists, divs, paragraphs, etc.

			return _react2.default.createElement(
				'section',
				{
					style: style,
					className: (0, _classnames2.default)(className, 'rrui__expansion-panel') },
				_react2.default.createElement(
					'header',
					{ style: HEADING_STYLE },
					_react2.default.createElement(
						'button',
						{
							type: 'button',
							onClick: this.onToggle,
							'aria-expanded': isExpanded ? true : false,
							'aria-label': this.props['aria-label'],
							disabled: disabled,
							className: (0, _classnames2.default)('rrui__button-reset', 'rrui__outline', 'rrui__expansion-panel__header', {
								// The explicit "modifier" CSS classes on "header" are
								// to support <Collapsible/>s inside <Collapsible/>s.
								'rrui__expansion-panel__header--expanded': isExpanded,
								'rrui__expansion-panel__header--toggle-icon-start': ToggleIcon && toggleIconPlacement === 'start',
								'rrui__expansion-panel__header--toggle-icon-end': ToggleIcon && toggleIconPlacement === 'end'
							}) },
						ToggleIcon && toggleIconPlacement === 'start' && _react2.default.createElement(ToggleIcon, {
							'aria-hidden': true,
							className: (0, _classnames2.default)('rrui__expansion-panel__icon', 'rrui__expansion-panel__icon--start', {
								// The explicit "modifier" CSS class is to
								// support <Collapsible/>s inside <Collapsible/>s.
								'rrui__expansion-panel__icon--expanded': isExpanded
							}) }),
						_react2.default.createElement(
							'span',
							{ className: 'rrui__expansion-panel__heading' },
							title
						),
						ToggleIcon && toggleIconPlacement === 'end' && _react2.default.createElement(ToggleIcon, {
							'aria-hidden': true,
							className: (0, _classnames2.default)('rrui__expansion-panel__icon', 'rrui__expansion-panel__icon--end', {
								// The explicit "modifier" CSS class is to
								// support <Collapsible/>s inside <Collapsible/>s.
								'rrui__expansion-panel__icon--expanded': isExpanded
							}) })
					)
				),
				_react2.default.createElement(
					'div',
					{
						ref: this.content,
						'aria-hidden': !isExpanded,
						style: { height: isExpanded ? height === null ? 0 : height === undefined ? 'auto' : height + 'px' : height === undefined ? expandedHeight : 0 },
						className: 'rrui__expansion-panel__content-wrapper' },
					_react2.default.createElement(
						'div',
						{ className: 'rrui__expansion-panel__content' },
						children
					)
				)
			);
		}
	}]);

	return ExpansionPanel;
}(_react2.default.Component), _class.propTypes = {
	title: _propTypes2.default.string.isRequired,
	disabled: _propTypes2.default.bool,
	// `isExpanded` can be used for manual control.
	// For example, when there's a group of expansion panels
	// and only one of them should be expanded at any given time.
	isExpanded: _propTypes2.default.bool,
	onToggle: _propTypes2.default.func,
	toggleIcon: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.bool]).isRequired,
	toggleIconPlacement: _propTypes2.default.oneOf(['start', 'end']).isRequired,
	expandContentAnimationDuration: _propTypes2.default.number.isRequired,
	style: _propTypes2.default.object,
	className: _propTypes2.default.string
}, _class.defaultProps = {
	toggleIcon: DownArrow,
	toggleIconPlacement: 'end',
	expandContentAnimationDuration: 300
}, _temp2);
exports.default = ExpansionPanel;


var HEADING_STYLE = {
	margin: 0
};
//# sourceMappingURL=ExpansionPanel.js.map