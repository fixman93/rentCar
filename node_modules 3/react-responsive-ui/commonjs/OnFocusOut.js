'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _focus = require('./utility/focus');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OnFocusOut = (_temp2 = _class = function (_React$Component) {
	_inherits(OnFocusOut, _React$Component);

	function OnFocusOut() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, OnFocusOut);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = OnFocusOut.__proto__ || Object.getPrototypeOf(OnFocusOut)).call.apply(_ref, [this].concat(args))), _this), _this.onBlur = function (event) {
			var _this$props = _this.props,
			    getContainerNode = _this$props.getContainerNode,
			    getTogglerNode = _this$props.getTogglerNode,
			    onFocusOut = _this$props.onFocusOut;


			if (getContainerNode()) {
				clearTimeout(_this.blurTimer);
				var result = (0, _focus.onBlur)(event, onFocusOut, getContainerNode, getTogglerNode);
				if (typeof result === 'number') {
					_this.blurTimer = result;
				}
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(OnFocusOut, [{
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this.blurTimer);
		}
	}, {
		key: 'render',
		value: function render() {
			var children = this.props.children;

			return children;
		}
	}]);

	return OnFocusOut;
}(_react2.default.Component), _class.propTypes = {
	onFocusOut: _propTypes2.default.func.isRequired,
	getTogglerNode: _propTypes2.default.func,
	getContainerNode: _propTypes2.default.func.isRequired
}, _temp2);
exports.default = OnFocusOut;
//# sourceMappingURL=OnFocusOut.js.map