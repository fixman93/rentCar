'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// The original idea is by `what-input` library.
// https://github.com/ten1seven/what-input
//
// Still, seems that "Screen Readers" emit all sorts of
// pointer events even when using only keyboard navigation.
// https://patrickhlauke.github.io/touch/tests/results/#desktop-assistive-technology-events
//
// So, listening to pointer events and deciding on the input method
// is not a 100%-formally-correct technique (though it does make perfect sense).
// So, for having one's ass covered it's not considered a reliable strategy.
//
// There's a script listening for `mousedown` events on each button/link/input
// which then removes the outline (and adds it when it detects a keyboard event).
// https://github.com/lindsayevans/outline.js

var KeyboardNavigationListener = function (_React$Component) {
	_inherits(KeyboardNavigationListener, _React$Component);

	function KeyboardNavigationListener() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, KeyboardNavigationListener);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = KeyboardNavigationListener.__proto__ || Object.getPrototypeOf(KeyboardNavigationListener)).call.apply(_ref, [this].concat(args))), _this), _this.onKeyDown = function (event) {
			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}
			switch (event.keyCode) {
				// "Tab".
				case 9:
					if (!_this.tabbing) {
						_this.tabbing = true;
						document.body.classList.add('rrui__tabbing');
					}
					return;
			}
		}, _this.onPointerEvent = function (event) {
			if (_this.tabbing) {
				_this.tabbing = false;
				document.body.classList.remove('rrui__tabbing');
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(KeyboardNavigationListener, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			window.addEventListener('keydown', this.onKeyDown);
			// "Pointer" events are mouse/stylus/pen/touch events.
			// https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events
			if (window.PointerEvent) {
				window.addEventListener('pointermove', this.onPointerEvent);
				window.addEventListener('pointerdown', this.onPointerEvent);
			} else {
				// Mouse events.
				window.addEventListener('mousemove', this.onPointerEvent);
				window.addEventListener('mousedown', this.onPointerEvent);
				// Touch events.
				if ('ontouchstart' in window) {
					window.addEventListener('touchstart', this.onPointerEvent);
					window.addEventListener('touchend', this.onPointerEvent);
				}
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			window.removeEventListener('keydown', this.onKeyDown);
			// "Pointer" events are mouse/stylus/pen/touch events.
			// https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events
			if (window.PointerEvent) {
				window.removeEventListener('pointermove', this.onPointerEvent);
				window.removeEventListener('pointerdown', this.onPointerEvent);
			} else {
				// Mouse events.
				window.removeEventListener('mousemove', this.onPointerEvent);
				window.removeEventListener('mousedown', this.onPointerEvent);
				// Touch events.
				if ('ontouchstart' in window) {
					window.removeEventListener('touchstart', this.onPointerEvent);
					window.removeEventListener('touchend', this.onPointerEvent);
				}
			}
		}
	}, {
		key: 'render',
		value: function render() {
			return null;
		}
	}]);

	return KeyboardNavigationListener;
}(_react2.default.Component);

exports.default = KeyboardNavigationListener;
//# sourceMappingURL=KeyboardNavigationListener.js.map