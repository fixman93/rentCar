'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = exports.Context = undefined;

var _class2, _temp3;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactCreateRef = require('react-create-ref');

var _reactCreateRef2 = _interopRequireDefault(_reactCreateRef);

var _createReactContext = require('create-react-context');

var _createReactContext2 = _interopRequireDefault(_createReactContext);

var _PageAndMenu = require('./PageAndMenu');

var _OnFocusOut = require('./OnFocusOut');

var _OnFocusOut2 = _interopRequireDefault(_OnFocusOut);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Context = exports.Context = (0, _createReactContext2.default)();

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var ContextAwareSlideoutMenu = function (_PureComponent) {
	_inherits(ContextAwareSlideoutMenu, _PureComponent);

	function ContextAwareSlideoutMenu() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ContextAwareSlideoutMenu);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ContextAwareSlideoutMenu.__proto__ || Object.getPrototypeOf(ContextAwareSlideoutMenu)).call.apply(_ref, [this].concat(args))), _this), _this.slideOutMenu = (0, _reactCreateRef2.default)(), _this.show = function () {
			return _this.slideOutMenu.current.show();
		}, _this.hide = function () {
			return _this.slideOutMenu.current.hide();
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ContextAwareSlideoutMenu, [{
		key: 'render',
		value: function render() {
			var _this2 = this;

			return _react2.default.createElement(
				_PageAndMenu.Context.Consumer,
				null,
				function (context) {
					return _react2.default.createElement(SlideoutMenu, _extends({
						ref: _this2.slideOutMenu
					}, _this2.props, {
						registerMenu: context.registerMenu,
						toggleMenu: context.toggleMenu,
						getTogglerNode: context.getTogglerNode }));
				}
			);
		}
	}]);

	return ContextAwareSlideoutMenu;
}(PureComponent);

// const ContextAwareSlideoutMenu = (props) => (
// 	<PageAndMenuContext.Consumer>
// 		{context => (
// 			<SlideoutMenu
// 				{...props}
// 				registerMenu={context.registerMenu}
// 				toggleMenu={context.toggleMenu}/>
// 			)
// 		}
// 	</PageAndMenuContext.Consumer>
// )

// export default ContextAwareSlideoutMenu

// Swipeable feature example source code:
// https://github.com/mui-org/material-ui/blob/v1-beta/packages/material-ui/src/SwipeableDrawer/SwipeableDrawer.js

// A slideout menu.


exports.default = ContextAwareSlideoutMenu;
var SlideoutMenu = (_temp3 = _class2 = function (_PureComponent2) {
	_inherits(SlideoutMenu, _PureComponent2);

	function SlideoutMenu() {
		var _ref2;

		var _temp2, _this3, _ret2;

		_classCallCheck(this, SlideoutMenu);

		for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			args[_key2] = arguments[_key2];
		}

		return _ret2 = (_temp2 = (_this3 = _possibleConstructorReturn(this, (_ref2 = SlideoutMenu.__proto__ || Object.getPrototypeOf(SlideoutMenu)).call.apply(_ref2, [this].concat(args))), _this3), _this3.state = {
			// show: this.props.isOpen
			show: false
		}, _this3.container = (0, _reactCreateRef2.default)(), _this3.toggle = function (show, onAfterToggle) {
			var _this3$props = _this3.props,
			    onCollapse = _this3$props.onCollapse,
			    onExpand = _this3$props.onExpand;

			if (show === _this3.state.show) {
				return;
			}
			if (show === undefined) {
				show = !_this3.state.show;
			}
			if (show) {
				onExpand && onExpand();
			} else {
				onCollapse && onCollapse();
			}
			_this3.setState({ show: show }, onAfterToggle);
		}, _this3.hide = function () {
			var toggleMenu = _this3.props.toggleMenu;
			var show = _this3.state.show;


			if (show) {
				toggleMenu();
			}
		}, _this3.onKeyDown = function (event) {
			var toggleMenu = _this3.props.toggleMenu;

			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}
			switch (event.keyCode) {
				// Collapse on "Escape".
				case 27:
					event.preventDefault();
					return toggleMenu();
			}
		}, _this3.onBlur = function (event) {
			return _this3.onFocusOutRef.onBlur(event);
		}, _this3.storeOnFocusOutRef = function (ref) {
			return _this3.onFocusOutRef = ref;
		}, _this3.getContainerNode = function () {
			return _this3.container.current;
		}, _this3.onFocusOut = function () {
			var toggleMenu = _this3.props.toggleMenu;
			// `window.rruiCollapseOnFocusOut` can be used
			// for debugging expandable contents.

			if (window.rruiCollapseOnFocusOut !== false) {
				toggleMenu(false);
			}
		}, _temp2), _possibleConstructorReturn(_this3, _ret2);
	}

	_createClass(SlideoutMenu, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this4 = this;

			var _props = this.props,
			    registerMenu = _props.registerMenu,
			    menuRef = _props.menuRef;
			var show = this.state.show;


			this.unregister = registerMenu({
				hide: function hide() {
					return _this4.setState({ show: false });
				},
				toggle: this.toggle,
				isShown: function isShown() {
					return _this4.state.show;
				},
				element: function element() {
					return _this4.container.current;
				},
				menu: function menu() {
					return menuRef ? menuRef.current : _this4.container.current;
				}
			});

			// // Hide on `Back`/`Forward` navigation.
			// window.addEventListener('popstate', this.hide)
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			this.unregister();

			// window.removeEventListener('popstate', this.hide)
		}

		// componentDidUpdate(prevProps)
		// {
		// 	const { isOpen } = this.props

		// 	if (prevProps.isOpen && !isOpen) {
		// 		this.hide()
		// 	} else if (!prevProps.isOpen && isOpen) {
		// 		this.show()
		// 	}
		// }

	}, {
		key: 'render',
		value: function render() {
			var _props2 = this.props,
			    anchor = _props2.anchor,
			    fullscreen = _props2.fullscreen,
			    getTogglerNode = _props2.getTogglerNode,
			    className = _props2.className,
			    children = _props2.children,
			    menuRef = _props2.menuRef,
			    onExpand = _props2.onExpand,
			    onCollapse = _props2.onCollapse,
			    toggleMenu = _props2.toggleMenu,
			    registerMenu = _props2.registerMenu,
			    rest = _objectWithoutProperties(_props2, ['anchor', 'fullscreen', 'getTogglerNode', 'className', 'children', 'menuRef', 'onExpand', 'onCollapse', 'toggleMenu', 'registerMenu']);

			var show = this.state.show;

			// ARIA menu notes:
			// https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html

			// `tabIndex="-1"` is for calling `this.container.current.focus()`
			// when no `menuRef` is supplied.

			var element = _react2.default.createElement(
				'div',
				_extends({}, rest, {
					ref: this.container,
					'aria-hidden': !show,
					tabIndex: -1,
					onBlur: this.onBlur,
					onKeyDown: this.onKeyDown,
					className: (0, _classnames2.default)(className,
					/* Developers can define custom `:focus` style for the slideout menu. */
					/* (or better add `menuRef` property pointing to a component having `.focus()` method). */
					'rrui__outline', 'rrui__slideout-menu', {
						'rrui__slideout-menu--left': anchor === 'left',
						'rrui__slideout-menu--right': anchor === 'right',
						'rrui__slideout-menu--top': anchor === 'top',
						'rrui__slideout-menu--bottom': anchor === 'bottom',
						'rrui__slideout-menu--fullscreen': fullscreen,
						'rrui__slideout-menu--expanded': show
					}) }),
				children
			);

			return _react2.default.createElement(
				_OnFocusOut2.default,
				{
					ref: this.storeOnFocusOutRef,
					getContainerNode: this.getContainerNode,
					getTogglerNode: getTogglerNode,
					onFocusOut: this.onFocusOut },
				element
			);
		}
	}]);

	return SlideoutMenu;
}(PureComponent), _class2.propTypes = {
	anchor: _propTypes2.default.oneOf(['left', 'right', 'top', 'bottom']).isRequired,

	// isOpen : PropTypes.bool.isRequired,

	fullscreen: _propTypes2.default.bool.isRequired,

	// A result of `React.createRef()`.
	// Will be focused when the menu is opened.
	menuRef: _propTypes2.default.object,

	onCollapse: _propTypes2.default.func,
	onExpand: _propTypes2.default.func,

	toggleMenu: _propTypes2.default.func.isRequired,
	registerMenu: _propTypes2.default.func.isRequired,
	getTogglerNode: _propTypes2.default.func.isRequired,

	// CSS style object
	style: _propTypes2.default.object,

	// CSS class
	className: _propTypes2.default.string
}, _class2.defaultProps = {
	// isOpen : false,
	anchor: 'left',
	fullscreen: false
}, _temp3);
//# sourceMappingURL=SlideOutMenu.js.map