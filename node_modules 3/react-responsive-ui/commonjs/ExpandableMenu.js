'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ExpandableList = require('./ExpandableList');

var _ExpandableList2 = _interopRequireDefault(_ExpandableList);

var _List = require('./List');

var _List2 = _interopRequireDefault(_List);

var _Close = require('./Close');

var _Close2 = _interopRequireDefault(_Close);

var _focus = require('./utility/focus');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var ExpandableMenu = (_temp2 = _class = function (_PureComponent) {
	_inherits(ExpandableMenu, _PureComponent);

	function ExpandableMenu() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ExpandableMenu);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandableMenu.__proto__ || Object.getPrototypeOf(ExpandableMenu)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onExpand = function () {
			return _this.setState({ isExpanded: true });
		}, _this.onCollapse = function (_ref2) {
			var focusOut = _ref2.focusOut;

			if (!focusOut) {
				_this.focus();
			}
			_this.setState({ isExpanded: false });
		}, _this.focus = function () {
			return (0, _focus.focus)(_this.toggler || _this.togglerNode);
		}, _this.expand = function () {
			return _this.list.expand();
		}, _this.collapse = function () {
			return _this.list.collapse();
		}, _this.toggle = function () {
			return _this.list.toggle();
		}, _this.onFocusOut = function () {
			// `window.rruiCollapseOnFocusOut` can be used
			// for debugging expandable contents.
			if (window.rruiCollapseOnFocusOut !== false) {
				_this.collapse();
			}
		}, _this.storeListRef = function (ref) {
			return _this.list = ref;
		}, _this.storeTogglerRef = function (ref) {
			return _this.toggler = ref;
		}, _this.storeTogglerNode = function (node) {
			return _this.togglerNode = node;
		}, _this.getTogglerNode = function () {
			return _this.togglerNode;
		}, _this.onBlur = function (event) {
			return _this.list && _this.list.onBlur(event);
		}, _this.onClick = function (event) {
			var disabled = _this.props.disabled;


			if (!disabled) {
				_this.toggle();
			}
		}, _this.onKeyDown = function (event) {
			var disabled = _this.props.disabled;


			if (disabled) {
				return;
			}

			if (event.defaultPrevented) {
				return;
			}

			if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
				return;
			}

			switch (event.keyCode) {
				// "Up" arrow.
				// Select the previous item (if present).
				case 38:
				// "Down" arrow.
				// Select the next item (if present).
				case 40:
					return _this.list.onKeyDown(event);

				// "Enter".
				case 13:
					// Submit containing `<form/>`.
					// Expand otherwise.
					_this.expand();
					return event.preventDefault();
			}
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	// `this.toggler` is deprecated.


	// (legacy) (deprecated)
	// Is used to focus legacy togglers.


	// `this.togglerNode` is only used to determine
	// whether the focus is "inside" the component or "outside" of it.


	_createClass(ExpandableMenu, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    style = _props.style,
			    className = _props.className,
			    toggler = _props.toggler,
			    togglerAriaLabel = _props.togglerAriaLabel,
			    togglerAriaHasPopup = _props.togglerAriaHasPopup,
			    togglerClassName = _props.togglerClassName,
			    children = _props.children,
			    rest = _objectWithoutProperties(_props, ['style', 'className', 'toggler', 'togglerAriaLabel', 'togglerAriaHasPopup', 'togglerClassName', 'children']);

			var isExpanded = this.state.isExpanded;


			var menuToggler = void 0;
			var menuItems = void 0;

			if (toggler) {
				menuItems = children;
				var togglerElement = _react2.default.createElement(toggler);
				menuToggler = _react2.default.createElement(
					'button',
					{
						ref: this.storeTogglerNode,
						onClick: this.onClick,
						onKeyDown: this.onKeyDown,
						onBlur: this.onBlur,
						'aria-haspopup': togglerAriaHasPopup,
						'aria-label': togglerAriaLabel,
						'aria-expanded': isExpanded ? true : false,
						className: togglerClassName },
					togglerElement
				);
			} else {
				menuItems = _react2.default.Children.toArray(children);
				menuToggler = menuItems.shift();
				menuToggler = _react2.default.createElement(
					'div',
					{
						ref: this.storeTogglerNode,
						onClick: this.onClick,
						onKeyDown: this.onKeyDown,
						onBlur: this.onBlur },
					_react2.default.cloneElement(menuToggler, { ref: this.storeTogglerRef })
				);
			}

			return _react2.default.createElement(
				'div',
				{
					style: style,
					className: (0, _classnames2.default)('rrui__menu', className) },
				menuToggler,
				_react2.default.createElement(
					_ExpandableList2.default,
					_extends({}, rest, {
						ref: this.storeListRef,
						'aria-label': this.props['aria-label'],
						scrollMaxItems: 0,
						onCollapse: this.onCollapse,
						onExpand: this.onExpand,
						onFocusOut: this.onFocusOut,
						getTogglerNode: this.getTogglerNode,
						focusSelectedItem: false,
						className: 'rrui__shadow' }),
					menuItems
				)
			);
		}
	}]);

	return ExpandableMenu;
}(PureComponent), _class.propTypes = {
	// Component CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object,

	// `aria-label` for the "Close" button
	// (which is an "x" visible in fullscreen mode).
	closeLabel: _propTypes2.default.string,

	// The "x" button icon that closes the `<Select/>`
	// in fullscreen mode on mobile devices.
	closeButtonIcon: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.oneOf([false])]).isRequired,

	toggler: _propTypes2.default.func,
	togglerAriaLabel: _propTypes2.default.string,
	togglerAriaHasPopup: _propTypes2.default.string,
	togglerClassName: _propTypes2.default.string
}, _class.defaultProps = {
	// The "x" button icon that closes the `<Select/>`
	// in fullscreen mode on mobile devices.
	closeButtonIcon: _Close.CloseIcon
}, _temp2);
exports.default = ExpandableMenu;
//# sourceMappingURL=ExpandableMenu.js.map