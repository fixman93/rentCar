{"version":3,"sources":["../source/util.js"],"names":["matchesEntirely","text","regular_expression","RegExp","test","mergeArrays","a","b","merged","slice","element","indexOf","push","sort"],"mappings":"AAAA;AACA;AACA,OAAO,SAASA,eAAT,GAAwD;AAAA,KAA/BC,IAA+B,uEAAxB,EAAwB;AAAA,KAApBC,kBAAoB;;AAC9D,QAAO,IAAIC,MAAJ,CAAW,SAASD,kBAAT,GAA8B,IAAzC,EAA+CE,IAA/C,CAAoDH,IAApD,CAAP;AACA;;AAED;;;;;;AAMA,OAAO,SAASI,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AACjC,KAAMC,SAASF,EAAEG,KAAF,EAAf;;AAEA,sBAAsBF,CAAtB,kHAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MAAdG,OAAc;;AACxB,MAAIJ,EAAEK,OAAF,CAAUD,OAAV,IAAqB,CAAzB,EAA4B;AAC3BF,UAAOI,IAAP,CAAYF,OAAZ;AACA;AACD;;AAED,QAAOF,OAAOK,IAAP,CAAY,UAACP,CAAD,EAAIC,CAAJ;AAAA,SAAUD,IAAIC,CAAd;AAAA,EAAZ,CAAP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"util.js","sourcesContent":["// Checks whether the entire input sequence can be matched\r\n// against the regular expression.\r\nexport function matchesEntirely(text = '', regular_expression) {\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}"]}