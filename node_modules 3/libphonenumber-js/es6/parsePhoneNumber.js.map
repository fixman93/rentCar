{"version":3,"sources":["../source/parsePhoneNumber.js"],"names":["parsePhoneNumber_","parsePhoneNumber","normalizeArguments","arguments","text","options","metadata","args","Array","prototype","slice","call","arg_1","arg_2","arg_3","arg_4","TypeError","undefined","defaultCountry","isObject","Error","_"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA,2BACNC,mBAAmBC,SAAnB,CADM;AAAA,KAClCC,IADkC,uBAClCA,IADkC;AAAA,KAC5BC,OAD4B,uBAC5BA,OAD4B;AAAA,KACnBC,QADmB,uBACnBA,QADmB;;AAE1C,QAAON,kBAAkBI,IAAlB,EAAwBC,OAAxB,EAAiCC,QAAjC,CAAP;AACA;;AAED,OAAO,SAASJ,kBAAT,CAA4BK,IAA5B,EACP;AAAA,6BACsCC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,CADtC;AAAA;AAAA,KACQK,KADR;AAAA,KACeC,KADf;AAAA,KACsBC,KADtB;AAAA,KAC6BC,KAD7B;;AAGC,KAAIX,aAAJ;AACA,KAAIC,gBAAJ;AACA,KAAIC,iBAAJ;;AAEA;AACA;AACA,KAAI,OAAOM,KAAP,KAAiB,QAArB,EAA+B;AAC9BR,SAAOQ,KAAP;AACA,EAFD,MAGK,MAAM,IAAII,SAAJ,CAAc,sCAAd,CAAN;;AAEL;AACA;AACA,KAAI,CAACH,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EACA;AACC,MAAIE,KAAJ,EAAW;AACVV,aAAUS,KAAV;AACAR,cAAWS,KAAX;AACA,GAHD,MAGO;AACNV,aAAUY,SAAV;AACAX,cAAWQ,KAAX;AACA;;AAED,MAAID,KAAJ,EAAW;AACVR,wBAAYa,gBAAgBL,KAA5B,IAAsCR,OAAtC;AACA;AACD;AACD;AACA;AAfA,MAgBK,IAAIc,SAASN,KAAT,CAAJ,EACL;AACC,OAAIC,KAAJ,EAAW;AACVT,cAAWQ,KAAX;AACAP,eAAWQ,KAAX;AACA,IAHD,MAGO;AACNR,eAAWO,KAAX;AACA;AACD,GARI,MASA,MAAM,IAAIO,KAAJ,+BAAsCP,KAAtC,CAAN;;AAEL,QAAO;AACNT,YADM;AAENC,kBAFM;AAGNC;AAHM,EAAP;AAKA;;AAED;AACA;AACA,IAAMa,WAAW,SAAXA,QAAW;AAAA,QAAK,QAAOE,CAAP,yCAAOA,CAAP,OAAa,QAAlB;AAAA,CAAjB","file":"parsePhoneNumber.js","sourcesContent":["import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'"]}