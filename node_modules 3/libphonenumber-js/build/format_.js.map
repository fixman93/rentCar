{"version":3,"sources":["../source/format_.js"],"names":["formatNumber","format_national_number_using_format","choose_format_for_number","changeInternationalFormatStyle","formatIDDSameCountryCallingCodeNumber","defaultOptions","formatExtension","formattedNumber","extension","metadata","ext","input","format","options","country","hasCountry","Error","countryCallingCode","chooseCountryByCountryCallingCode","phone","nationalNumber","v2","number","format_national_number","addExtension","fromCountry","IDDPrefix","humanReadable","formattedForSameCountryCallingCode","FIRST_GROUP_PATTERN","useInternationalFormat","includeNationalPrefixForNationalFormat","replace","RegExp","pattern","internationalFormat","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","format_as","formats","available_formats","national_number","leadingDigitsPatterns","length","last_leading_digits_pattern","search","local","trim","toCountryCallingCode","toCountryMetadata","fromCountryMetadata"],"mappings":"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","file":"format_.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport { matchesEntirely } from './util'\r\nimport Metadata from './metadata'\r\nimport { getIDDPrefix } from './IDD'\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata)\r\n{\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format)\r\n\t{\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', metadata)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', metadata)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${format_national_number(nationalNumber, 'INTERNATIONAL', metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata)\r\n{\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tformat.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\r\n\tif (useInternationalFormat) {\r\n\t\treturn changeInternationalFormatStyle(formattedNumber)\r\n\t}\r\n\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction format_national_number(number, format_as, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function changeInternationalFormatStyle(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn format_national_number(number, 'NATIONAL', toCountryMetadata)\r\n\t}\r\n}"]}