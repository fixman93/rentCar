{"version":3,"sources":["../source/parse_.js"],"names":["parse","extract_formatted_phone_number","strip_national_prefix_and_carrier_code","find_country_code","extractCountryCallingCode","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","RegExp","AFTER_PHONE_NUMBER_END_PATTERN","text","options","metadata","defaultCountry","hasCountry","v2","Error","parse_input","formatted_phone_number","number","ext","parse_phone_number","country","nationalNumber","national_number","countryCallingCode","carrierCode","selectedCountry","length","phoneNumber","valid","nationalNumberPattern","extended","result","possible","possibleLengths","undefined","phone","starts_at","search","slice","replace","nationalPrefixForParsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","captured_groups_count","nationalPrefixTransformRule","country_calling_code","national_phone_number","possible_countries","countryCallingCodes","_find_country_code","leadingDigits","indexOf","with_extension_stripped","default_country","chooseCountryByCountryCallingCode","parse_national_number","carrier_code","exactCountry","potential_national_number","numberWithoutIDD","i"],"mappings":"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","file":"parse_.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber from './isViablePhoneNumber'\r\nimport { extractExtension } from './extension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_'\r\nimport { is_possible_number } from './isPossibleNumber_'\r\nimport { stripIDDPrefix } from './IDD'\r\nimport { parseRFC3966 } from './RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options = {}, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry))\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formatted_phone_number, ext } = parse_input(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formatted_phone_number)\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst\r\n\t{\r\n\t\tcountry,\r\n\t\tnational_number : nationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t}\r\n\t= parse_phone_number\r\n\t(\r\n\t\tformatted_phone_number,\r\n\t\toptions.defaultCountry,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.selectedCountry())\r\n\t{\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2)\r\n\t{\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = country && matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) ? true : false\r\n\r\n\tif (!options.extended)\r\n\t{\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible : valid ? true : (options.extended === true) && metadata.possibleLengths() && is_possible_number(nationalNumber, countryCallingCode !== undefined, metadata),\r\n\t\tphone : nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a parseable phone number.\r\n * @param  {string} text - Input.\r\n * @return {string}.\r\n */\r\nexport function extract_formatted_phone_number(text, v2)\r\n{\r\n\tif (!text)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH)\r\n\t{\r\n\t\tif (v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\t// Attempt to extract a possible number from the string passed in\r\n\r\n\tconst starts_at = text.search(PHONE_NUMBER_START_PATTERN)\r\n\r\n\tif (starts_at < 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(starts_at)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n// Strips any national prefix (such as 0, 1) present in the number provided.\r\n// \"Carrier codes\" are only used  in Colombia and Brazil,\r\n// and only when dialing within those countries from a mobile phone to a fixed line number.\r\nexport function strip_national_prefix_and_carrier_code(number, metadata)\r\n{\r\n\tif (!number || !metadata.nationalPrefixForParsing())\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\t// Attempt to parse the first digits as a national prefix\r\n\tconst national_prefix_pattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\tconst national_prefix_matcher = national_prefix_pattern.exec(number)\r\n\r\n\t// If no national prefix is present in the phone number,\r\n\t// but the national prefix is optional for this country,\r\n\t// then consider this phone number valid.\r\n\t//\r\n\t// Google's reference `libphonenumber` implementation\r\n\t// wouldn't recognize such phone numbers as valid,\r\n\t// but I think it would perfectly make sense\r\n\t// to consider such phone numbers as valid\r\n\t// because if a national phone number was originally\r\n\t// formatted without the national prefix\r\n\t// then it must be parseable back into the original national number.\r\n\t// In other words, `parse(format(number))`\r\n\t// must always be equal to `number`.\r\n\t//\r\n\tif (!national_prefix_matcher)\r\n\t{\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tlet national_significant_number\r\n\r\n\t// `national_prefix_for_parsing` capturing groups\r\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\r\n\tconst captured_groups_count = national_prefix_matcher.length - 1\r\n\r\n\t// If the national number tranformation is needed then do it.\r\n\t//\r\n\t// `national_prefix_matcher[captured_groups_count]` means that\r\n\t// the corresponding captured group is not empty.\r\n\t// It can be empty if it's optional.\r\n\t// Example: \"0?(?:...)?\" for Argentina.\r\n\t//\r\n\tif (metadata.nationalPrefixTransformRule() && national_prefix_matcher[captured_groups_count])\r\n\t{\r\n\t\tnational_significant_number = number.replace(national_prefix_pattern, metadata.nationalPrefixTransformRule())\r\n\t}\r\n\t// Else, no transformation is necessary,\r\n\t// and just strip the national prefix.\r\n\telse\r\n\t{\r\n\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length)\r\n\t}\r\n\r\n\tlet carrierCode\r\n\tif (captured_groups_count > 0)\r\n\t{\r\n\t\tcarrierCode = national_prefix_matcher[1]\r\n\t}\r\n\r\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\r\n\t//\r\n\t// // Verify the parsed national (significant) number for this country\r\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\r\n\t// //\r\n\t// // If the original number (before stripping national prefix) was viable,\r\n\t// // and the resultant number is not, then prefer the original phone number.\r\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\r\n\t// // a national prefix and a leading digit of a valid national phone number,\r\n\t// // like `8` is the national prefix for Russia and both\r\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t// if (matchesEntirely(number, national_number_rule) &&\r\n\t// \t\t!matchesEntirely(national_significant_number, national_number_rule))\r\n\t// {\r\n\t// \treturn number\r\n\t// }\r\n\r\n\t// Return the parsed national (significant) number\r\n   return {\r\n   \tnumber: national_significant_number,\r\n   \tcarrierCode\r\n   }\r\n}\r\n\r\nexport function find_country_code(country_calling_code, national_phone_number, metadata)\r\n{\r\n\t// Is always non-empty, because `country_calling_code` is always valid\r\n\tconst possible_countries = metadata.countryCallingCodes()[country_calling_code]\r\n\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possible_countries.length === 1)\r\n\t{\r\n\t\treturn possible_countries[0]\r\n\t}\r\n\r\n\treturn _find_country_code(possible_countries, national_phone_number, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _find_country_code(possible_countries, national_phone_number, metadata)\r\n{\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tfor (const country of possible_countries)\r\n\t{\r\n\t\tmetadata.country(country)\r\n\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits())\r\n\t\t{\r\n\t\t\tif (national_phone_number &&\r\n\t\t\t\tnational_phone_number.search(metadata.leadingDigits()) === 0)\r\n\t\t\t{\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: national_phone_number, country }, undefined, metadata.metadata))\r\n\t\t{\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parse_input(text, v2)\r\n{\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0)\r\n\t{\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\r\n\tlet number = extract_formatted_phone_number(text, v2)\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = extractExtension(number)\r\n\tif (with_extension_stripped.ext)\r\n\t{\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext)\r\n{\r\n\tconst result =\r\n\t{\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\r\n\tif (ext)\r\n\t{\r\n\t\tresult.ext = ext\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * Returns `{ country, countryCallingCode, national_number }`.\r\n */\r\nfunction parse_phone_number(formatted_phone_number, default_country, metadata)\r\n{\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(formatted_phone_number, default_country, metadata.metadata)\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tlet country\r\n\r\n\tif (countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\telse if (default_country)\r\n\t{\r\n\t\tmetadata.country(default_country)\r\n\t\tcountry = default_country\r\n\t\tcountryCallingCode = getCountryCallingCode(default_country, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tconst { national_number, carrier_code } = parse_national_number(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = find_country_code(countryCallingCode, national_number, metadata)\r\n\tif (exactCountry)\r\n\t{\r\n\t\tcountry = exactCountry\r\n\t\tmetadata.country(country)\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnational_number,\r\n\t\tcarrierCode: carrier_code\r\n\t}\r\n}\r\n\r\nfunction parse_national_number(number, metadata)\r\n{\r\n\tlet national_number = parseIncompletePhoneNumber(number)\r\n\tlet carrier_code\r\n\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst { number: potential_national_number, carrierCode } = strip_national_prefix_and_carrier_code(national_number, metadata)\r\n\r\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\r\n\tif (metadata.possibleLengths())\r\n\t{\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (checkNumberLengthForType(potential_national_number, undefined, metadata))\r\n\t\t{\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tnational_number = potential_national_number\r\n\t\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t// like `8` is the national prefix for Russia and both\r\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\tif (matchesEntirely(national_number, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potential_national_number, metadata.nationalNumberPattern()))\r\n\t\t{\r\n\t\t\t// Keep the number without stripping national prefix.\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tnational_number = potential_national_number\r\n\t\t\tcarrier_code = carrierCode\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tnational_number,\r\n\t\tcarrier_code\r\n\t}\r\n}\r\n\r\n// Determines the country for a given (possibly incomplete) phone number.\r\n// export function get_country_from_phone_number(number, metadata)\r\n// {\r\n// \treturn parse_phone_number(number, null, metadata).country\r\n// }\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata)\r\n{\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number)\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0')\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length)\r\n\t{\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\r\n\t\tif (metadata.countryCallingCodes()[countryCallingCode])\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n"]}